
LVTN_2021-2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800bd78  0800bd78  0001bd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c0  0800c3c0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3c0  0800c3c0  0001c3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3c8  0800c3c8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3c8  0800c3c8  0001c3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c3d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000630  200001e0  0800c5b0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000810  0800c5b0  00020810  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b1a  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307a  00000000  00000000  00036d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00039da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  0003b3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a918  00000000  00000000  0003c910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174a3  00000000  00000000  00057228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ab6  00000000  00000000  0006e6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073bc  00000000  00000000  001051d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bd5c 	.word	0x0800bd5c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800bd5c 	.word	0x0800bd5c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_uldivmod>:
 8001130:	b953      	cbnz	r3, 8001148 <__aeabi_uldivmod+0x18>
 8001132:	b94a      	cbnz	r2, 8001148 <__aeabi_uldivmod+0x18>
 8001134:	2900      	cmp	r1, #0
 8001136:	bf08      	it	eq
 8001138:	2800      	cmpeq	r0, #0
 800113a:	bf1c      	itt	ne
 800113c:	f04f 31ff 	movne.w	r1, #4294967295
 8001140:	f04f 30ff 	movne.w	r0, #4294967295
 8001144:	f000 b96e 	b.w	8001424 <__aeabi_idiv0>
 8001148:	f1ad 0c08 	sub.w	ip, sp, #8
 800114c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001150:	f000 f806 	bl	8001160 <__udivmoddi4>
 8001154:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800115c:	b004      	add	sp, #16
 800115e:	4770      	bx	lr

08001160 <__udivmoddi4>:
 8001160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001164:	9e08      	ldr	r6, [sp, #32]
 8001166:	460d      	mov	r5, r1
 8001168:	4604      	mov	r4, r0
 800116a:	468e      	mov	lr, r1
 800116c:	2b00      	cmp	r3, #0
 800116e:	f040 8083 	bne.w	8001278 <__udivmoddi4+0x118>
 8001172:	428a      	cmp	r2, r1
 8001174:	4617      	mov	r7, r2
 8001176:	d947      	bls.n	8001208 <__udivmoddi4+0xa8>
 8001178:	fab2 f382 	clz	r3, r2
 800117c:	b14b      	cbz	r3, 8001192 <__udivmoddi4+0x32>
 800117e:	f1c3 0120 	rsb	r1, r3, #32
 8001182:	fa05 fe03 	lsl.w	lr, r5, r3
 8001186:	fa20 f101 	lsr.w	r1, r0, r1
 800118a:	409f      	lsls	r7, r3
 800118c:	ea41 0e0e 	orr.w	lr, r1, lr
 8001190:	409c      	lsls	r4, r3
 8001192:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8001196:	fbbe fcf8 	udiv	ip, lr, r8
 800119a:	fa1f f987 	uxth.w	r9, r7
 800119e:	fb08 e21c 	mls	r2, r8, ip, lr
 80011a2:	fb0c f009 	mul.w	r0, ip, r9
 80011a6:	0c21      	lsrs	r1, r4, #16
 80011a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011ac:	4290      	cmp	r0, r2
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x66>
 80011b0:	18ba      	adds	r2, r7, r2
 80011b2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011b6:	f080 8118 	bcs.w	80013ea <__udivmoddi4+0x28a>
 80011ba:	4290      	cmp	r0, r2
 80011bc:	f240 8115 	bls.w	80013ea <__udivmoddi4+0x28a>
 80011c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80011c4:	443a      	add	r2, r7
 80011c6:	1a12      	subs	r2, r2, r0
 80011c8:	fbb2 f0f8 	udiv	r0, r2, r8
 80011cc:	fb08 2210 	mls	r2, r8, r0, r2
 80011d0:	fb00 f109 	mul.w	r1, r0, r9
 80011d4:	b2a4      	uxth	r4, r4
 80011d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011da:	42a1      	cmp	r1, r4
 80011dc:	d909      	bls.n	80011f2 <__udivmoddi4+0x92>
 80011de:	193c      	adds	r4, r7, r4
 80011e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80011e4:	f080 8103 	bcs.w	80013ee <__udivmoddi4+0x28e>
 80011e8:	42a1      	cmp	r1, r4
 80011ea:	f240 8100 	bls.w	80013ee <__udivmoddi4+0x28e>
 80011ee:	3802      	subs	r0, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	1a64      	subs	r4, r4, r1
 80011f4:	2100      	movs	r1, #0
 80011f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80011fa:	b11e      	cbz	r6, 8001204 <__udivmoddi4+0xa4>
 80011fc:	2200      	movs	r2, #0
 80011fe:	40dc      	lsrs	r4, r3
 8001200:	e9c6 4200 	strd	r4, r2, [r6]
 8001204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001208:	b902      	cbnz	r2, 800120c <__udivmoddi4+0xac>
 800120a:	deff      	udf	#255	; 0xff
 800120c:	fab2 f382 	clz	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d14f      	bne.n	80012b4 <__udivmoddi4+0x154>
 8001214:	1a8d      	subs	r5, r1, r2
 8001216:	2101      	movs	r1, #1
 8001218:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800121c:	fa1f f882 	uxth.w	r8, r2
 8001220:	fbb5 fcfe 	udiv	ip, r5, lr
 8001224:	fb0e 551c 	mls	r5, lr, ip, r5
 8001228:	fb08 f00c 	mul.w	r0, r8, ip
 800122c:	0c22      	lsrs	r2, r4, #16
 800122e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001232:	42a8      	cmp	r0, r5
 8001234:	d907      	bls.n	8001246 <__udivmoddi4+0xe6>
 8001236:	197d      	adds	r5, r7, r5
 8001238:	f10c 32ff 	add.w	r2, ip, #4294967295
 800123c:	d202      	bcs.n	8001244 <__udivmoddi4+0xe4>
 800123e:	42a8      	cmp	r0, r5
 8001240:	f200 80e9 	bhi.w	8001416 <__udivmoddi4+0x2b6>
 8001244:	4694      	mov	ip, r2
 8001246:	1a2d      	subs	r5, r5, r0
 8001248:	fbb5 f0fe 	udiv	r0, r5, lr
 800124c:	fb0e 5510 	mls	r5, lr, r0, r5
 8001250:	fb08 f800 	mul.w	r8, r8, r0
 8001254:	b2a4      	uxth	r4, r4
 8001256:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800125a:	45a0      	cmp	r8, r4
 800125c:	d907      	bls.n	800126e <__udivmoddi4+0x10e>
 800125e:	193c      	adds	r4, r7, r4
 8001260:	f100 32ff 	add.w	r2, r0, #4294967295
 8001264:	d202      	bcs.n	800126c <__udivmoddi4+0x10c>
 8001266:	45a0      	cmp	r8, r4
 8001268:	f200 80d9 	bhi.w	800141e <__udivmoddi4+0x2be>
 800126c:	4610      	mov	r0, r2
 800126e:	eba4 0408 	sub.w	r4, r4, r8
 8001272:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001276:	e7c0      	b.n	80011fa <__udivmoddi4+0x9a>
 8001278:	428b      	cmp	r3, r1
 800127a:	d908      	bls.n	800128e <__udivmoddi4+0x12e>
 800127c:	2e00      	cmp	r6, #0
 800127e:	f000 80b1 	beq.w	80013e4 <__udivmoddi4+0x284>
 8001282:	2100      	movs	r1, #0
 8001284:	e9c6 0500 	strd	r0, r5, [r6]
 8001288:	4608      	mov	r0, r1
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128e:	fab3 f183 	clz	r1, r3
 8001292:	2900      	cmp	r1, #0
 8001294:	d14b      	bne.n	800132e <__udivmoddi4+0x1ce>
 8001296:	42ab      	cmp	r3, r5
 8001298:	d302      	bcc.n	80012a0 <__udivmoddi4+0x140>
 800129a:	4282      	cmp	r2, r0
 800129c:	f200 80b9 	bhi.w	8001412 <__udivmoddi4+0x2b2>
 80012a0:	1a84      	subs	r4, r0, r2
 80012a2:	eb65 0303 	sbc.w	r3, r5, r3
 80012a6:	2001      	movs	r0, #1
 80012a8:	469e      	mov	lr, r3
 80012aa:	2e00      	cmp	r6, #0
 80012ac:	d0aa      	beq.n	8001204 <__udivmoddi4+0xa4>
 80012ae:	e9c6 4e00 	strd	r4, lr, [r6]
 80012b2:	e7a7      	b.n	8001204 <__udivmoddi4+0xa4>
 80012b4:	409f      	lsls	r7, r3
 80012b6:	f1c3 0220 	rsb	r2, r3, #32
 80012ba:	40d1      	lsrs	r1, r2
 80012bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80012c4:	fa1f f887 	uxth.w	r8, r7
 80012c8:	fb0e 1110 	mls	r1, lr, r0, r1
 80012cc:	fa24 f202 	lsr.w	r2, r4, r2
 80012d0:	409d      	lsls	r5, r3
 80012d2:	fb00 fc08 	mul.w	ip, r0, r8
 80012d6:	432a      	orrs	r2, r5
 80012d8:	0c15      	lsrs	r5, r2, #16
 80012da:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012de:	45ac      	cmp	ip, r5
 80012e0:	fa04 f403 	lsl.w	r4, r4, r3
 80012e4:	d909      	bls.n	80012fa <__udivmoddi4+0x19a>
 80012e6:	197d      	adds	r5, r7, r5
 80012e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80012ec:	f080 808f 	bcs.w	800140e <__udivmoddi4+0x2ae>
 80012f0:	45ac      	cmp	ip, r5
 80012f2:	f240 808c 	bls.w	800140e <__udivmoddi4+0x2ae>
 80012f6:	3802      	subs	r0, #2
 80012f8:	443d      	add	r5, r7
 80012fa:	eba5 050c 	sub.w	r5, r5, ip
 80012fe:	fbb5 f1fe 	udiv	r1, r5, lr
 8001302:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001306:	fb01 f908 	mul.w	r9, r1, r8
 800130a:	b295      	uxth	r5, r2
 800130c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001310:	45a9      	cmp	r9, r5
 8001312:	d907      	bls.n	8001324 <__udivmoddi4+0x1c4>
 8001314:	197d      	adds	r5, r7, r5
 8001316:	f101 32ff 	add.w	r2, r1, #4294967295
 800131a:	d274      	bcs.n	8001406 <__udivmoddi4+0x2a6>
 800131c:	45a9      	cmp	r9, r5
 800131e:	d972      	bls.n	8001406 <__udivmoddi4+0x2a6>
 8001320:	3902      	subs	r1, #2
 8001322:	443d      	add	r5, r7
 8001324:	eba5 0509 	sub.w	r5, r5, r9
 8001328:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800132c:	e778      	b.n	8001220 <__udivmoddi4+0xc0>
 800132e:	f1c1 0720 	rsb	r7, r1, #32
 8001332:	408b      	lsls	r3, r1
 8001334:	fa22 fc07 	lsr.w	ip, r2, r7
 8001338:	ea4c 0c03 	orr.w	ip, ip, r3
 800133c:	fa25 f407 	lsr.w	r4, r5, r7
 8001340:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001344:	fbb4 f9fe 	udiv	r9, r4, lr
 8001348:	fa1f f88c 	uxth.w	r8, ip
 800134c:	fb0e 4419 	mls	r4, lr, r9, r4
 8001350:	fa20 f307 	lsr.w	r3, r0, r7
 8001354:	fb09 fa08 	mul.w	sl, r9, r8
 8001358:	408d      	lsls	r5, r1
 800135a:	431d      	orrs	r5, r3
 800135c:	0c2b      	lsrs	r3, r5, #16
 800135e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001362:	45a2      	cmp	sl, r4
 8001364:	fa02 f201 	lsl.w	r2, r2, r1
 8001368:	fa00 f301 	lsl.w	r3, r0, r1
 800136c:	d909      	bls.n	8001382 <__udivmoddi4+0x222>
 800136e:	eb1c 0404 	adds.w	r4, ip, r4
 8001372:	f109 30ff 	add.w	r0, r9, #4294967295
 8001376:	d248      	bcs.n	800140a <__udivmoddi4+0x2aa>
 8001378:	45a2      	cmp	sl, r4
 800137a:	d946      	bls.n	800140a <__udivmoddi4+0x2aa>
 800137c:	f1a9 0902 	sub.w	r9, r9, #2
 8001380:	4464      	add	r4, ip
 8001382:	eba4 040a 	sub.w	r4, r4, sl
 8001386:	fbb4 f0fe 	udiv	r0, r4, lr
 800138a:	fb0e 4410 	mls	r4, lr, r0, r4
 800138e:	fb00 fa08 	mul.w	sl, r0, r8
 8001392:	b2ad      	uxth	r5, r5
 8001394:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001398:	45a2      	cmp	sl, r4
 800139a:	d908      	bls.n	80013ae <__udivmoddi4+0x24e>
 800139c:	eb1c 0404 	adds.w	r4, ip, r4
 80013a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80013a4:	d22d      	bcs.n	8001402 <__udivmoddi4+0x2a2>
 80013a6:	45a2      	cmp	sl, r4
 80013a8:	d92b      	bls.n	8001402 <__udivmoddi4+0x2a2>
 80013aa:	3802      	subs	r0, #2
 80013ac:	4464      	add	r4, ip
 80013ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013b2:	fba0 8902 	umull	r8, r9, r0, r2
 80013b6:	eba4 040a 	sub.w	r4, r4, sl
 80013ba:	454c      	cmp	r4, r9
 80013bc:	46c6      	mov	lr, r8
 80013be:	464d      	mov	r5, r9
 80013c0:	d319      	bcc.n	80013f6 <__udivmoddi4+0x296>
 80013c2:	d016      	beq.n	80013f2 <__udivmoddi4+0x292>
 80013c4:	b15e      	cbz	r6, 80013de <__udivmoddi4+0x27e>
 80013c6:	ebb3 020e 	subs.w	r2, r3, lr
 80013ca:	eb64 0405 	sbc.w	r4, r4, r5
 80013ce:	fa04 f707 	lsl.w	r7, r4, r7
 80013d2:	fa22 f301 	lsr.w	r3, r2, r1
 80013d6:	431f      	orrs	r7, r3
 80013d8:	40cc      	lsrs	r4, r1
 80013da:	e9c6 7400 	strd	r7, r4, [r6]
 80013de:	2100      	movs	r1, #0
 80013e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e4:	4631      	mov	r1, r6
 80013e6:	4630      	mov	r0, r6
 80013e8:	e70c      	b.n	8001204 <__udivmoddi4+0xa4>
 80013ea:	468c      	mov	ip, r1
 80013ec:	e6eb      	b.n	80011c6 <__udivmoddi4+0x66>
 80013ee:	4610      	mov	r0, r2
 80013f0:	e6ff      	b.n	80011f2 <__udivmoddi4+0x92>
 80013f2:	4543      	cmp	r3, r8
 80013f4:	d2e6      	bcs.n	80013c4 <__udivmoddi4+0x264>
 80013f6:	ebb8 0e02 	subs.w	lr, r8, r2
 80013fa:	eb69 050c 	sbc.w	r5, r9, ip
 80013fe:	3801      	subs	r0, #1
 8001400:	e7e0      	b.n	80013c4 <__udivmoddi4+0x264>
 8001402:	4628      	mov	r0, r5
 8001404:	e7d3      	b.n	80013ae <__udivmoddi4+0x24e>
 8001406:	4611      	mov	r1, r2
 8001408:	e78c      	b.n	8001324 <__udivmoddi4+0x1c4>
 800140a:	4681      	mov	r9, r0
 800140c:	e7b9      	b.n	8001382 <__udivmoddi4+0x222>
 800140e:	4608      	mov	r0, r1
 8001410:	e773      	b.n	80012fa <__udivmoddi4+0x19a>
 8001412:	4608      	mov	r0, r1
 8001414:	e749      	b.n	80012aa <__udivmoddi4+0x14a>
 8001416:	f1ac 0c02 	sub.w	ip, ip, #2
 800141a:	443d      	add	r5, r7
 800141c:	e713      	b.n	8001246 <__udivmoddi4+0xe6>
 800141e:	3802      	subs	r0, #2
 8001420:	443c      	add	r4, r7
 8001422:	e724      	b.n	800126e <__udivmoddi4+0x10e>

08001424 <__aeabi_idiv0>:
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <LoRa_Init>:
#include "string.h"
#include "driver.h"
#include "lora.h"
#include "stdlib.h"
bool LoRa_Init(long frequency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
    // setup pins
    LoRa_setPins();
 8001430:	f000 fbde 	bl	8001bf0 <LoRa_setPins>

    // perform reset
    LoRa_Chip_Reset(0);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 fcdd 	bl	8001df4 <LoRa_Chip_Reset>
    HAL_Delay(100);
 800143a:	2064      	movs	r0, #100	; 0x64
 800143c:	f003 fa1e 	bl	800487c <HAL_Delay>
    LoRa_Chip_Reset(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f000 fcd7 	bl	8001df4 <LoRa_Chip_Reset>
    HAL_Delay(100);
 8001446:	2064      	movs	r0, #100	; 0x64
 8001448:	f003 fa18 	bl	800487c <HAL_Delay>

    // check version
    uint8_t version = LoRa_readRegister(REG_VERSION);
 800144c:	2042      	movs	r0, #66	; 0x42
 800144e:	f000 fc57 	bl	8001d00 <LoRa_readRegister>
 8001452:	4603      	mov	r3, r0
 8001454:	73fb      	strb	r3, [r7, #15]

    if(version != 0x12)
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b12      	cmp	r3, #18
 800145a:	d001      	beq.n	8001460 <LoRa_Init+0x38>
    {
        return 0;
 800145c:	2300      	movs	r3, #0
 800145e:	e022      	b.n	80014a6 <LoRa_Init+0x7e>
    }

    // put in sleep mode
    LoRa_sleep();
 8001460:	f000 f96c 	bl	800173c <LoRa_sleep>

    // set frequency
    LoRa_setFrequency(frequency);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f9c3 	bl	80017f0 <LoRa_setFrequency>

    // set base addresses
    LoRa_writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
 800146a:	2100      	movs	r1, #0
 800146c:	200e      	movs	r0, #14
 800146e:	f000 fc59 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	200f      	movs	r0, #15
 8001476:	f000 fc55 	bl	8001d24 <LoRa_writeRegister>

    // set LNA boost
    LoRa_writeRegister(REG_LNA, LoRa_readRegister(REG_LNA) | 0x03);
 800147a:	200c      	movs	r0, #12
 800147c:	f000 fc40 	bl	8001d00 <LoRa_readRegister>
 8001480:	4603      	mov	r3, r0
 8001482:	f043 0303 	orr.w	r3, r3, #3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4619      	mov	r1, r3
 800148a:	200c      	movs	r0, #12
 800148c:	f000 fc4a 	bl	8001d24 <LoRa_writeRegister>

    // set auto AGC
    LoRa_writeRegister(REG_MODEM_CONFIG_3, 0x04);
 8001490:	2104      	movs	r1, #4
 8001492:	2026      	movs	r0, #38	; 0x26
 8001494:	f000 fc46 	bl	8001d24 <LoRa_writeRegister>

    // set output power to 17 dBm
    LoRa_setTxPower(19, PA_OUTPUT_PA_BOOST_PIN);
 8001498:	2101      	movs	r1, #1
 800149a:	2013      	movs	r0, #19
 800149c:	f000 f956 	bl	800174c <LoRa_setTxPower>

    // put in standby mode
    LoRa_idle();
 80014a0:	f000 f944 	bl	800172c <LoRa_idle>

    return 1;
 80014a4:	2301      	movs	r3, #1
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <LoRa_beginPacket>:
    // put in sleep mode
    LoRa_sleep();
}

bool LoRa_beginPacket(bool implicitHeader)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	71fb      	strb	r3, [r7, #7]
    if(LoRa_isTransmitting())
 80014b8:	f000 f844 	bl	8001544 <LoRa_isTransmitting>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <LoRa_beginPacket+0x18>
    {
        return 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e012      	b.n	80014ec <LoRa_beginPacket+0x3e>
    }

    // put in standby mode
    LoRa_idle();
 80014c6:	f000 f931 	bl	800172c <LoRa_idle>

    if(implicitHeader)
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <LoRa_beginPacket+0x28>
    {
        LoRa_implicitHeaderMode();
 80014d0:	f000 fbb4 	bl	8001c3c <LoRa_implicitHeaderMode>
 80014d4:	e001      	b.n	80014da <LoRa_beginPacket+0x2c>
    }
    else
    {
        LoRa_explicitHeaderMode();
 80014d6:	f000 fb9d 	bl	8001c14 <LoRa_explicitHeaderMode>
    }

    // reset FIFO address and paload length
    LoRa_writeRegister(REG_FIFO_ADDR_PTR, 0);
 80014da:	2100      	movs	r1, #0
 80014dc:	200d      	movs	r0, #13
 80014de:	f000 fc21 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_PAYLOAD_LENGTH, 0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2022      	movs	r0, #34	; 0x22
 80014e6:	f000 fc1d 	bl	8001d24 <LoRa_writeRegister>

    return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <LoRa_endPacket>:

bool LoRa_endPacket(bool async)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    // put in TX mode
    if(async)
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <LoRa_endPacket+0x18>
    {
        LoRa_writeRegister(REG_DIO_MAPPING_1, 0x40); // DIO0 => TXDONE
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	2040      	movs	r0, #64	; 0x40
 8001508:	f000 fc0c 	bl	8001d24 <LoRa_writeRegister>
    }

    LoRa_writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800150c:	2183      	movs	r1, #131	; 0x83
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fc08 	bl	8001d24 <LoRa_writeRegister>

    if(!async)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00c      	beq.n	800153a <LoRa_endPacket+0x46>
    {
        // wait for TX done
        while((LoRa_readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {}
 8001520:	bf00      	nop
 8001522:	2012      	movs	r0, #18
 8001524:	f000 fbec 	bl	8001d00 <LoRa_readRegister>
 8001528:	4603      	mov	r3, r0
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f7      	beq.n	8001522 <LoRa_endPacket+0x2e>

        // clear IRQ's
        LoRa_writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001532:	2108      	movs	r1, #8
 8001534:	2012      	movs	r0, #18
 8001536:	f000 fbf5 	bl	8001d24 <LoRa_writeRegister>
    }

    return 1;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LoRa_isTransmitting>:

bool LoRa_isTransmitting(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
    if((LoRa_readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX)
 8001548:	2001      	movs	r0, #1
 800154a:	f000 fbd9 	bl	8001d00 <LoRa_readRegister>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b03      	cmp	r3, #3
 8001556:	d101      	bne.n	800155c <LoRa_isTransmitting+0x18>
    {
        return 1;
 8001558:	2301      	movs	r3, #1
 800155a:	e00c      	b.n	8001576 <LoRa_isTransmitting+0x32>
    }

    if(LoRa_readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK)
 800155c:	2012      	movs	r0, #18
 800155e:	f000 fbcf 	bl	8001d00 <LoRa_readRegister>
 8001562:	4603      	mov	r3, r0
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <LoRa_isTransmitting+0x30>
    {
        // clear IRQ's
        LoRa_writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800156c:	2108      	movs	r1, #8
 800156e:	2012      	movs	r0, #18
 8001570:	f000 fbd8 	bl	8001d24 <LoRa_writeRegister>
    }

    return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}

0800157a <LoRa_sendPacket>:
{
    return (LoRa_readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
}

int LoRa_sendPacket(const char *buffer)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b084      	sub	sp, #16
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
    LoRa_beginPacket(0);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ff93 	bl	80014ae <LoRa_beginPacket>
    int size = LoRa_write(buffer, strlen(buffer));
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7fe fdeb 	bl	8000164 <strlen>
 800158e:	4603      	mov	r3, r0
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f852 	bl	800163c <LoRa_write>
 8001598:	4603      	mov	r3, r0
 800159a:	60fb      	str	r3, [r7, #12]
    LoRa_endPacket(1);
 800159c:	2001      	movs	r0, #1
 800159e:	f7ff ffa9 	bl	80014f4 <LoRa_endPacket>

    return size;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <LoRa_receivePacket>:
    {
        *buffer++ = LoRa_read();
    }
}
int LoRa_receivePacket(char *buffer, uint32_t timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
    while(!_dio0_rx_isr)
 80015b6:	e00a      	b.n	80015ce <LoRa_receivePacket+0x22>
    {
        if(!--timeout)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	603b      	str	r3, [r7, #0]
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <LoRa_receivePacket+0x1c>
        {
            return 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e030      	b.n	800162a <LoRa_receivePacket+0x7e>
        }

        HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f003 f957 	bl	800487c <HAL_Delay>
    while(!_dio0_rx_isr)
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <LoRa_receivePacket+0x88>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	f083 0301 	eor.w	r3, r3, #1
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1ed      	bne.n	80015b8 <LoRa_receivePacket+0xc>
    }

    _dio0_rx_isr = 0;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <LoRa_receivePacket+0x88>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
    int i, size = _packetSize;
 80015e2:	4b15      	ldr	r3, [pc, #84]	; (8001638 <LoRa_receivePacket+0x8c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60bb      	str	r3, [r7, #8]
    _packetSize = 0;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <LoRa_receivePacket+0x8c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]

    if(size > 0)
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	dd19      	ble.n	8001628 <LoRa_receivePacket+0x7c>
    {
        for(i = 0; i < size; i++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	e012      	b.n	8001620 <LoRa_receivePacket+0x74>
        {
            while(LoRa_available())
            {
                buffer[i++] = LoRa_read();
 80015fa:	f000 f861 	bl	80016c0 <LoRa_read>
 80015fe:	4601      	mov	r1, r0
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	60fa      	str	r2, [r7, #12]
 8001606:	461a      	mov	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	b2ca      	uxtb	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
            while(LoRa_available())
 8001610:	f000 f848 	bl	80016a4 <LoRa_available>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ef      	bne.n	80015fa <LoRa_receivePacket+0x4e>
        for(i = 0; i < size; i++)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	3301      	adds	r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	dbf3      	blt.n	8001610 <LoRa_receivePacket+0x64>
            }
        }
    }

    return size;
 8001628:	68bb      	ldr	r3, [r7, #8]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000340 	.word	0x20000340
 8001638:	2000033c 	.word	0x2000033c

0800163c <LoRa_write>:
size_t LoRa_write(const char *buffer, size_t size)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
    uint8_t currentLength = LoRa_readRegister(REG_PAYLOAD_LENGTH);
 8001646:	2022      	movs	r0, #34	; 0x22
 8001648:	f000 fb5a 	bl	8001d00 <LoRa_readRegister>
 800164c:	4603      	mov	r3, r0
 800164e:	72fb      	strb	r3, [r7, #11]

    // check size
    if((currentLength + size) > MAX_PKT_LENGTH)
 8001650:	7afa      	ldrb	r2, [r7, #11]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	4413      	add	r3, r2
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d903      	bls.n	8001662 <LoRa_write+0x26>
    {
        size = MAX_PKT_LENGTH - currentLength;
 800165a:	7afb      	ldrb	r3, [r7, #11]
 800165c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001660:	603b      	str	r3, [r7, #0]
    }

    // write data
    size_t i;

    for(i = 0; i < size; i++)
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	e00a      	b.n	800167e <LoRa_write+0x42>
    {
        LoRa_writeRegister(REG_FIFO, buffer[i]);
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4619      	mov	r1, r3
 8001672:	2000      	movs	r0, #0
 8001674:	f000 fb56 	bl	8001d24 <LoRa_writeRegister>
    for(i = 0; i < size; i++)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d3f0      	bcc.n	8001668 <LoRa_write+0x2c>
    }

    // update length
    LoRa_writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	7afb      	ldrb	r3, [r7, #11]
 800168c:	4413      	add	r3, r2
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4619      	mov	r1, r3
 8001692:	2022      	movs	r0, #34	; 0x22
 8001694:	f000 fb46 	bl	8001d24 <LoRa_writeRegister>

    return size;
 8001698:	683b      	ldr	r3, [r7, #0]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <LoRa_available>:

int LoRa_available(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
    return (LoRa_readRegister(REG_RX_NB_BYTES) - _packetIndex);
 80016a8:	2013      	movs	r0, #19
 80016aa:	f000 fb29 	bl	8001d00 <LoRa_readRegister>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b02      	ldr	r3, [pc, #8]	; (80016bc <LoRa_available+0x18>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	1ad3      	subs	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200003ec 	.word	0x200003ec

080016c0 <LoRa_read>:

int LoRa_read(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    if(!LoRa_available())
 80016c4:	f7ff ffee 	bl	80016a4 <LoRa_available>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d102      	bne.n	80016d4 <LoRa_read+0x14>
    {
        return -1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e008      	b.n	80016e6 <LoRa_read+0x26>
    }

    _packetIndex++;
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <LoRa_read+0x2c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <LoRa_read+0x2c>)
 80016dc:	6013      	str	r3, [r2, #0]

    return LoRa_readRegister(REG_FIFO);
 80016de:	2000      	movs	r0, #0
 80016e0:	f000 fb0e 	bl	8001d00 <LoRa_readRegister>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003ec 	.word	0x200003ec

080016f0 <LoRa_receive>:
}

void LoRa_flush(void) {}

void LoRa_receive(int size)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    LoRa_writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 80016f8:	2100      	movs	r1, #0
 80016fa:	2040      	movs	r0, #64	; 0x40
 80016fc:	f000 fb12 	bl	8001d24 <LoRa_writeRegister>

    if(size > 0)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	dd08      	ble.n	8001718 <LoRa_receive+0x28>
    {
        LoRa_implicitHeaderMode();
 8001706:	f000 fa99 	bl	8001c3c <LoRa_implicitHeaderMode>
        LoRa_writeRegister(REG_PAYLOAD_LENGTH, size & 0xff);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	4619      	mov	r1, r3
 8001710:	2022      	movs	r0, #34	; 0x22
 8001712:	f000 fb07 	bl	8001d24 <LoRa_writeRegister>
 8001716:	e001      	b.n	800171c <LoRa_receive+0x2c>
    }
    else
    {
        LoRa_explicitHeaderMode();
 8001718:	f000 fa7c 	bl	8001c14 <LoRa_explicitHeaderMode>
    }

    LoRa_writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800171c:	2185      	movs	r1, #133	; 0x85
 800171e:	2001      	movs	r0, #1
 8001720:	f000 fb00 	bl	8001d24 <LoRa_writeRegister>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <LoRa_idle>:

void LoRa_idle(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
    LoRa_writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001730:	2181      	movs	r1, #129	; 0x81
 8001732:	2001      	movs	r0, #1
 8001734:	f000 faf6 	bl	8001d24 <LoRa_writeRegister>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <LoRa_sleep>:

void LoRa_sleep(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    LoRa_writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	2001      	movs	r0, #1
 8001744:	f000 faee 	bl	8001d24 <LoRa_writeRegister>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <LoRa_setTxPower>:

void LoRa_setTxPower(int level, bool outputPin)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
    if(PA_OUTPUT_RFO_PIN == outputPin)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	f083 0301 	eor.w	r3, r3, #1
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b00      	cmp	r3, #0
 8001762:	d015      	beq.n	8001790 <LoRa_setTxPower+0x44>
    {
        // RFO
        if(level < 0)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	da02      	bge.n	8001770 <LoRa_setTxPower+0x24>
        {
            level = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e004      	b.n	800177a <LoRa_setTxPower+0x2e>
        }
        else if(level > 14)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b0e      	cmp	r3, #14
 8001774:	dd01      	ble.n	800177a <LoRa_setTxPower+0x2e>
        {
            level = 14;
 8001776:	230e      	movs	r3, #14
 8001778:	607b      	str	r3, [r7, #4]
        }

        LoRa_writeRegister(REG_PA_CONFIG, 0x70 | level);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001782:	b25b      	sxtb	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4619      	mov	r1, r3
 8001788:	2009      	movs	r0, #9
 800178a:	f000 facb 	bl	8001d24 <LoRa_writeRegister>
            LoRa_setOCP(100);
        }

        LoRa_writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
    }
}
 800178e:	e02b      	b.n	80017e8 <LoRa_setTxPower+0x9c>
        if(level > 17)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b11      	cmp	r3, #17
 8001794:	dd0f      	ble.n	80017b6 <LoRa_setTxPower+0x6a>
            if(level > 20)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b14      	cmp	r3, #20
 800179a:	dd01      	ble.n	80017a0 <LoRa_setTxPower+0x54>
                level = 20;
 800179c:	2314      	movs	r3, #20
 800179e:	607b      	str	r3, [r7, #4]
            level -= 3;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b03      	subs	r3, #3
 80017a4:	607b      	str	r3, [r7, #4]
            LoRa_writeRegister(REG_PA_DAC, 0x87);
 80017a6:	2187      	movs	r1, #135	; 0x87
 80017a8:	204d      	movs	r0, #77	; 0x4d
 80017aa:	f000 fabb 	bl	8001d24 <LoRa_writeRegister>
            LoRa_setOCP(140);
 80017ae:	208c      	movs	r0, #140	; 0x8c
 80017b0:	f000 f9ec 	bl	8001b8c <LoRa_setOCP>
 80017b4:	e00b      	b.n	80017ce <LoRa_setTxPower+0x82>
            if(level < 2)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	dc01      	bgt.n	80017c0 <LoRa_setTxPower+0x74>
                level = 2;
 80017bc:	2302      	movs	r3, #2
 80017be:	607b      	str	r3, [r7, #4]
            LoRa_writeRegister(REG_PA_DAC, 0x84);
 80017c0:	2184      	movs	r1, #132	; 0x84
 80017c2:	204d      	movs	r0, #77	; 0x4d
 80017c4:	f000 faae 	bl	8001d24 <LoRa_writeRegister>
            LoRa_setOCP(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f000 f9df 	bl	8001b8c <LoRa_setOCP>
        LoRa_writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	3b02      	subs	r3, #2
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	2009      	movs	r0, #9
 80017e4:	f000 fa9e 	bl	8001d24 <LoRa_writeRegister>
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LoRa_setFrequency>:

void LoRa_setFrequency(long frequency)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    _frequency = frequency;
 80017f8:	4a1d      	ldr	r2, [pc, #116]	; (8001870 <LoRa_setFrequency+0x80>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]

    uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	461a      	mov	r2, r3
 8001802:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001806:	1355      	asrs	r5, r2, #13
 8001808:	04d4      	lsls	r4, r2, #19
 800180a:	4a1a      	ldr	r2, [pc, #104]	; (8001874 <LoRa_setFrequency+0x84>)
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	4620      	mov	r0, r4
 8001812:	4629      	mov	r1, r5
 8001814:	f7ff fc8c 	bl	8001130 <__aeabi_uldivmod>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	e9c7 2302 	strd	r2, r3, [r7, #8]

    LoRa_writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8001820:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	0c02      	lsrs	r2, r0, #16
 800182e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001832:	0c0b      	lsrs	r3, r1, #16
 8001834:	b2d3      	uxtb	r3, r2
 8001836:	4619      	mov	r1, r3
 8001838:	2006      	movs	r0, #6
 800183a:	f000 fa73 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 800183e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	0a02      	lsrs	r2, r0, #8
 800184c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001850:	0a0b      	lsrs	r3, r1, #8
 8001852:	b2d3      	uxtb	r3, r2
 8001854:	4619      	mov	r1, r3
 8001856:	2007      	movs	r0, #7
 8001858:	f000 fa64 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800185c:	7a3b      	ldrb	r3, [r7, #8]
 800185e:	4619      	mov	r1, r3
 8001860:	2008      	movs	r0, #8
 8001862:	f000 fa5f 	bl	8001d24 <LoRa_writeRegister>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bdb0      	pop	{r4, r5, r7, pc}
 800186e:	bf00      	nop
 8001870:	200003e8 	.word	0x200003e8
 8001874:	01e84800 	.word	0x01e84800

08001878 <LoRa_getSpreadingFactor>:

int LoRa_getSpreadingFactor(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
    return LoRa_readRegister(REG_MODEM_CONFIG_2) >> 4;
 800187c:	201e      	movs	r0, #30
 800187e:	f000 fa3f 	bl	8001d00 <LoRa_readRegister>
 8001882:	4603      	mov	r3, r0
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	b2db      	uxtb	r3, r3
}
 8001888:	4618      	mov	r0, r3
 800188a:	bd80      	pop	{r7, pc}

0800188c <LoRa_setSpreadingFactor>:

void LoRa_setSpreadingFactor(int sf)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    if(sf < 6)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b05      	cmp	r3, #5
 8001898:	dc02      	bgt.n	80018a0 <LoRa_setSpreadingFactor+0x14>
    {
        sf = 6;
 800189a:	2306      	movs	r3, #6
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e004      	b.n	80018aa <LoRa_setSpreadingFactor+0x1e>
    }
    else if(sf > 12)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	dd01      	ble.n	80018aa <LoRa_setSpreadingFactor+0x1e>
    {
        sf = 12;
 80018a6:	230c      	movs	r3, #12
 80018a8:	607b      	str	r3, [r7, #4]
    }

    if(sf == 6)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d108      	bne.n	80018c2 <LoRa_setSpreadingFactor+0x36>
    {
        LoRa_writeRegister(REG_DETECTION_OPTIMIZE, 0xc5);
 80018b0:	21c5      	movs	r1, #197	; 0xc5
 80018b2:	2031      	movs	r0, #49	; 0x31
 80018b4:	f000 fa36 	bl	8001d24 <LoRa_writeRegister>
        LoRa_writeRegister(REG_DETECTION_THRESHOLD, 0x0c);
 80018b8:	210c      	movs	r1, #12
 80018ba:	2037      	movs	r0, #55	; 0x37
 80018bc:	f000 fa32 	bl	8001d24 <LoRa_writeRegister>
 80018c0:	e007      	b.n	80018d2 <LoRa_setSpreadingFactor+0x46>
    }
    else
    {
        LoRa_writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
 80018c2:	21c3      	movs	r1, #195	; 0xc3
 80018c4:	2031      	movs	r0, #49	; 0x31
 80018c6:	f000 fa2d 	bl	8001d24 <LoRa_writeRegister>
        LoRa_writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
 80018ca:	210a      	movs	r1, #10
 80018cc:	2037      	movs	r0, #55	; 0x37
 80018ce:	f000 fa29 	bl	8001d24 <LoRa_writeRegister>
    }

    LoRa_writeRegister(REG_MODEM_CONFIG_2, (LoRa_readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
 80018d2:	201e      	movs	r0, #30
 80018d4:	f000 fa14 	bl	8001d00 <LoRa_readRegister>
 80018d8:	4603      	mov	r3, r0
 80018da:	b25b      	sxtb	r3, r3
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	b25a      	sxtb	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	4619      	mov	r1, r3
 80018f0:	201e      	movs	r0, #30
 80018f2:	f000 fa17 	bl	8001d24 <LoRa_writeRegister>
    LoRa_setLdoFlag();
 80018f6:	f000 f8b9 	bl	8001a6c <LoRa_setLdoFlag>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <LoRa_getSignalBandwidth>:

long LoRa_getSignalBandwidth(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
    uint8_t bw = (LoRa_readRegister(REG_MODEM_CONFIG_1) >> 4);
 800190a:	201d      	movs	r0, #29
 800190c:	f000 f9f8 	bl	8001d00 <LoRa_readRegister>
 8001910:	4603      	mov	r3, r0
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	71fb      	strb	r3, [r7, #7]

    switch (bw)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d832      	bhi.n	8001982 <LoRa_getSignalBandwidth+0x7e>
 800191c:	a201      	add	r2, pc, #4	; (adr r2, 8001924 <LoRa_getSignalBandwidth+0x20>)
 800191e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001922:	bf00      	nop
 8001924:	0800194d 	.word	0x0800194d
 8001928:	08001953 	.word	0x08001953
 800192c:	08001959 	.word	0x08001959
 8001930:	0800195f 	.word	0x0800195f
 8001934:	08001965 	.word	0x08001965
 8001938:	0800196b 	.word	0x0800196b
 800193c:	08001971 	.word	0x08001971
 8001940:	08001977 	.word	0x08001977
 8001944:	0800197b 	.word	0x0800197b
 8001948:	0800197f 	.word	0x0800197f
    {
    case 0: return 7.8E3;
 800194c:	f641 6378 	movw	r3, #7800	; 0x1e78
 8001950:	e019      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 1: return 10.4E3;
 8001952:	f642 03a0 	movw	r3, #10400	; 0x28a0
 8001956:	e016      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 2: return 15.6E3;
 8001958:	f643 43f0 	movw	r3, #15600	; 0x3cf0
 800195c:	e013      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 3: return 20.8E3;
 800195e:	f245 1340 	movw	r3, #20800	; 0x5140
 8001962:	e010      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 4: return 31.25E3;
 8001964:	f647 2312 	movw	r3, #31250	; 0x7a12
 8001968:	e00d      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 5: return 41.7E3;
 800196a:	f24a 23e4 	movw	r3, #41700	; 0xa2e4
 800196e:	e00a      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 6: return 62.5E3;
 8001970:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001974:	e007      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 7: return 125E3;
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <LoRa_getSignalBandwidth+0x8c>)
 8001978:	e005      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 8: return 250E3;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <LoRa_getSignalBandwidth+0x90>)
 800197c:	e003      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    case 9: return 500E3;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <LoRa_getSignalBandwidth+0x94>)
 8001980:	e001      	b.n	8001986 <LoRa_getSignalBandwidth+0x82>
    }

    return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	0001e848 	.word	0x0001e848
 8001994:	0003d090 	.word	0x0003d090
 8001998:	0007a120 	.word	0x0007a120

0800199c <LoRa_setSignalBandwidth>:

void LoRa_setSignalBandwidth(long sbw)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    int bw;

    if(sbw <= 7.8E3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f641 6278 	movw	r2, #7800	; 0x1e78
 80019aa:	4293      	cmp	r3, r2
 80019ac:	dc02      	bgt.n	80019b4 <LoRa_setSignalBandwidth+0x18>
    {
        bw = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e03f      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 10.4E3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f642 02a0 	movw	r2, #10400	; 0x28a0
 80019ba:	4293      	cmp	r3, r2
 80019bc:	dc02      	bgt.n	80019c4 <LoRa_setSignalBandwidth+0x28>
    {
        bw = 1;
 80019be:	2301      	movs	r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e037      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 15.6E3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f643 42f0 	movw	r2, #15600	; 0x3cf0
 80019ca:	4293      	cmp	r3, r2
 80019cc:	dc02      	bgt.n	80019d4 <LoRa_setSignalBandwidth+0x38>
    {
        bw = 2;
 80019ce:	2302      	movs	r3, #2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	e02f      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 20.8E3)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f245 1240 	movw	r2, #20800	; 0x5140
 80019da:	4293      	cmp	r3, r2
 80019dc:	dc02      	bgt.n	80019e4 <LoRa_setSignalBandwidth+0x48>
    {
        bw = 3;
 80019de:	2303      	movs	r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e027      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 31.25E3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f647 2212 	movw	r2, #31250	; 0x7a12
 80019ea:	4293      	cmp	r3, r2
 80019ec:	dc02      	bgt.n	80019f4 <LoRa_setSignalBandwidth+0x58>
    {
        bw = 4;
 80019ee:	2304      	movs	r3, #4
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	e01f      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 41.7E3)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f24a 22e4 	movw	r2, #41700	; 0xa2e4
 80019fa:	4293      	cmp	r3, r2
 80019fc:	dc02      	bgt.n	8001a04 <LoRa_setSignalBandwidth+0x68>
    {
        bw = 5;
 80019fe:	2305      	movs	r3, #5
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	e017      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 62.5E3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f24f 4224 	movw	r2, #62500	; 0xf424
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	dc02      	bgt.n	8001a14 <LoRa_setSignalBandwidth+0x78>
    {
        bw = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e00f      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 125E3)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a13      	ldr	r2, [pc, #76]	; (8001a64 <LoRa_setSignalBandwidth+0xc8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	dc02      	bgt.n	8001a22 <LoRa_setSignalBandwidth+0x86>
    {
        bw = 7;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e008      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else if(sbw <= 250E3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <LoRa_setSignalBandwidth+0xcc>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	dc02      	bgt.n	8001a30 <LoRa_setSignalBandwidth+0x94>
    {
        bw = 8;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	e001      	b.n	8001a34 <LoRa_setSignalBandwidth+0x98>
    }
    else /*if(sbw <= 250E3)*/
    {
        bw = 9;
 8001a30:	2309      	movs	r3, #9
 8001a32:	60fb      	str	r3, [r7, #12]
    }

    LoRa_writeRegister(REG_MODEM_CONFIG_1, (LoRa_readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
 8001a34:	201d      	movs	r0, #29
 8001a36:	f000 f963 	bl	8001d00 <LoRa_readRegister>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	b25a      	sxtb	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b25b      	sxtb	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4619      	mov	r1, r3
 8001a52:	201d      	movs	r0, #29
 8001a54:	f000 f966 	bl	8001d24 <LoRa_writeRegister>
    LoRa_setLdoFlag();
 8001a58:	f000 f808 	bl	8001a6c <LoRa_setLdoFlag>
}
 8001a5c:	bf00      	nop
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0001e848 	.word	0x0001e848
 8001a68:	0003d090 	.word	0x0003d090

08001a6c <LoRa_setLdoFlag>:

void LoRa_setLdoFlag(void)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
    uint8_t ldoOn;

    // Section 4.1.1.5
    long symbolDuration = 1000 / (LoRa_getSignalBandwidth() / (1L << LoRa_getSpreadingFactor())) ;
 8001a72:	f7ff ff47 	bl	8001904 <LoRa_getSignalBandwidth>
 8001a76:	4604      	mov	r4, r0
 8001a78:	f7ff fefe 	bl	8001878 <LoRa_getSpreadingFactor>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2201      	movs	r2, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	fb94 f3f3 	sdiv	r3, r4, r3
 8001a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a90:	60bb      	str	r3, [r7, #8]

    // Section 4.1.1.6
    if(symbolDuration > 16)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b10      	cmp	r3, #16
 8001a96:	dd02      	ble.n	8001a9e <LoRa_setLdoFlag+0x32>
        ldoOn = 0x08;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e001      	b.n	8001aa2 <LoRa_setLdoFlag+0x36>
    else
        ldoOn = 0x00;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]

    uint8_t config3 = (LoRa_readRegister(REG_MODEM_CONFIG_3) | ldoOn);
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f000 f92c 	bl	8001d00 <LoRa_readRegister>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	71fb      	strb	r3, [r7, #7]
    LoRa_writeRegister(REG_MODEM_CONFIG_3, config3);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	2026      	movs	r0, #38	; 0x26
 8001ab8:	f000 f934 	bl	8001d24 <LoRa_writeRegister>
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <LoRa_setCodingRate4>:

void LoRa_setCodingRate4(int denominator)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    if(denominator < 5)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	dc02      	bgt.n	8001ad8 <LoRa_setCodingRate4+0x14>
    {
        denominator = 5;
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	e004      	b.n	8001ae2 <LoRa_setCodingRate4+0x1e>
    }
    else if(denominator > 8)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	dd01      	ble.n	8001ae2 <LoRa_setCodingRate4+0x1e>
    {
        denominator = 8;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	607b      	str	r3, [r7, #4]
    }

    int cr = denominator - 4;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3b04      	subs	r3, #4
 8001ae6:	60fb      	str	r3, [r7, #12]

    LoRa_writeRegister(REG_MODEM_CONFIG_1, (LoRa_readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
 8001ae8:	201d      	movs	r0, #29
 8001aea:	f000 f909 	bl	8001d00 <LoRa_readRegister>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	f023 030e 	bic.w	r3, r3, #14
 8001af6:	b25a      	sxtb	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b25b      	sxtb	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	4619      	mov	r1, r3
 8001b06:	201d      	movs	r0, #29
 8001b08:	f000 f90c 	bl	8001d24 <LoRa_writeRegister>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <LoRa_setPreambleLength>:

void LoRa_setPreambleLength(long length)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
    LoRa_writeRegister(REG_PREAMBLE_MSB, (uint8_t)(length >> 8));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	121b      	asrs	r3, r3, #8
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	4619      	mov	r1, r3
 8001b24:	2020      	movs	r0, #32
 8001b26:	f000 f8fd 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_PREAMBLE_LSB, (uint8_t)(length >> 0));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	4619      	mov	r1, r3
 8001b30:	2021      	movs	r0, #33	; 0x21
 8001b32:	f000 f8f7 	bl	8001d24 <LoRa_writeRegister>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <LoRa_enableCrc>:
{
    LoRa_writeRegister(REG_SYNC_WORD, sw);
}

void LoRa_enableCrc(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
    LoRa_writeRegister(REG_MODEM_CONFIG_2, LoRa_readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8001b42:	201e      	movs	r0, #30
 8001b44:	f000 f8dc 	bl	8001d00 <LoRa_readRegister>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	201e      	movs	r0, #30
 8001b54:	f000 f8e6 	bl	8001d24 <LoRa_writeRegister>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <LoRa_enableInvertIQ>:
{
    LoRa_writeRegister(REG_MODEM_CONFIG_2, LoRa_readRegister(REG_MODEM_CONFIG_2) & 0xfb);
}

void LoRa_enableInvertIQ(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
    LoRa_writeRegister(REG_INVERTIQ, 0x66);
 8001b60:	2166      	movs	r1, #102	; 0x66
 8001b62:	2033      	movs	r0, #51	; 0x33
 8001b64:	f000 f8de 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_INVERTIQ2, 0x19);
 8001b68:	2119      	movs	r1, #25
 8001b6a:	203b      	movs	r0, #59	; 0x3b
 8001b6c:	f000 f8da 	bl	8001d24 <LoRa_writeRegister>
}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <LoRa_disableInvertIQ>:

void LoRa_disableInvertIQ(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
    LoRa_writeRegister(REG_INVERTIQ, 0x27);
 8001b78:	2127      	movs	r1, #39	; 0x27
 8001b7a:	2033      	movs	r0, #51	; 0x33
 8001b7c:	f000 f8d2 	bl	8001d24 <LoRa_writeRegister>
    LoRa_writeRegister(REG_INVERTIQ2, 0x1d);
 8001b80:	211d      	movs	r1, #29
 8001b82:	203b      	movs	r0, #59	; 0x3b
 8001b84:	f000 f8ce 	bl	8001d24 <LoRa_writeRegister>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <LoRa_setOCP>:

void LoRa_setOCP(uint8_t mA)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    uint8_t ocpTrim = 27;
 8001b96:	231b      	movs	r3, #27
 8001b98:	73fb      	strb	r3, [r7, #15]

    if(mA <= 120)
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b78      	cmp	r3, #120	; 0x78
 8001b9e:	d809      	bhi.n	8001bb4 <LoRa_setOCP+0x28>
    {
        ocpTrim = (mA - 45) / 5;
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	3b2d      	subs	r3, #45	; 0x2d
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <LoRa_setOCP+0x60>)
 8001ba6:	fb82 1203 	smull	r1, r2, r2, r3
 8001baa:	1052      	asrs	r2, r2, #1
 8001bac:	17db      	asrs	r3, r3, #31
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e00b      	b.n	8001bcc <LoRa_setOCP+0x40>
    }
    else if(mA <= 240)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2bf0      	cmp	r3, #240	; 0xf0
 8001bb8:	d808      	bhi.n	8001bcc <LoRa_setOCP+0x40>
    {
        ocpTrim = (mA + 30) / 10;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	331e      	adds	r3, #30
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoRa_setOCP+0x60>)
 8001bc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001bc4:	1092      	asrs	r2, r2, #2
 8001bc6:	17db      	asrs	r3, r3, #31
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	73fb      	strb	r3, [r7, #15]
    }

    LoRa_writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0320 	orr.w	r3, r3, #32
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	200b      	movs	r0, #11
 8001bde:	f000 f8a1 	bl	8001d24 <LoRa_writeRegister>
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	66666667 	.word	0x66666667

08001bf0 <LoRa_setPins>:
{
    return LoRa_readRegister(REG_RSSI_WIDEBAND);
}

void LoRa_setPins(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    // configure CS pin for LoRa inAir4
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2110      	movs	r1, #16
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <LoRa_setPins+0x1c>)
 8001bfa:	f003 fdb6 	bl	800576a <HAL_GPIO_WritePin>

    // configure Reset pin LoRa inAir4
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	2102      	movs	r1, #2
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <LoRa_setPins+0x20>)
 8001c04:	f003 fdb1 	bl	800576a <HAL_GPIO_WritePin>

//	__enable_irq();
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00

08001c14 <LoRa_explicitHeaderMode>:

void LoRa_explicitHeaderMode(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
    _implicitHeaderMode = 0;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <LoRa_explicitHeaderMode+0x24>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
    LoRa_writeRegister(REG_MODEM_CONFIG_1, LoRa_readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8001c1e:	201d      	movs	r0, #29
 8001c20:	f000 f86e 	bl	8001d00 <LoRa_readRegister>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	201d      	movs	r0, #29
 8001c30:	f000 f878 	bl	8001d24 <LoRa_writeRegister>
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000344 	.word	0x20000344

08001c3c <LoRa_implicitHeaderMode>:

void LoRa_implicitHeaderMode(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
    _implicitHeaderMode = 1;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <LoRa_implicitHeaderMode+0x24>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    LoRa_writeRegister(REG_MODEM_CONFIG_1, LoRa_readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8001c46:	201d      	movs	r0, #29
 8001c48:	f000 f85a 	bl	8001d00 <LoRa_readRegister>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4619      	mov	r1, r3
 8001c56:	201d      	movs	r0, #29
 8001c58:	f000 f864 	bl	8001d24 <LoRa_writeRegister>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000344 	.word	0x20000344

08001c64 <LoRa_handleDio0Rise>:

void LoRa_handleDio0Rise(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
    int irqFlags = LoRa_readRegister(REG_IRQ_FLAGS);
 8001c6a:	2012      	movs	r0, #18
 8001c6c:	f000 f848 	bl	8001d00 <LoRa_readRegister>
 8001c70:	4603      	mov	r3, r0
 8001c72:	607b      	str	r3, [r7, #4]

    // clear IRQ's
    LoRa_writeRegister(REG_IRQ_FLAGS, irqFlags);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	4619      	mov	r1, r3
 8001c7a:	2012      	movs	r0, #18
 8001c7c:	f000 f852 	bl	8001d24 <LoRa_writeRegister>

    if((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d12c      	bne.n	8001ce4 <LoRa_handleDio0Rise+0x80>
    {
        if((irqFlags & IRQ_RX_DONE_MASK) != 0)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d01f      	beq.n	8001cd4 <LoRa_handleDio0Rise+0x70>
        {
            // received a packet
            _packetIndex = 0;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <LoRa_handleDio0Rise+0x88>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

            // read packet length
            int packetLength = _implicitHeaderMode ? LoRa_readRegister(REG_PAYLOAD_LENGTH) : LoRa_readRegister(REG_RX_NB_BYTES);
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <LoRa_handleDio0Rise+0x8c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <LoRa_handleDio0Rise+0x48>
 8001ca2:	2022      	movs	r0, #34	; 0x22
 8001ca4:	f000 f82c 	bl	8001d00 <LoRa_readRegister>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	e003      	b.n	8001cb4 <LoRa_handleDio0Rise+0x50>
 8001cac:	2013      	movs	r0, #19
 8001cae:	f000 f827 	bl	8001d00 <LoRa_readRegister>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	603b      	str	r3, [r7, #0]
            _packetSize = packetLength;
 8001cb6:	4a0f      	ldr	r2, [pc, #60]	; (8001cf4 <LoRa_handleDio0Rise+0x90>)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	6013      	str	r3, [r2, #0]

            // set FIFO address to current RX address
            LoRa_writeRegister(REG_FIFO_ADDR_PTR, LoRa_readRegister(REG_FIFO_RX_CURRENT_ADDR));
 8001cbc:	2010      	movs	r0, #16
 8001cbe:	f000 f81f 	bl	8001d00 <LoRa_readRegister>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	200d      	movs	r0, #13
 8001cc8:	f000 f82c 	bl	8001d24 <LoRa_writeRegister>
            _dio0_rx_isr = 1;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <LoRa_handleDio0Rise+0x94>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
        else if((irqFlags & IRQ_TX_DONE_MASK) != 0)
        {
        	 _dio0_tx_isr = 1;
        }
    }
}
 8001cd2:	e007      	b.n	8001ce4 <LoRa_handleDio0Rise+0x80>
        else if((irqFlags & IRQ_TX_DONE_MASK) != 0)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <LoRa_handleDio0Rise+0x80>
        	 _dio0_tx_isr = 1;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <LoRa_handleDio0Rise+0x98>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003ec 	.word	0x200003ec
 8001cf0:	20000344 	.word	0x20000344
 8001cf4:	2000033c 	.word	0x2000033c
 8001cf8:	20000340 	.word	0x20000340
 8001cfc:	200003e4 	.word	0x200003e4

08001d00 <LoRa_readRegister>:

uint8_t LoRa_readRegister(uint8_t address)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
    return LoRa_singleTransfer(address & 0x7F, 0x00);
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 f81b 	bl	8001d50 <LoRa_singleTransfer>
 8001d1a:	4603      	mov	r3, r0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <LoRa_writeRegister>:

void LoRa_writeRegister(uint8_t address, uint8_t data)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	460a      	mov	r2, r1
 8001d2e:	71fb      	strb	r3, [r7, #7]
 8001d30:	4613      	mov	r3, r2
 8001d32:	71bb      	strb	r3, [r7, #6]
    LoRa_singleTransfer(address | 0x80, data);
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	79ba      	ldrb	r2, [r7, #6]
 8001d3e:	4611      	mov	r1, r2
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f805 	bl	8001d50 <LoRa_singleTransfer>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <LoRa_singleTransfer>:
	HAL_SPI_Receive(&hspi1, &data, 1, 1000);
	return data;
}

uint8_t LoRa_singleTransfer(uint8_t address, uint8_t data)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	4603      	mov	r3, r0
 8001d58:	460a      	mov	r2, r1
 8001d5a:	71fb      	strb	r3, [r7, #7]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	71bb      	strb	r3, [r7, #6]
	uint8_t rxByte = 0x00;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

    LoRa_Chip_Select(0);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f829 	bl	8001dbc <LoRa_Chip_Select>

	HAL_SPI_Transmit(&hspi1, &address, 1, 10000);
 8001d6a:	1df9      	adds	r1, r7, #7
 8001d6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d70:	2201      	movs	r2, #1
 8001d72:	4811      	ldr	r0, [pc, #68]	; (8001db8 <LoRa_singleTransfer+0x68>)
 8001d74:	f005 fa86 	bl	8007284 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001d78:	bf00      	nop
 8001d7a:	480f      	ldr	r0, [pc, #60]	; (8001db8 <LoRa_singleTransfer+0x68>)
 8001d7c:	f005 fe4f 	bl	8007a1e <HAL_SPI_GetState>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d1f9      	bne.n	8001d7a <LoRa_singleTransfer+0x2a>

	HAL_SPI_TransmitReceive(&hspi1, &data, &rxByte, 1, 10000);
 8001d86:	f107 020f 	add.w	r2, r7, #15
 8001d8a:	1db9      	adds	r1, r7, #6
 8001d8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2301      	movs	r3, #1
 8001d94:	4808      	ldr	r0, [pc, #32]	; (8001db8 <LoRa_singleTransfer+0x68>)
 8001d96:	f005 fbb1 	bl	80074fc <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001d9a:	bf00      	nop
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <LoRa_singleTransfer+0x68>)
 8001d9e:	f005 fe3e 	bl	8007a1e <HAL_SPI_GetState>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d1f9      	bne.n	8001d9c <LoRa_singleTransfer+0x4c>

    LoRa_Chip_Select(1);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f000 f807 	bl	8001dbc <LoRa_Chip_Select>

    return rxByte;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	2000038c 	.word	0x2000038c

08001dbc <LoRa_Chip_Select>:

void LoRa_Chip_Select(uint8_t mode)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
    if(mode == 0)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <LoRa_Chip_Select+0x1c>
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2110      	movs	r1, #16
 8001dd0:	4807      	ldr	r0, [pc, #28]	; (8001df0 <LoRa_Chip_Select+0x34>)
 8001dd2:	f003 fcca 	bl	800576a <HAL_GPIO_WritePin>
    }
    else if(mode == 1)
    {
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
    }
}
 8001dd6:	e007      	b.n	8001de8 <LoRa_Chip_Select+0x2c>
    else if(mode == 1)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d104      	bne.n	8001de8 <LoRa_Chip_Select+0x2c>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	2110      	movs	r1, #16
 8001de2:	4803      	ldr	r0, [pc, #12]	; (8001df0 <LoRa_Chip_Select+0x34>)
 8001de4:	f003 fcc1 	bl	800576a <HAL_GPIO_WritePin>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40010800 	.word	0x40010800

08001df4 <LoRa_Chip_Reset>:

void LoRa_Chip_Reset(uint8_t mode)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
    if(mode == 0)
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <LoRa_Chip_Reset+0x1c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e04:	2200      	movs	r2, #0
 8001e06:	2102      	movs	r1, #2
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <LoRa_Chip_Reset+0x34>)
 8001e0a:	f003 fcae 	bl	800576a <HAL_GPIO_WritePin>
    }
    else if(mode == 1)
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
    }
}
 8001e0e:	e007      	b.n	8001e20 <LoRa_Chip_Reset+0x2c>
    else if(mode == 1)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d104      	bne.n	8001e20 <LoRa_Chip_Reset+0x2c>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001e16:	2201      	movs	r2, #1
 8001e18:	2102      	movs	r1, #2
 8001e1a:	4803      	ldr	r0, [pc, #12]	; (8001e28 <LoRa_Chip_Reset+0x34>)
 8001e1c:	f003 fca5 	bl	800576a <HAL_GPIO_WritePin>
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40010c00 	.word	0x40010c00

08001e2c <write>:
/* USER CODE BEGIN 0 */
/////////////////////////  PIN  //////////////////////////////////
#define MAX17043_ADDRESS 0x36<<1
uint8_t data_max[20];
void write (uint8_t reg,uint8_t value)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	4603      	mov	r3, r0
 8001e34:	460a      	mov	r2, r1
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71bb      	strb	r3, [r7, #6]
uint8_t data[2];
		data[0] = reg;
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	733b      	strb	r3, [r7, #12]
	  	data[1] = value;
 8001e40:	79bb      	ldrb	r3, [r7, #6]
 8001e42:	737b      	strb	r3, [r7, #13]
	  	HAL_I2C_Master_Transmit (&hi2c1, MAX17043_ADDRESS, data, 2, 10);
 8001e44:	f107 020c 	add.w	r2, r7, #12
 8001e48:	230a      	movs	r3, #10
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	216c      	movs	r1, #108	; 0x6c
 8001e50:	4803      	ldr	r0, [pc, #12]	; (8001e60 <write+0x34>)
 8001e52:	f003 fdff 	bl	8005a54 <HAL_I2C_Master_Transmit>
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000408 	.word	0x20000408

08001e64 <read>:
void read (uint8_t reg )
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, MAX17043_ADDRESS, reg, 1, (uint8_t *)data_max,3, 100);
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	2303      	movs	r3, #3
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <read+0x2c>)
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	216c      	movs	r1, #108	; 0x6c
 8001e82:	4804      	ldr	r0, [pc, #16]	; (8001e94 <read+0x30>)
 8001e84:	f003 fee4 	bl	8005c50 <HAL_I2C_Mem_Read>

}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200004bc 	.word	0x200004bc
 8001e94:	20000408 	.word	0x20000408

08001e98 <max17043_init>:
void max17043_init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
write(0xFE,0x00);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	20fe      	movs	r0, #254	; 0xfe
 8001ea0:	f7ff ffc4 	bl	8001e2c <write>
write(0xFE,0x54);
 8001ea4:	2154      	movs	r1, #84	; 0x54
 8001ea6:	20fe      	movs	r0, #254	; 0xfe
 8001ea8:	f7ff ffc0 	bl	8001e2c <write>
HAL_Delay(100);
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f002 fce5 	bl	800487c <HAL_Delay>
write(0x06, 0x00);
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2006      	movs	r0, #6
 8001eb6:	f7ff ffb9 	bl	8001e2c <write>
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <pin>:
void pin()
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	max17043_init();
 8001ec4:	f7ff ffe8 	bl	8001e98 <max17043_init>
	HAL_Delay(100);
 8001ec8:	2064      	movs	r0, #100	; 0x64
 8001eca:	f002 fcd7 	bl	800487c <HAL_Delay>
	read(0x04);
 8001ece:	2004      	movs	r0, #4
 8001ed0:	f7ff ffc8 	bl	8001e64 <read>
	pnguyen = data_max[0];
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <pin+0x74>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <pin+0x78>)
 8001edc:	601a      	str	r2, [r3, #0]
    pthapphan = data_max[1];
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <pin+0x74>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <pin+0x7c>)
 8001ee6:	601a      	str	r2, [r3, #0]
	giatri = pnguyen + (pthapphan/256);
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <pin+0x7c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	da00      	bge.n	8001ef2 <pin+0x32>
 8001ef0:	33ff      	adds	r3, #255	; 0xff
 8001ef2:	121b      	asrs	r3, r3, #8
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <pin+0x78>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <pin+0x80>)
 8001efe:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 8001f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f04:	f002 fcba 	bl	800487c <HAL_Delay>
   	sprintf(Phantrampin,"\n phan tram pin = %d%%  \r\n", giatri);
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <pin+0x80>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <pin+0x84>)
 8001f10:	480d      	ldr	r0, [pc, #52]	; (8001f48 <pin+0x88>)
 8001f12:	f007 f8db 	bl	80090cc <siprintf>
   	HAL_UART_Transmit(&huart1, (uint8_t*)Phantrampin, strlen(Phantrampin), 100);
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <pin+0x88>)
 8001f18:	f7fe f924 	bl	8000164 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2364      	movs	r3, #100	; 0x64
 8001f22:	4909      	ldr	r1, [pc, #36]	; (8001f48 <pin+0x88>)
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <pin+0x8c>)
 8001f26:	f006 fab6 	bl	8008496 <HAL_UART_Transmit>
	  HAL_Delay(100);
 8001f2a:	2064      	movs	r0, #100	; 0x64
 8001f2c:	f002 fca6 	bl	800487c <HAL_Delay>
	  }
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200004bc 	.word	0x200004bc
 8001f38:	200007d8 	.word	0x200007d8
 8001f3c:	200003fc 	.word	0x200003fc
 8001f40:	200005d4 	.word	0x200005d4
 8001f44:	0800bd78 	.word	0x0800bd78
 8001f48:	200006b8 	.word	0x200006b8
 8001f4c:	20000348 	.word	0x20000348

08001f50 <adxl_write1>:
int16_t xl,yl,zl;
float xgl,ygl,zgl,
	  XL,YL,ZL,xxL,yyL,zzL;

void adxl_write1 (uint8_t reg,uint8_t value)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af02      	add	r7, sp, #8
 8001f56:	4603      	mov	r3, r0
 8001f58:	460a      	mov	r2, r1
 8001f5a:	71fb      	strb	r3, [r7, #7]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t data1[2];
	data1[0] = reg;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	733b      	strb	r3, [r7, #12]
	data1[1] = value;
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c2, adxl_address, data1, 2, 10);
 8001f68:	f107 020c 	add.w	r2, r7, #12
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2302      	movs	r3, #2
 8001f72:	21a6      	movs	r1, #166	; 0xa6
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <adxl_write1+0x34>)
 8001f76:	f003 fd6d 	bl	8005a54 <HAL_I2C_Master_Transmit>
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	2000045c 	.word	0x2000045c

08001f88 <adxl_read1>:
void adxl_read1 (uint8_t reg, uint8_t numberofbytes)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b088      	sub	sp, #32
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	4603      	mov	r3, r0
 8001f90:	460a      	mov	r2, r1
 8001f92:	71fb      	strb	r3, [r7, #7]
 8001f94:	4613      	mov	r3, r2
 8001f96:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i < sizeof(data_rec1); i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	e007      	b.n	8001fae <adxl_read1+0x26>
		{
			data_rec1[i] = 0;
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <adxl_read1+0x50>)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(data_rec1); i++)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b05      	cmp	r3, #5
 8001fb2:	d9f4      	bls.n	8001f9e <adxl_read1+0x16>
		}
	HAL_I2C_Mem_Read(&hi2c2, adxl_address, reg, 1, (uint8_t *)data_rec1,numberofbytes, 100);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	79bb      	ldrb	r3, [r7, #6]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	2164      	movs	r1, #100	; 0x64
 8001fbe:	9102      	str	r1, [sp, #8]
 8001fc0:	9301      	str	r3, [sp, #4]
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <adxl_read1+0x50>)
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	21a6      	movs	r1, #166	; 0xa6
 8001fca:	4804      	ldr	r0, [pc, #16]	; (8001fdc <adxl_read1+0x54>)
 8001fcc:	f003 fe40 	bl	8005c50 <HAL_I2C_Mem_Read>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000400 	.word	0x20000400
 8001fdc:	2000045c 	.word	0x2000045c

08001fe0 <adxl_init1>:
void adxl_init1(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
	adxl_read1(0x00,1);
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff ffce 	bl	8001f88 <adxl_read1>
	adxl_write1(0x2d,0);
 8001fec:	2100      	movs	r1, #0
 8001fee:	202d      	movs	r0, #45	; 0x2d
 8001ff0:	f7ff ffae 	bl	8001f50 <adxl_write1>
	adxl_write1(0x2d,0x08);
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	202d      	movs	r0, #45	; 0x2d
 8001ff8:	f7ff ffaa 	bl	8001f50 <adxl_write1>
	adxl_write1(0x31,0x01);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	2031      	movs	r0, #49	; 0x31
 8002000:	f7ff ffa6 	bl	8001f50 <adxl_write1>

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <kq_adxl1>:

void kq_adxl1()
{
 8002008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800200a:	af00      	add	r7, sp, #0
	adxl_read1(0x32,6);
 800200c:	2106      	movs	r1, #6
 800200e:	2032      	movs	r0, #50	; 0x32
 8002010:	f7ff ffba 	bl	8001f88 <adxl_read1>
	xl=data_rec1[1]<<8| data_rec1[0];
 8002014:	4bb4      	ldr	r3, [pc, #720]	; (80022e8 <kq_adxl1+0x2e0>)
 8002016:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b21a      	sxth	r2, r3
 800201e:	4bb2      	ldr	r3, [pc, #712]	; (80022e8 <kq_adxl1+0x2e0>)
 8002020:	f993 3000 	ldrsb.w	r3, [r3]
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21a      	sxth	r2, r3
 800202a:	4bb0      	ldr	r3, [pc, #704]	; (80022ec <kq_adxl1+0x2e4>)
 800202c:	801a      	strh	r2, [r3, #0]
	yl=data_rec1[3]<<8| data_rec1[2];
 800202e:	4bae      	ldr	r3, [pc, #696]	; (80022e8 <kq_adxl1+0x2e0>)
 8002030:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	b21a      	sxth	r2, r3
 8002038:	4bab      	ldr	r3, [pc, #684]	; (80022e8 <kq_adxl1+0x2e0>)
 800203a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800203e:	b21b      	sxth	r3, r3
 8002040:	4313      	orrs	r3, r2
 8002042:	b21a      	sxth	r2, r3
 8002044:	4baa      	ldr	r3, [pc, #680]	; (80022f0 <kq_adxl1+0x2e8>)
 8002046:	801a      	strh	r2, [r3, #0]
	zl=data_rec1[5]<<8| data_rec1[4];
 8002048:	4ba7      	ldr	r3, [pc, #668]	; (80022e8 <kq_adxl1+0x2e0>)
 800204a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	b21a      	sxth	r2, r3
 8002052:	4ba5      	ldr	r3, [pc, #660]	; (80022e8 <kq_adxl1+0x2e0>)
 8002054:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002058:	b21b      	sxth	r3, r3
 800205a:	4313      	orrs	r3, r2
 800205c:	b21a      	sxth	r2, r3
 800205e:	4ba5      	ldr	r3, [pc, #660]	; (80022f4 <kq_adxl1+0x2ec>)
 8002060:	801a      	strh	r2, [r3, #0]
	xgl = xl* .0078;
 8002062:	4ba2      	ldr	r3, [pc, #648]	; (80022ec <kq_adxl1+0x2e4>)
 8002064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f9d5 	bl	8000418 <__aeabi_i2d>
 800206e:	a39a      	add	r3, pc, #616	; (adr r3, 80022d8 <kq_adxl1+0x2d0>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fa3a 	bl	80004ec <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd0c 	bl	8000a9c <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4a9c      	ldr	r2, [pc, #624]	; (80022f8 <kq_adxl1+0x2f0>)
 8002088:	6013      	str	r3, [r2, #0]
	ygl = yl* .0078;
 800208a:	4b99      	ldr	r3, [pc, #612]	; (80022f0 <kq_adxl1+0x2e8>)
 800208c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe f9c1 	bl	8000418 <__aeabi_i2d>
 8002096:	a390      	add	r3, pc, #576	; (adr r3, 80022d8 <kq_adxl1+0x2d0>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe fa26 	bl	80004ec <__aeabi_dmul>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fcf8 	bl	8000a9c <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
 80020ae:	4a93      	ldr	r2, [pc, #588]	; (80022fc <kq_adxl1+0x2f4>)
 80020b0:	6013      	str	r3, [r2, #0]
	zgl = zl* .0078;
 80020b2:	4b90      	ldr	r3, [pc, #576]	; (80022f4 <kq_adxl1+0x2ec>)
 80020b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe f9ad 	bl	8000418 <__aeabi_i2d>
 80020be:	a386      	add	r3, pc, #536	; (adr r3, 80022d8 <kq_adxl1+0x2d0>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fa12 	bl	80004ec <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7fe fce4 	bl	8000a9c <__aeabi_d2f>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a8a      	ldr	r2, [pc, #552]	; (8002300 <kq_adxl1+0x2f8>)
 80020d8:	6013      	str	r3, [r2, #0]
//	fXg = Xg * alpha + (fXg * (1.0 - alpha));
	if(xgl!=0 || ygl!=0 || zgl!=0)
 80020da:	4b87      	ldr	r3, [pc, #540]	; (80022f8 <kq_adxl1+0x2f0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe ffcc 	bl	8001080 <__aeabi_fcmpeq>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d014      	beq.n	8002118 <kq_adxl1+0x110>
 80020ee:	4b83      	ldr	r3, [pc, #524]	; (80022fc <kq_adxl1+0x2f4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe ffc2 	bl	8001080 <__aeabi_fcmpeq>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00a      	beq.n	8002118 <kq_adxl1+0x110>
 8002102:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <kq_adxl1+0x2f8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe ffb8 	bl	8001080 <__aeabi_fcmpeq>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80d0 	bne.w	80022b8 <kq_adxl1+0x2b0>
//		fxg=xg* 0.5 +(fxg*0.5);
//		fyg=yg* 0.5 +(fyg*0.5);
//		fzg=zg* 0.5 +(fzg*0.5);

		//roll  = (atan2(-fyg, fzg)*180.0)/3.14;
		XL = (atan2(xgl, sqrt(ygl*ygl + zgl*zgl))*180.0)/3.14;
 8002118:	4b77      	ldr	r3, [pc, #476]	; (80022f8 <kq_adxl1+0x2f0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f98d 	bl	800043c <__aeabi_f2d>
 8002122:	4604      	mov	r4, r0
 8002124:	460d      	mov	r5, r1
 8002126:	4b75      	ldr	r3, [pc, #468]	; (80022fc <kq_adxl1+0x2f4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a74      	ldr	r2, [pc, #464]	; (80022fc <kq_adxl1+0x2f4>)
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fe11 	bl	8000d58 <__aeabi_fmul>
 8002136:	4603      	mov	r3, r0
 8002138:	461e      	mov	r6, r3
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <kq_adxl1+0x2f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <kq_adxl1+0x2f8>)
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fe07 	bl	8000d58 <__aeabi_fmul>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	4630      	mov	r0, r6
 8002150:	f7fe fcfa 	bl	8000b48 <__addsf3>
 8002154:	4603      	mov	r3, r0
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f970 	bl	800043c <__aeabi_f2d>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	f009 fac0 	bl	800b6e8 <sqrt>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4620      	mov	r0, r4
 800216e:	4629      	mov	r1, r5
 8002170:	f009 fab8 	bl	800b6e4 <atan2>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <kq_adxl1+0x2fc>)
 800217a:	f7fe f9b7 	bl	80004ec <__aeabi_dmul>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	a356      	add	r3, pc, #344	; (adr r3, 80022e0 <kq_adxl1+0x2d8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe fad8 	bl	8000740 <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f7fe fc80 	bl	8000a9c <__aeabi_d2f>
 800219c:	4603      	mov	r3, r0
 800219e:	4a5a      	ldr	r2, [pc, #360]	; (8002308 <kq_adxl1+0x300>)
 80021a0:	6013      	str	r3, [r2, #0]
		YL = (atan2(ygl, sqrt(xgl*xgl + zgl*zgl))*180.0)/3.14;
 80021a2:	4b56      	ldr	r3, [pc, #344]	; (80022fc <kq_adxl1+0x2f4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f948 	bl	800043c <__aeabi_f2d>
 80021ac:	4604      	mov	r4, r0
 80021ae:	460d      	mov	r5, r1
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <kq_adxl1+0x2f0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a50      	ldr	r2, [pc, #320]	; (80022f8 <kq_adxl1+0x2f0>)
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fdcc 	bl	8000d58 <__aeabi_fmul>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461e      	mov	r6, r3
 80021c4:	4b4e      	ldr	r3, [pc, #312]	; (8002300 <kq_adxl1+0x2f8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4d      	ldr	r2, [pc, #308]	; (8002300 <kq_adxl1+0x2f8>)
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fdc2 	bl	8000d58 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4630      	mov	r0, r6
 80021da:	f7fe fcb5 	bl	8000b48 <__addsf3>
 80021de:	4603      	mov	r3, r0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f92b 	bl	800043c <__aeabi_f2d>
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	f009 fa7b 	bl	800b6e8 <sqrt>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f009 fa73 	bl	800b6e4 <atan2>
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <kq_adxl1+0x2fc>)
 8002204:	f7fe f972 	bl	80004ec <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	a333      	add	r3, pc, #204	; (adr r3, 80022e0 <kq_adxl1+0x2d8>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe fa93 	bl	8000740 <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fc3b 	bl	8000a9c <__aeabi_d2f>
 8002226:	4603      	mov	r3, r0
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <kq_adxl1+0x304>)
 800222a:	6013      	str	r3, [r2, #0]
		ZL = (atan2(zgl, sqrt(xgl*xgl + ygl*ygl))*180.0)/3.14;
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <kq_adxl1+0x2f8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f903 	bl	800043c <__aeabi_f2d>
 8002236:	4604      	mov	r4, r0
 8002238:	460d      	mov	r5, r1
 800223a:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <kq_adxl1+0x2f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a2e      	ldr	r2, [pc, #184]	; (80022f8 <kq_adxl1+0x2f0>)
 8002240:	6812      	ldr	r2, [r2, #0]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fd87 	bl	8000d58 <__aeabi_fmul>
 800224a:	4603      	mov	r3, r0
 800224c:	461e      	mov	r6, r3
 800224e:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <kq_adxl1+0x2f4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <kq_adxl1+0x2f4>)
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fd7d 	bl	8000d58 <__aeabi_fmul>
 800225e:	4603      	mov	r3, r0
 8002260:	4619      	mov	r1, r3
 8002262:	4630      	mov	r0, r6
 8002264:	f7fe fc70 	bl	8000b48 <__addsf3>
 8002268:	4603      	mov	r3, r0
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f8e6 	bl	800043c <__aeabi_f2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f009 fa36 	bl	800b6e8 <sqrt>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4620      	mov	r0, r4
 8002282:	4629      	mov	r1, r5
 8002284:	f009 fa2e 	bl	800b6e4 <atan2>
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <kq_adxl1+0x2fc>)
 800228e:	f7fe f92d 	bl	80004ec <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a311      	add	r3, pc, #68	; (adr r3, 80022e0 <kq_adxl1+0x2d8>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe fa4e 	bl	8000740 <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fbf6 	bl	8000a9c <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <kq_adxl1+0x308>)
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e00c      	b.n	80022d2 <kq_adxl1+0x2ca>
//
//		HAL_Delay(1000);
	}
	else
	{
		XL=0;
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <kq_adxl1+0x300>)
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
		YL=0;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <kq_adxl1+0x304>)
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
		ZL=0;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <kq_adxl1+0x308>)
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
//		sprintf(buffergn1,"\r\n XL=%.4f YL=%.4f  ZL=%.4f \r\n ",XL, YL,ZL );
//      HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn1, strlen(buffergn1), 1000);
//		HAL_Delay(500);

	}
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	8e8a71de 	.word	0x8e8a71de
 80022dc:	3f7ff2e4 	.word	0x3f7ff2e4
 80022e0:	51eb851f 	.word	0x51eb851f
 80022e4:	40091eb8 	.word	0x40091eb8
 80022e8:	20000400 	.word	0x20000400
 80022ec:	200007ec 	.word	0x200007ec
 80022f0:	200007ea 	.word	0x200007ea
 80022f4:	200004d4 	.word	0x200004d4
 80022f8:	2000071c 	.word	0x2000071c
 80022fc:	2000051c 	.word	0x2000051c
 8002300:	200007f8 	.word	0x200007f8
 8002304:	40668000 	.word	0x40668000
 8002308:	20000530 	.word	0x20000530
 800230c:	200007e0 	.word	0x200007e0
 8002310:	20000528 	.word	0x20000528
 8002314:	00000000 	.word	0x00000000

08002318 <kq_adxl_timer1>:
void kq_adxl_timer1()
{
 8002318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800231c:	b085      	sub	sp, #20
 800231e:	af04      	add	r7, sp, #16
	adxl_read1(0x32,6);
 8002320:	2106      	movs	r1, #6
 8002322:	2032      	movs	r0, #50	; 0x32
 8002324:	f7ff fe30 	bl	8001f88 <adxl_read1>
	xl=data_rec1[1]<<8| data_rec1[0];
 8002328:	4bb7      	ldr	r3, [pc, #732]	; (8002608 <kq_adxl_timer1+0x2f0>)
 800232a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	b21a      	sxth	r2, r3
 8002332:	4bb5      	ldr	r3, [pc, #724]	; (8002608 <kq_adxl_timer1+0x2f0>)
 8002334:	f993 3000 	ldrsb.w	r3, [r3]
 8002338:	b21b      	sxth	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b21a      	sxth	r2, r3
 800233e:	4bb3      	ldr	r3, [pc, #716]	; (800260c <kq_adxl_timer1+0x2f4>)
 8002340:	801a      	strh	r2, [r3, #0]
	yl=data_rec1[3]<<8| data_rec1[2];
 8002342:	4bb1      	ldr	r3, [pc, #708]	; (8002608 <kq_adxl_timer1+0x2f0>)
 8002344:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	b21a      	sxth	r2, r3
 800234c:	4bae      	ldr	r3, [pc, #696]	; (8002608 <kq_adxl_timer1+0x2f0>)
 800234e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21a      	sxth	r2, r3
 8002358:	4bad      	ldr	r3, [pc, #692]	; (8002610 <kq_adxl_timer1+0x2f8>)
 800235a:	801a      	strh	r2, [r3, #0]
	zl=data_rec1[5]<<8| data_rec1[4];
 800235c:	4baa      	ldr	r3, [pc, #680]	; (8002608 <kq_adxl_timer1+0x2f0>)
 800235e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	4ba8      	ldr	r3, [pc, #672]	; (8002608 <kq_adxl_timer1+0x2f0>)
 8002368:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800236c:	b21b      	sxth	r3, r3
 800236e:	4313      	orrs	r3, r2
 8002370:	b21a      	sxth	r2, r3
 8002372:	4ba8      	ldr	r3, [pc, #672]	; (8002614 <kq_adxl_timer1+0x2fc>)
 8002374:	801a      	strh	r2, [r3, #0]
	xgl = xl* .0078;
 8002376:	4ba5      	ldr	r3, [pc, #660]	; (800260c <kq_adxl_timer1+0x2f4>)
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f84b 	bl	8000418 <__aeabi_i2d>
 8002382:	a39d      	add	r3, pc, #628	; (adr r3, 80025f8 <kq_adxl_timer1+0x2e0>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f8b0 	bl	80004ec <__aeabi_dmul>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe fb82 	bl	8000a9c <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	4a9f      	ldr	r2, [pc, #636]	; (8002618 <kq_adxl_timer1+0x300>)
 800239c:	6013      	str	r3, [r2, #0]
	ygl = yl* .0078;
 800239e:	4b9c      	ldr	r3, [pc, #624]	; (8002610 <kq_adxl_timer1+0x2f8>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f837 	bl	8000418 <__aeabi_i2d>
 80023aa:	a393      	add	r3, pc, #588	; (adr r3, 80025f8 <kq_adxl_timer1+0x2e0>)
 80023ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b0:	f7fe f89c 	bl	80004ec <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fb6e 	bl	8000a9c <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a96      	ldr	r2, [pc, #600]	; (800261c <kq_adxl_timer1+0x304>)
 80023c4:	6013      	str	r3, [r2, #0]
	zgl = zl* .0078;
 80023c6:	4b93      	ldr	r3, [pc, #588]	; (8002614 <kq_adxl_timer1+0x2fc>)
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f823 	bl	8000418 <__aeabi_i2d>
 80023d2:	a389      	add	r3, pc, #548	; (adr r3, 80025f8 <kq_adxl_timer1+0x2e0>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fe f888 	bl	80004ec <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fb5a 	bl	8000a9c <__aeabi_d2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4a8d      	ldr	r2, [pc, #564]	; (8002620 <kq_adxl_timer1+0x308>)
 80023ec:	6013      	str	r3, [r2, #0]
//	fXg = Xg * alpha + (fXg * (1.0 - alpha));
	if(xgl!=0 || ygl!=0 || zgl!=0)
 80023ee:	4b8a      	ldr	r3, [pc, #552]	; (8002618 <kq_adxl_timer1+0x300>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f04f 0100 	mov.w	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fe42 	bl	8001080 <__aeabi_fcmpeq>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d014      	beq.n	800242c <kq_adxl_timer1+0x114>
 8002402:	4b86      	ldr	r3, [pc, #536]	; (800261c <kq_adxl_timer1+0x304>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 0100 	mov.w	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe38 	bl	8001080 <__aeabi_fcmpeq>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <kq_adxl_timer1+0x114>
 8002416:	4b82      	ldr	r3, [pc, #520]	; (8002620 <kq_adxl_timer1+0x308>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fe2e 	bl	8001080 <__aeabi_fcmpeq>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 8119 	bne.w	800265e <kq_adxl_timer1+0x346>
//		fxg=xg* 0.5 +(fxg*0.5);
//		fyg=yg* 0.5 +(fyg*0.5);
//		fzg=zg* 0.5 +(fzg*0.5);

		//roll  = (atan2(-fyg, fzg)*180.0)/3.14;
		XL = (atan2(xgl, sqrt(ygl*ygl + zgl*zgl))*180.0)/3.14;
 800242c:	4b7a      	ldr	r3, [pc, #488]	; (8002618 <kq_adxl_timer1+0x300>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f803 	bl	800043c <__aeabi_f2d>
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
 800243a:	4b78      	ldr	r3, [pc, #480]	; (800261c <kq_adxl_timer1+0x304>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a77      	ldr	r2, [pc, #476]	; (800261c <kq_adxl_timer1+0x304>)
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	4611      	mov	r1, r2
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fc87 	bl	8000d58 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	461e      	mov	r6, r3
 800244e:	4b74      	ldr	r3, [pc, #464]	; (8002620 <kq_adxl_timer1+0x308>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a73      	ldr	r2, [pc, #460]	; (8002620 <kq_adxl_timer1+0x308>)
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe fc7d 	bl	8000d58 <__aeabi_fmul>
 800245e:	4603      	mov	r3, r0
 8002460:	4619      	mov	r1, r3
 8002462:	4630      	mov	r0, r6
 8002464:	f7fe fb70 	bl	8000b48 <__addsf3>
 8002468:	4603      	mov	r3, r0
 800246a:	4618      	mov	r0, r3
 800246c:	f7fd ffe6 	bl	800043c <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f009 f936 	bl	800b6e8 <sqrt>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f009 f92e 	bl	800b6e4 <atan2>
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	4b65      	ldr	r3, [pc, #404]	; (8002624 <kq_adxl_timer1+0x30c>)
 800248e:	f7fe f82d 	bl	80004ec <__aeabi_dmul>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	a359      	add	r3, pc, #356	; (adr r3, 8002600 <kq_adxl_timer1+0x2e8>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f94e 	bl	8000740 <__aeabi_ddiv>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe faf6 	bl	8000a9c <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <kq_adxl_timer1+0x310>)
 80024b4:	6013      	str	r3, [r2, #0]
		YL = (atan2(ygl, sqrt(xgl*xgl + zgl*zgl))*180.0)/3.14;
 80024b6:	4b59      	ldr	r3, [pc, #356]	; (800261c <kq_adxl_timer1+0x304>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd ffbe 	bl	800043c <__aeabi_f2d>
 80024c0:	4604      	mov	r4, r0
 80024c2:	460d      	mov	r5, r1
 80024c4:	4b54      	ldr	r3, [pc, #336]	; (8002618 <kq_adxl_timer1+0x300>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a53      	ldr	r2, [pc, #332]	; (8002618 <kq_adxl_timer1+0x300>)
 80024ca:	6812      	ldr	r2, [r2, #0]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe fc42 	bl	8000d58 <__aeabi_fmul>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461e      	mov	r6, r3
 80024d8:	4b51      	ldr	r3, [pc, #324]	; (8002620 <kq_adxl_timer1+0x308>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a50      	ldr	r2, [pc, #320]	; (8002620 <kq_adxl_timer1+0x308>)
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fc38 	bl	8000d58 <__aeabi_fmul>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4619      	mov	r1, r3
 80024ec:	4630      	mov	r0, r6
 80024ee:	f7fe fb2b 	bl	8000b48 <__addsf3>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ffa1 	bl	800043c <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	f009 f8f1 	bl	800b6e8 <sqrt>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4620      	mov	r0, r4
 800250c:	4629      	mov	r1, r5
 800250e:	f009 f8e9 	bl	800b6e4 <atan2>
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	4b43      	ldr	r3, [pc, #268]	; (8002624 <kq_adxl_timer1+0x30c>)
 8002518:	f7fd ffe8 	bl	80004ec <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	a336      	add	r3, pc, #216	; (adr r3, 8002600 <kq_adxl_timer1+0x2e8>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f909 	bl	8000740 <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe fab1 	bl	8000a9c <__aeabi_d2f>
 800253a:	4603      	mov	r3, r0
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <kq_adxl_timer1+0x314>)
 800253e:	6013      	str	r3, [r2, #0]
		ZL = (atan2(zgl, sqrt(xgl*xgl + ygl*ygl))*180.0)/3.14;
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <kq_adxl_timer1+0x308>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ff79 	bl	800043c <__aeabi_f2d>
 800254a:	4604      	mov	r4, r0
 800254c:	460d      	mov	r5, r1
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <kq_adxl_timer1+0x300>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a31      	ldr	r2, [pc, #196]	; (8002618 <kq_adxl_timer1+0x300>)
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fbfd 	bl	8000d58 <__aeabi_fmul>
 800255e:	4603      	mov	r3, r0
 8002560:	461e      	mov	r6, r3
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <kq_adxl_timer1+0x304>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a2d      	ldr	r2, [pc, #180]	; (800261c <kq_adxl_timer1+0x304>)
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7fe fbf3 	bl	8000d58 <__aeabi_fmul>
 8002572:	4603      	mov	r3, r0
 8002574:	4619      	mov	r1, r3
 8002576:	4630      	mov	r0, r6
 8002578:	f7fe fae6 	bl	8000b48 <__addsf3>
 800257c:	4603      	mov	r3, r0
 800257e:	4618      	mov	r0, r3
 8002580:	f7fd ff5c 	bl	800043c <__aeabi_f2d>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f009 f8ac 	bl	800b6e8 <sqrt>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	f009 f8a4 	bl	800b6e4 <atan2>
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <kq_adxl_timer1+0x30c>)
 80025a2:	f7fd ffa3 	bl	80004ec <__aeabi_dmul>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	a314      	add	r3, pc, #80	; (adr r3, 8002600 <kq_adxl_timer1+0x2e8>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f7fe f8c4 	bl	8000740 <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fa6c 	bl	8000a9c <__aeabi_d2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a1a      	ldr	r2, [pc, #104]	; (8002630 <kq_adxl_timer1+0x318>)
 80025c8:	6013      	str	r3, [r2, #0]
		sprintf(buffergn1,"\r\n XL=%.4f YL=%.4f  ZL=%.4f \r\n ",XL, YL,ZL );
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <kq_adxl_timer1+0x310>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff34 	bl	800043c <__aeabi_f2d>
 80025d4:	4680      	mov	r8, r0
 80025d6:	4689      	mov	r9, r1
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <kq_adxl_timer1+0x314>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff2d 	bl	800043c <__aeabi_f2d>
 80025e2:	4604      	mov	r4, r0
 80025e4:	460d      	mov	r5, r1
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <kq_adxl_timer1+0x318>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff26 	bl	800043c <__aeabi_f2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	e01e      	b.n	8002634 <kq_adxl_timer1+0x31c>
 80025f6:	bf00      	nop
 80025f8:	8e8a71de 	.word	0x8e8a71de
 80025fc:	3f7ff2e4 	.word	0x3f7ff2e4
 8002600:	51eb851f 	.word	0x51eb851f
 8002604:	40091eb8 	.word	0x40091eb8
 8002608:	20000400 	.word	0x20000400
 800260c:	200007ec 	.word	0x200007ec
 8002610:	200007ea 	.word	0x200007ea
 8002614:	200004d4 	.word	0x200004d4
 8002618:	2000071c 	.word	0x2000071c
 800261c:	2000051c 	.word	0x2000051c
 8002620:	200007f8 	.word	0x200007f8
 8002624:	40668000 	.word	0x40668000
 8002628:	20000530 	.word	0x20000530
 800262c:	200007e0 	.word	0x200007e0
 8002630:	20000528 	.word	0x20000528
 8002634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002638:	e9cd 4500 	strd	r4, r5, [sp]
 800263c:	4642      	mov	r2, r8
 800263e:	464b      	mov	r3, r9
 8002640:	4910      	ldr	r1, [pc, #64]	; (8002684 <kq_adxl_timer1+0x36c>)
 8002642:	4811      	ldr	r0, [pc, #68]	; (8002688 <kq_adxl_timer1+0x370>)
 8002644:	f006 fd42 	bl	80090cc <siprintf>
		HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn1, strlen(buffergn1), 100);
 8002648:	480f      	ldr	r0, [pc, #60]	; (8002688 <kq_adxl_timer1+0x370>)
 800264a:	f7fd fd8b 	bl	8000164 <strlen>
 800264e:	4603      	mov	r3, r0
 8002650:	b29a      	uxth	r2, r3
 8002652:	2364      	movs	r3, #100	; 0x64
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <kq_adxl_timer1+0x370>)
 8002656:	480d      	ldr	r0, [pc, #52]	; (800268c <kq_adxl_timer1+0x374>)
 8002658:	f005 ff1d 	bl	8008496 <HAL_UART_Transmit>
 800265c:	e00c      	b.n	8002678 <kq_adxl_timer1+0x360>
//
//		HAL_Delay(1000);
	}
	else
	{
		XL=0;
 800265e:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <kq_adxl_timer1+0x378>)
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
		YL=0;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <kq_adxl_timer1+0x37c>)
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
		ZL=0;
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <kq_adxl_timer1+0x380>)
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
//		sprintf(buffergn1,"\r\n XL=%.4f YL=%.4f  ZL=%.4f \r\n ",XL, YL,ZL );
//      HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn1, strlen(buffergn1), 1000);
//		HAL_Delay(500);

	}
}
 8002676:	bf00      	nop
 8002678:	bf00      	nop
 800267a:	3704      	adds	r7, #4
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002682:	bf00      	nop
 8002684:	0800bd94 	.word	0x0800bd94
 8002688:	2000064c 	.word	0x2000064c
 800268c:	20000348 	.word	0x20000348
 8002690:	20000530 	.word	0x20000530
 8002694:	200007e0 	.word	0x200007e0
 8002698:	20000528 	.word	0x20000528

0800269c <adxl_write>:
int16_t x,y,z;
float xg,yg,zg,
	  X,Y,Z,xx,yy,zz;

void adxl_write (uint8_t reg,uint8_t value)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af02      	add	r7, sp, #8
 80026a2:	4603      	mov	r3, r0
 80026a4:	460a      	mov	r2, r1
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	4613      	mov	r3, r2
 80026aa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = reg;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
 80026ae:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit (&hi2c1, adxl_address, data, 2, 10);
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	230a      	movs	r3, #10
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2302      	movs	r3, #2
 80026be:	21a6      	movs	r1, #166	; 0xa6
 80026c0:	4803      	ldr	r0, [pc, #12]	; (80026d0 <adxl_write+0x34>)
 80026c2:	f003 f9c7 	bl	8005a54 <HAL_I2C_Master_Transmit>
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000408 	.word	0x20000408

080026d4 <adxl_read>:
void adxl_read (uint8_t reg, uint8_t numberofbytes)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b088      	sub	sp, #32
 80026d8:	af04      	add	r7, sp, #16
 80026da:	4603      	mov	r3, r0
 80026dc:	460a      	mov	r2, r1
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	for(int i = 0; i < sizeof(data_rec); i++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	e007      	b.n	80026fa <adxl_read+0x26>
		{
			data_rec[i] = 0;
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <adxl_read+0x50>)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < sizeof(data_rec); i++)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3301      	adds	r3, #1
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	d9f4      	bls.n	80026ea <adxl_read+0x16>
		}
	HAL_I2C_Mem_Read(&hi2c1, adxl_address, reg, 1, (uint8_t *)data_rec,numberofbytes, 100);
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	b29a      	uxth	r2, r3
 8002704:	79bb      	ldrb	r3, [r7, #6]
 8002706:	b29b      	uxth	r3, r3
 8002708:	2164      	movs	r1, #100	; 0x64
 800270a:	9102      	str	r1, [sp, #8]
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <adxl_read+0x50>)
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	21a6      	movs	r1, #166	; 0xa6
 8002716:	4804      	ldr	r0, [pc, #16]	; (8002728 <adxl_read+0x54>)
 8002718:	f003 fa9a 	bl	8005c50 <HAL_I2C_Mem_Read>
}
 800271c:	bf00      	nop
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	200007e4 	.word	0x200007e4
 8002728:	20000408 	.word	0x20000408

0800272c <adxl_init>:
void adxl_init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
	adxl_read(0x00,1);
 8002730:	2101      	movs	r1, #1
 8002732:	2000      	movs	r0, #0
 8002734:	f7ff ffce 	bl	80026d4 <adxl_read>
	adxl_write(0x2d,0);
 8002738:	2100      	movs	r1, #0
 800273a:	202d      	movs	r0, #45	; 0x2d
 800273c:	f7ff ffae 	bl	800269c <adxl_write>
	adxl_write(0x2d,0x08);
 8002740:	2108      	movs	r1, #8
 8002742:	202d      	movs	r0, #45	; 0x2d
 8002744:	f7ff ffaa 	bl	800269c <adxl_write>
	adxl_write(0x31,0x01);
 8002748:	2101      	movs	r1, #1
 800274a:	2031      	movs	r0, #49	; 0x31
 800274c:	f7ff ffa6 	bl	800269c <adxl_write>

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	0000      	movs	r0, r0
	...

08002758 <kq_adxl>:

void kq_adxl()
{
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	af00      	add	r7, sp, #0
	adxl_read(0x32,6);
 800275c:	2106      	movs	r1, #6
 800275e:	2032      	movs	r0, #50	; 0x32
 8002760:	f7ff ffb8 	bl	80026d4 <adxl_read>
	x=data_rec[1]<<8| data_rec[0];
 8002764:	4bb4      	ldr	r3, [pc, #720]	; (8002a38 <kq_adxl+0x2e0>)
 8002766:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	b21a      	sxth	r2, r3
 800276e:	4bb2      	ldr	r3, [pc, #712]	; (8002a38 <kq_adxl+0x2e0>)
 8002770:	f993 3000 	ldrsb.w	r3, [r3]
 8002774:	b21b      	sxth	r3, r3
 8002776:	4313      	orrs	r3, r2
 8002778:	b21a      	sxth	r2, r3
 800277a:	4bb0      	ldr	r3, [pc, #704]	; (8002a3c <kq_adxl+0x2e4>)
 800277c:	801a      	strh	r2, [r3, #0]
	y=data_rec[3]<<8| data_rec[2];
 800277e:	4bae      	ldr	r3, [pc, #696]	; (8002a38 <kq_adxl+0x2e0>)
 8002780:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	b21a      	sxth	r2, r3
 8002788:	4bab      	ldr	r3, [pc, #684]	; (8002a38 <kq_adxl+0x2e0>)
 800278a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800278e:	b21b      	sxth	r3, r3
 8002790:	4313      	orrs	r3, r2
 8002792:	b21a      	sxth	r2, r3
 8002794:	4baa      	ldr	r3, [pc, #680]	; (8002a40 <kq_adxl+0x2e8>)
 8002796:	801a      	strh	r2, [r3, #0]
	z=data_rec[5]<<8| data_rec[4];
 8002798:	4ba7      	ldr	r3, [pc, #668]	; (8002a38 <kq_adxl+0x2e0>)
 800279a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	4ba5      	ldr	r3, [pc, #660]	; (8002a38 <kq_adxl+0x2e0>)
 80027a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80027a8:	b21b      	sxth	r3, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b21a      	sxth	r2, r3
 80027ae:	4ba5      	ldr	r3, [pc, #660]	; (8002a44 <kq_adxl+0x2ec>)
 80027b0:	801a      	strh	r2, [r3, #0]
	xg = x* .0078;
 80027b2:	4ba2      	ldr	r3, [pc, #648]	; (8002a3c <kq_adxl+0x2e4>)
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe2d 	bl	8000418 <__aeabi_i2d>
 80027be:	a39a      	add	r3, pc, #616	; (adr r3, 8002a28 <kq_adxl+0x2d0>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	f7fd fe92 	bl	80004ec <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe f964 	bl	8000a9c <__aeabi_d2f>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4a9c      	ldr	r2, [pc, #624]	; (8002a48 <kq_adxl+0x2f0>)
 80027d8:	6013      	str	r3, [r2, #0]
	yg = y* .0078;
 80027da:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <kq_adxl+0x2e8>)
 80027dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe19 	bl	8000418 <__aeabi_i2d>
 80027e6:	a390      	add	r3, pc, #576	; (adr r3, 8002a28 <kq_adxl+0x2d0>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fe7e 	bl	80004ec <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4610      	mov	r0, r2
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7fe f950 	bl	8000a9c <__aeabi_d2f>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4a93      	ldr	r2, [pc, #588]	; (8002a4c <kq_adxl+0x2f4>)
 8002800:	6013      	str	r3, [r2, #0]
	zg = z* .0078;
 8002802:	4b90      	ldr	r3, [pc, #576]	; (8002a44 <kq_adxl+0x2ec>)
 8002804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe05 	bl	8000418 <__aeabi_i2d>
 800280e:	a386      	add	r3, pc, #536	; (adr r3, 8002a28 <kq_adxl+0x2d0>)
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f7fd fe6a 	bl	80004ec <__aeabi_dmul>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe f93c 	bl	8000a9c <__aeabi_d2f>
 8002824:	4603      	mov	r3, r0
 8002826:	4a8a      	ldr	r2, [pc, #552]	; (8002a50 <kq_adxl+0x2f8>)
 8002828:	6013      	str	r3, [r2, #0]
//	fXg = Xg * alpha + (fXg * (1.0 - alpha));
	if(xg!=0 || yg!=0 || zg!=0)
 800282a:	4b87      	ldr	r3, [pc, #540]	; (8002a48 <kq_adxl+0x2f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f04f 0100 	mov.w	r1, #0
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc24 	bl	8001080 <__aeabi_fcmpeq>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d014      	beq.n	8002868 <kq_adxl+0x110>
 800283e:	4b83      	ldr	r3, [pc, #524]	; (8002a4c <kq_adxl+0x2f4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fc1a 	bl	8001080 <__aeabi_fcmpeq>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <kq_adxl+0x110>
 8002852:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <kq_adxl+0x2f8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc10 	bl	8001080 <__aeabi_fcmpeq>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 80d0 	bne.w	8002a08 <kq_adxl+0x2b0>
//		fxg=xg* 0.5 +(fxg*0.5);
//		fyg=yg* 0.5 +(fyg*0.5);
//		fzg=zg* 0.5 +(fzg*0.5);

		//roll  = (atan2(-fyg, fzg)*180.0)/3.14;
		X = (atan2(xg, sqrt(yg*yg + zg*zg))*180.0)/3.14;
 8002868:	4b77      	ldr	r3, [pc, #476]	; (8002a48 <kq_adxl+0x2f0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fde5 	bl	800043c <__aeabi_f2d>
 8002872:	4604      	mov	r4, r0
 8002874:	460d      	mov	r5, r1
 8002876:	4b75      	ldr	r3, [pc, #468]	; (8002a4c <kq_adxl+0x2f4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a74      	ldr	r2, [pc, #464]	; (8002a4c <kq_adxl+0x2f4>)
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fa69 	bl	8000d58 <__aeabi_fmul>
 8002886:	4603      	mov	r3, r0
 8002888:	461e      	mov	r6, r3
 800288a:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <kq_adxl+0x2f8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a70      	ldr	r2, [pc, #448]	; (8002a50 <kq_adxl+0x2f8>)
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	4611      	mov	r1, r2
 8002894:	4618      	mov	r0, r3
 8002896:	f7fe fa5f 	bl	8000d58 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	4630      	mov	r0, r6
 80028a0:	f7fe f952 	bl	8000b48 <__addsf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdc8 	bl	800043c <__aeabi_f2d>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f008 ff18 	bl	800b6e8 <sqrt>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4620      	mov	r0, r4
 80028be:	4629      	mov	r1, r5
 80028c0:	f008 ff10 	bl	800b6e4 <atan2>
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	4b62      	ldr	r3, [pc, #392]	; (8002a54 <kq_adxl+0x2fc>)
 80028ca:	f7fd fe0f 	bl	80004ec <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	a356      	add	r3, pc, #344	; (adr r3, 8002a30 <kq_adxl+0x2d8>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd ff30 	bl	8000740 <__aeabi_ddiv>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f8d8 	bl	8000a9c <__aeabi_d2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a5a      	ldr	r2, [pc, #360]	; (8002a58 <kq_adxl+0x300>)
 80028f0:	6013      	str	r3, [r2, #0]
		Y = (atan2(yg, sqrt(xg*xg + zg*zg))*180.0)/3.14;
 80028f2:	4b56      	ldr	r3, [pc, #344]	; (8002a4c <kq_adxl+0x2f4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fda0 	bl	800043c <__aeabi_f2d>
 80028fc:	4604      	mov	r4, r0
 80028fe:	460d      	mov	r5, r1
 8002900:	4b51      	ldr	r3, [pc, #324]	; (8002a48 <kq_adxl+0x2f0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <kq_adxl+0x2f0>)
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f7fe fa24 	bl	8000d58 <__aeabi_fmul>
 8002910:	4603      	mov	r3, r0
 8002912:	461e      	mov	r6, r3
 8002914:	4b4e      	ldr	r3, [pc, #312]	; (8002a50 <kq_adxl+0x2f8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a4d      	ldr	r2, [pc, #308]	; (8002a50 <kq_adxl+0x2f8>)
 800291a:	6812      	ldr	r2, [r2, #0]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fa1a 	bl	8000d58 <__aeabi_fmul>
 8002924:	4603      	mov	r3, r0
 8002926:	4619      	mov	r1, r3
 8002928:	4630      	mov	r0, r6
 800292a:	f7fe f90d 	bl	8000b48 <__addsf3>
 800292e:	4603      	mov	r3, r0
 8002930:	4618      	mov	r0, r3
 8002932:	f7fd fd83 	bl	800043c <__aeabi_f2d>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f008 fed3 	bl	800b6e8 <sqrt>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f008 fecb 	bl	800b6e4 <atan2>
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <kq_adxl+0x2fc>)
 8002954:	f7fd fdca 	bl	80004ec <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	a333      	add	r3, pc, #204	; (adr r3, 8002a30 <kq_adxl+0x2d8>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd feeb 	bl	8000740 <__aeabi_ddiv>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f893 	bl	8000a9c <__aeabi_d2f>
 8002976:	4603      	mov	r3, r0
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <kq_adxl+0x304>)
 800297a:	6013      	str	r3, [r2, #0]
		Z = (atan2(zg, sqrt(xg*xg + yg*yg))*180.0)/3.14;
 800297c:	4b34      	ldr	r3, [pc, #208]	; (8002a50 <kq_adxl+0x2f8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fd5b 	bl	800043c <__aeabi_f2d>
 8002986:	4604      	mov	r4, r0
 8002988:	460d      	mov	r5, r1
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <kq_adxl+0x2f0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <kq_adxl+0x2f0>)
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe f9df 	bl	8000d58 <__aeabi_fmul>
 800299a:	4603      	mov	r3, r0
 800299c:	461e      	mov	r6, r3
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <kq_adxl+0x2f4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <kq_adxl+0x2f4>)
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fe f9d5 	bl	8000d58 <__aeabi_fmul>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4630      	mov	r0, r6
 80029b4:	f7fe f8c8 	bl	8000b48 <__addsf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fd3e 	bl	800043c <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f008 fe8e 	bl	800b6e8 <sqrt>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f008 fe86 	bl	800b6e4 <atan2>
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <kq_adxl+0x2fc>)
 80029de:	f7fd fd85 	bl	80004ec <__aeabi_dmul>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4610      	mov	r0, r2
 80029e8:	4619      	mov	r1, r3
 80029ea:	a311      	add	r3, pc, #68	; (adr r3, 8002a30 <kq_adxl+0x2d8>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fea6 	bl	8000740 <__aeabi_ddiv>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f84e 	bl	8000a9c <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	4a17      	ldr	r2, [pc, #92]	; (8002a60 <kq_adxl+0x308>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00c      	b.n	8002a22 <kq_adxl+0x2ca>
//
//		HAL_Delay(1000);
	}
	else
	{
		X=0;
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <kq_adxl+0x300>)
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	601a      	str	r2, [r3, #0]
		Y=0;
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <kq_adxl+0x304>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
		Z=0;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <kq_adxl+0x308>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
//		sprintf(buffergn,"\r\n XH=%.4f YH=%.4f  ZH=%.4f \r\n ",X, Y,Z );
//        HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn, strlen(buffergn), 1000);
//		HAL_Delay(500);

	}
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a26:	bf00      	nop
 8002a28:	8e8a71de 	.word	0x8e8a71de
 8002a2c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002a30:	51eb851f 	.word	0x51eb851f
 8002a34:	40091eb8 	.word	0x40091eb8
 8002a38:	200007e4 	.word	0x200007e4
 8002a3c:	200003f8 	.word	0x200003f8
 8002a40:	2000057c 	.word	0x2000057c
 8002a44:	200004de 	.word	0x200004de
 8002a48:	200007f0 	.word	0x200007f0
 8002a4c:	200007dc 	.word	0x200007dc
 8002a50:	200004d0 	.word	0x200004d0
 8002a54:	40668000 	.word	0x40668000
 8002a58:	200007f4 	.word	0x200007f4
 8002a5c:	200004b8 	.word	0x200004b8
 8002a60:	20000648 	.word	0x20000648
 8002a64:	00000000 	.word	0x00000000

08002a68 <kq_adxl_timer>:


void kq_adxl_timer()
{
 8002a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af04      	add	r7, sp, #16
	adxl_read(0x32,6);
 8002a70:	2106      	movs	r1, #6
 8002a72:	2032      	movs	r0, #50	; 0x32
 8002a74:	f7ff fe2e 	bl	80026d4 <adxl_read>
	x=data_rec[1]<<8| data_rec[0];
 8002a78:	4bb7      	ldr	r3, [pc, #732]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002a7a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002a7e:	021b      	lsls	r3, r3, #8
 8002a80:	b21a      	sxth	r2, r3
 8002a82:	4bb5      	ldr	r3, [pc, #724]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002a84:	f993 3000 	ldrsb.w	r3, [r3]
 8002a88:	b21b      	sxth	r3, r3
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	4bb3      	ldr	r3, [pc, #716]	; (8002d5c <kq_adxl_timer+0x2f4>)
 8002a90:	801a      	strh	r2, [r3, #0]
	y=data_rec[3]<<8| data_rec[2];
 8002a92:	4bb1      	ldr	r3, [pc, #708]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002a94:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	4bae      	ldr	r3, [pc, #696]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002a9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002aa2:	b21b      	sxth	r3, r3
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	4bad      	ldr	r3, [pc, #692]	; (8002d60 <kq_adxl_timer+0x2f8>)
 8002aaa:	801a      	strh	r2, [r3, #0]
	z=data_rec[5]<<8| data_rec[4];
 8002aac:	4baa      	ldr	r3, [pc, #680]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002aae:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	b21a      	sxth	r2, r3
 8002ab6:	4ba8      	ldr	r3, [pc, #672]	; (8002d58 <kq_adxl_timer+0x2f0>)
 8002ab8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002abc:	b21b      	sxth	r3, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b21a      	sxth	r2, r3
 8002ac2:	4ba8      	ldr	r3, [pc, #672]	; (8002d64 <kq_adxl_timer+0x2fc>)
 8002ac4:	801a      	strh	r2, [r3, #0]
	xg = x* .0078;
 8002ac6:	4ba5      	ldr	r3, [pc, #660]	; (8002d5c <kq_adxl_timer+0x2f4>)
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fca3 	bl	8000418 <__aeabi_i2d>
 8002ad2:	a39d      	add	r3, pc, #628	; (adr r3, 8002d48 <kq_adxl_timer+0x2e0>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fd08 	bl	80004ec <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fd ffda 	bl	8000a9c <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a9f      	ldr	r2, [pc, #636]	; (8002d68 <kq_adxl_timer+0x300>)
 8002aec:	6013      	str	r3, [r2, #0]
	yg = y* .0078;
 8002aee:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <kq_adxl_timer+0x2f8>)
 8002af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fc8f 	bl	8000418 <__aeabi_i2d>
 8002afa:	a393      	add	r3, pc, #588	; (adr r3, 8002d48 <kq_adxl_timer+0x2e0>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fcf4 	bl	80004ec <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fd ffc6 	bl	8000a9c <__aeabi_d2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4a96      	ldr	r2, [pc, #600]	; (8002d6c <kq_adxl_timer+0x304>)
 8002b14:	6013      	str	r3, [r2, #0]
	zg = z* .0078;
 8002b16:	4b93      	ldr	r3, [pc, #588]	; (8002d64 <kq_adxl_timer+0x2fc>)
 8002b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fc7b 	bl	8000418 <__aeabi_i2d>
 8002b22:	a389      	add	r3, pc, #548	; (adr r3, 8002d48 <kq_adxl_timer+0x2e0>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fce0 	bl	80004ec <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fd ffb2 	bl	8000a9c <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a8d      	ldr	r2, [pc, #564]	; (8002d70 <kq_adxl_timer+0x308>)
 8002b3c:	6013      	str	r3, [r2, #0]
	//fXg = Xg * alpha + (fXg * (1.0 - alpha));
	if(xg!=0 || yg!=0 || zg!=0)
 8002b3e:	4b8a      	ldr	r3, [pc, #552]	; (8002d68 <kq_adxl_timer+0x300>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fa9a 	bl	8001080 <__aeabi_fcmpeq>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d014      	beq.n	8002b7c <kq_adxl_timer+0x114>
 8002b52:	4b86      	ldr	r3, [pc, #536]	; (8002d6c <kq_adxl_timer+0x304>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f04f 0100 	mov.w	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fa90 	bl	8001080 <__aeabi_fcmpeq>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <kq_adxl_timer+0x114>
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <kq_adxl_timer+0x308>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f04f 0100 	mov.w	r1, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fa86 	bl	8001080 <__aeabi_fcmpeq>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 811a 	bne.w	8002db0 <kq_adxl_timer+0x348>
//		fxg=xg* 0.5 +(fxg*0.5);
//		fyg=yg* 0.5 +(fyg*0.5);
//		fzg=zg* 0.5 +(fzg*0.5);

		//roll  = (atan2(-fyg, fzg)*180.0)/3.14;
		X = (atan2(xg, sqrt(yg*yg + zg*zg))*180.0)/3.14;
 8002b7c:	4b7a      	ldr	r3, [pc, #488]	; (8002d68 <kq_adxl_timer+0x300>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fc5b 	bl	800043c <__aeabi_f2d>
 8002b86:	4604      	mov	r4, r0
 8002b88:	460d      	mov	r5, r1
 8002b8a:	4b78      	ldr	r3, [pc, #480]	; (8002d6c <kq_adxl_timer+0x304>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a77      	ldr	r2, [pc, #476]	; (8002d6c <kq_adxl_timer+0x304>)
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe f8df 	bl	8000d58 <__aeabi_fmul>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461e      	mov	r6, r3
 8002b9e:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <kq_adxl_timer+0x308>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a73      	ldr	r2, [pc, #460]	; (8002d70 <kq_adxl_timer+0x308>)
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fe f8d5 	bl	8000d58 <__aeabi_fmul>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f7fd ffc8 	bl	8000b48 <__addsf3>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fd fc3e 	bl	800043c <__aeabi_f2d>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f008 fd8e 	bl	800b6e8 <sqrt>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	4629      	mov	r1, r5
 8002bd4:	f008 fd86 	bl	800b6e4 <atan2>
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b65      	ldr	r3, [pc, #404]	; (8002d74 <kq_adxl_timer+0x30c>)
 8002bde:	f7fd fc85 	bl	80004ec <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	a359      	add	r3, pc, #356	; (adr r3, 8002d50 <kq_adxl_timer+0x2e8>)
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f7fd fda6 	bl	8000740 <__aeabi_ddiv>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f7fd ff4e 	bl	8000a9c <__aeabi_d2f>
 8002c00:	4603      	mov	r3, r0
 8002c02:	4a5d      	ldr	r2, [pc, #372]	; (8002d78 <kq_adxl_timer+0x310>)
 8002c04:	6013      	str	r3, [r2, #0]
		Y = (atan2(yg, sqrt(xg*xg + zg*zg))*180.0)/3.14;
 8002c06:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <kq_adxl_timer+0x304>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fc16 	bl	800043c <__aeabi_f2d>
 8002c10:	4604      	mov	r4, r0
 8002c12:	460d      	mov	r5, r1
 8002c14:	4b54      	ldr	r3, [pc, #336]	; (8002d68 <kq_adxl_timer+0x300>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a53      	ldr	r2, [pc, #332]	; (8002d68 <kq_adxl_timer+0x300>)
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f89a 	bl	8000d58 <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461e      	mov	r6, r3
 8002c28:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <kq_adxl_timer+0x308>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a50      	ldr	r2, [pc, #320]	; (8002d70 <kq_adxl_timer+0x308>)
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe f890 	bl	8000d58 <__aeabi_fmul>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	f7fd ff83 	bl	8000b48 <__addsf3>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fd fbf9 	bl	800043c <__aeabi_f2d>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4610      	mov	r0, r2
 8002c50:	4619      	mov	r1, r3
 8002c52:	f008 fd49 	bl	800b6e8 <sqrt>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	4620      	mov	r0, r4
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	f008 fd41 	bl	800b6e4 <atan2>
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b43      	ldr	r3, [pc, #268]	; (8002d74 <kq_adxl_timer+0x30c>)
 8002c68:	f7fd fc40 	bl	80004ec <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	a336      	add	r3, pc, #216	; (adr r3, 8002d50 <kq_adxl_timer+0x2e8>)
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f7fd fd61 	bl	8000740 <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4610      	mov	r0, r2
 8002c84:	4619      	mov	r1, r3
 8002c86:	f7fd ff09 	bl	8000a9c <__aeabi_d2f>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	; (8002d7c <kq_adxl_timer+0x314>)
 8002c8e:	6013      	str	r3, [r2, #0]
		Z = (atan2(zg, sqrt(xg*xg + yg*yg))*180.0)/3.14;
 8002c90:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <kq_adxl_timer+0x308>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fbd1 	bl	800043c <__aeabi_f2d>
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	460d      	mov	r5, r1
 8002c9e:	4b32      	ldr	r3, [pc, #200]	; (8002d68 <kq_adxl_timer+0x300>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <kq_adxl_timer+0x300>)
 8002ca4:	6812      	ldr	r2, [r2, #0]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f855 	bl	8000d58 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461e      	mov	r6, r3
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <kq_adxl_timer+0x304>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <kq_adxl_timer+0x304>)
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe f84b 	bl	8000d58 <__aeabi_fmul>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	f7fd ff3e 	bl	8000b48 <__addsf3>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fbb4 	bl	800043c <__aeabi_f2d>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f008 fd04 	bl	800b6e8 <sqrt>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	f008 fcfc 	bl	800b6e4 <atan2>
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <kq_adxl_timer+0x30c>)
 8002cf2:	f7fd fbfb 	bl	80004ec <__aeabi_dmul>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	a314      	add	r3, pc, #80	; (adr r3, 8002d50 <kq_adxl_timer+0x2e8>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fd1c 	bl	8000740 <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd fec4 	bl	8000a9c <__aeabi_d2f>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <kq_adxl_timer+0x318>)
 8002d18:	6013      	str	r3, [r2, #0]
		sprintf(buffergn,"\r\n X=%.4f Y=%.4f  Z=%.4f \r\n ",X, Y,Z );
 8002d1a:	4b17      	ldr	r3, [pc, #92]	; (8002d78 <kq_adxl_timer+0x310>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fb8c 	bl	800043c <__aeabi_f2d>
 8002d24:	4680      	mov	r8, r0
 8002d26:	4689      	mov	r9, r1
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <kq_adxl_timer+0x314>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fb85 	bl	800043c <__aeabi_f2d>
 8002d32:	4604      	mov	r4, r0
 8002d34:	460d      	mov	r5, r1
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <kq_adxl_timer+0x318>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fb7e 	bl	800043c <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	e01e      	b.n	8002d84 <kq_adxl_timer+0x31c>
 8002d46:	bf00      	nop
 8002d48:	8e8a71de 	.word	0x8e8a71de
 8002d4c:	3f7ff2e4 	.word	0x3f7ff2e4
 8002d50:	51eb851f 	.word	0x51eb851f
 8002d54:	40091eb8 	.word	0x40091eb8
 8002d58:	200007e4 	.word	0x200007e4
 8002d5c:	200003f8 	.word	0x200003f8
 8002d60:	2000057c 	.word	0x2000057c
 8002d64:	200004de 	.word	0x200004de
 8002d68:	200007f0 	.word	0x200007f0
 8002d6c:	200007dc 	.word	0x200007dc
 8002d70:	200004d0 	.word	0x200004d0
 8002d74:	40668000 	.word	0x40668000
 8002d78:	200007f4 	.word	0x200007f4
 8002d7c:	200004b8 	.word	0x200004b8
 8002d80:	20000648 	.word	0x20000648
 8002d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002d88:	e9cd 4500 	strd	r4, r5, [sp]
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	4927      	ldr	r1, [pc, #156]	; (8002e30 <kq_adxl_timer+0x3c8>)
 8002d92:	4828      	ldr	r0, [pc, #160]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002d94:	f006 f99a 	bl	80090cc <siprintf>
		HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn, strlen(buffergn), 1000);
 8002d98:	4826      	ldr	r0, [pc, #152]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002d9a:	f7fd f9e3 	bl	8000164 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da6:	4923      	ldr	r1, [pc, #140]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002da8:	4823      	ldr	r0, [pc, #140]	; (8002e38 <kq_adxl_timer+0x3d0>)
 8002daa:	f005 fb74 	bl	8008496 <HAL_UART_Transmit>
 8002dae:	e03a      	b.n	8002e26 <kq_adxl_timer+0x3be>

	//HAL_Delay(500);
	}
	else
	{
		X=0;
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <kq_adxl_timer+0x3d4>)
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
		Y=0;
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <kq_adxl_timer+0x3d8>)
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
		Z=0;
 8002dc0:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <kq_adxl_timer+0x3dc>)
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
		sprintf(buffergn,"\r\n X=%.4f Y=%.4f  Z=%.4f \r\n ",X, Y,Z );
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <kq_adxl_timer+0x3d4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fd fb35 	bl	800043c <__aeabi_f2d>
 8002dd2:	4680      	mov	r8, r0
 8002dd4:	4689      	mov	r9, r1
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <kq_adxl_timer+0x3d8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb2e 	bl	800043c <__aeabi_f2d>
 8002de0:	4604      	mov	r4, r0
 8002de2:	460d      	mov	r5, r1
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <kq_adxl_timer+0x3dc>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fb27 	bl	800043c <__aeabi_f2d>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002df6:	e9cd 4500 	strd	r4, r5, [sp]
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	490c      	ldr	r1, [pc, #48]	; (8002e30 <kq_adxl_timer+0x3c8>)
 8002e00:	480c      	ldr	r0, [pc, #48]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002e02:	f006 f963 	bl	80090cc <siprintf>
        HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn, strlen(buffergn), 1000);
 8002e06:	480b      	ldr	r0, [pc, #44]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002e08:	f7fd f9ac 	bl	8000164 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e14:	4907      	ldr	r1, [pc, #28]	; (8002e34 <kq_adxl_timer+0x3cc>)
 8002e16:	4808      	ldr	r0, [pc, #32]	; (8002e38 <kq_adxl_timer+0x3d0>)
 8002e18:	f005 fb3d 	bl	8008496 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e20:	f001 fd2c 	bl	800487c <HAL_Delay>

	}
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3704      	adds	r7, #4
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e30:	0800bdb4 	.word	0x0800bdb4
 8002e34:	200005dc 	.word	0x200005dc
 8002e38:	20000348 	.word	0x20000348
 8002e3c:	200007f4 	.word	0x200007f4
 8002e40:	200004b8 	.word	0x200004b8
 8002e44:	20000648 	.word	0x20000648

08002e48 <LoRa_txMode>:

//////////////lora////////

void LoRa_txMode(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    LoRa_idle(); // set standby mode
 8002e4c:	f7fe fc6e 	bl	800172c <LoRa_idle>
    LoRa_enableInvertIQ(); // active invert I and Q signals
 8002e50:	f7fe fe84 	bl	8001b5c <LoRa_enableInvertIQ>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <LoRa_rxMode>:

void LoRa_rxMode(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	LoRa_disableInvertIQ(); // normal mode
 8002e5c:	f7fe fe8a 	bl	8001b74 <LoRa_disableInvertIQ>
    LoRa_receive(0); // set receive mode
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fc45 	bl	80016f0 <LoRa_receive>
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <send_id>:

void send_id(uint8_t id)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
    char buffer[30];
    sprintf(buffer, "%d", id);
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	f107 0308 	add.w	r3, r7, #8
 8002e7c:	4907      	ldr	r1, [pc, #28]	; (8002e9c <send_id+0x30>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f006 f924 	bl	80090cc <siprintf>
    LoRa_txMode();
 8002e84:	f7ff ffe0 	bl	8002e48 <LoRa_txMode>
    LoRa_sendPacket(buffer);
 8002e88:	f107 0308 	add.w	r3, r7, #8
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fb74 	bl	800157a <LoRa_sendPacket>

}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	0800bdd4 	.word	0x0800bdd4

08002ea0 <get_id>:

uint8_t get_id(void)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b089      	sub	sp, #36	; 0x24
 8002ea4:	af00      	add	r7, sp, #0
    char buffer[30]={0};
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	605a      	str	r2, [r3, #4]
 8002eb2:	609a      	str	r2, [r3, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	831a      	strh	r2, [r3, #24]

    LoRa_rxMode();
 8002ebc:	f7ff ffcc 	bl	8002e58 <LoRa_rxMode>
    LoRa_receivePacket(buffer, 7000);
 8002ec0:	463b      	mov	r3, r7
 8002ec2:	f641 3158 	movw	r1, #7000	; 0x1b58
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe fb70 	bl	80015ac <LoRa_receivePacket>
    uint8_t id = atoi(buffer);
 8002ecc:	463b      	mov	r3, r7
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f005 fc4c 	bl	800876c <atoi>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	77bb      	strb	r3, [r7, #30]
    for(uint8_t i = 0; i < strlen(buffer); i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e009      	b.n	8002ef2 <get_id+0x52>
        {
            buffer[i] = 0;
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	f107 0220 	add.w	r2, r7, #32
 8002ee4:	4413      	add	r3, r2
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for(uint8_t i = 0; i < strlen(buffer); i++)
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	7ffc      	ldrb	r4, [r7, #31]
 8002ef4:	463b      	mov	r3, r7
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd f934 	bl	8000164 <strlen>
 8002efc:	4603      	mov	r3, r0
 8002efe:	429c      	cmp	r4, r3
 8002f00:	d3ed      	bcc.n	8002ede <get_id+0x3e>
        }
    return id;
 8002f02:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3724      	adds	r7, #36	; 0x24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}

08002f0c <Response_Gateway>:
        buffer[i] = 0;
    }
}

void Response_Gateway(void)
{
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b0bb      	sub	sp, #236	; 0xec
 8002f12:	af12      	add	r7, sp, #72	; 0x48
    uint8_t ID,t=0,k=0,i=0,q=0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c


    char send_data[120]={0};
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	623b      	str	r3, [r7, #32]
 8002f30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f34:	2274      	movs	r2, #116	; 0x74
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f005 fc5f 	bl	80087fc <memset>

    	for( i = 0; i < sizeof(data); i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8002f44:	e009      	b.n	8002f5a <Response_Gateway+0x4e>
    	{
    		data[i] = 0;
 8002f46:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002f4a:	4a59      	ldr	r2, [pc, #356]	; (80030b0 <Response_Gateway+0x1a4>)
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	54d1      	strb	r1, [r2, r3]
    	for( i = 0; i < sizeof(data); i++)
 8002f50:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002f54:	3301      	adds	r3, #1
 8002f56:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8002f5a:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8002f5e:	2b1d      	cmp	r3, #29
 8002f60:	d9f1      	bls.n	8002f46 <Response_Gateway+0x3a>
    	}
        LoRa_rxMode();
 8002f62:	f7ff ff79 	bl	8002e58 <LoRa_rxMode>
    	LoRa_receivePacket(data, 40000);
 8002f66:	f649 4140 	movw	r1, #40000	; 0x9c40
 8002f6a:	4851      	ldr	r0, [pc, #324]	; (80030b0 <Response_Gateway+0x1a4>)
 8002f6c:	f7fe fb1e 	bl	80015ac <LoRa_receivePacket>
    	 HAL_UART_Transmit(&huart1, (uint8_t *)data ,sizeof(data), 5000);
 8002f70:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f74:	221e      	movs	r2, #30
 8002f76:	494e      	ldr	r1, [pc, #312]	; (80030b0 <Response_Gateway+0x1a4>)
 8002f78:	484e      	ldr	r0, [pc, #312]	; (80030b4 <Response_Gateway+0x1a8>)
 8002f7a:	f005 fa8c 	bl	8008496 <HAL_UART_Transmit>
        if(!strcmp(data,"hello"))
 8002f7e:	494e      	ldr	r1, [pc, #312]	; (80030b8 <Response_Gateway+0x1ac>)
 8002f80:	484b      	ldr	r0, [pc, #300]	; (80030b0 <Response_Gateway+0x1a4>)
 8002f82:	f7fd f8e5 	bl	8000150 <strcmp>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f040 8255 	bne.w	8003438 <Response_Gateway+0x52c>
        {
        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f94:	4849      	ldr	r0, [pc, #292]	; (80030bc <Response_Gateway+0x1b0>)
 8002f96:	f002 fbe8 	bl	800576a <HAL_GPIO_WritePin>
        	HAL_UART_Transmit(&huart1, (uint8_t *)"\n\rSend ID to Gateway:" ,21,10000);
 8002f9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8002f9e:	2215      	movs	r2, #21
 8002fa0:	4947      	ldr	r1, [pc, #284]	; (80030c0 <Response_Gateway+0x1b4>)
 8002fa2:	4844      	ldr	r0, [pc, #272]	; (80030b4 <Response_Gateway+0x1a8>)
 8002fa4:	f005 fa77 	bl	8008496 <HAL_UART_Transmit>
        	LoRa_txMode();
 8002fa8:	f7ff ff4e 	bl	8002e48 <LoRa_txMode>
         	HAL_Delay(1000);
 8002fac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fb0:	f001 fc64 	bl	800487c <HAL_Delay>
            send_id(ID_NODE);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff ff59 	bl	8002e6c <send_id>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fc0:	483e      	ldr	r0, [pc, #248]	; (80030bc <Response_Gateway+0x1b0>)
 8002fc2:	f002 fbd2 	bl	800576a <HAL_GPIO_WritePin>
            HAL_Delay(500);
 8002fc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002fca:	f001 fc57 	bl	800487c <HAL_Delay>
            sprintf(data1, " %d",ID_NODE );
 8002fce:	2201      	movs	r2, #1
 8002fd0:	493c      	ldr	r1, [pc, #240]	; (80030c4 <Response_Gateway+0x1b8>)
 8002fd2:	483d      	ldr	r0, [pc, #244]	; (80030c8 <Response_Gateway+0x1bc>)
 8002fd4:	f006 f87a 	bl	80090cc <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)data1 ,strlen(data1), 5000);
 8002fd8:	483b      	ldr	r0, [pc, #236]	; (80030c8 <Response_Gateway+0x1bc>)
 8002fda:	f7fd f8c3 	bl	8000164 <strlen>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fe6:	4938      	ldr	r1, [pc, #224]	; (80030c8 <Response_Gateway+0x1bc>)
 8002fe8:	4832      	ldr	r0, [pc, #200]	; (80030b4 <Response_Gateway+0x1a8>)
 8002fea:	f005 fa54 	bl	8008496 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart1, (uint8_t *)"\n\rGet ID from Gateway:" ,22, 10000);
 8002fee:	f242 7310 	movw	r3, #10000	; 0x2710
 8002ff2:	2216      	movs	r2, #22
 8002ff4:	4935      	ldr	r1, [pc, #212]	; (80030cc <Response_Gateway+0x1c0>)
 8002ff6:	482f      	ldr	r0, [pc, #188]	; (80030b4 <Response_Gateway+0x1a8>)
 8002ff8:	f005 fa4d 	bl	8008496 <HAL_UART_Transmit>
            ID = get_id();
 8002ffc:	f7ff ff50 	bl	8002ea0 <get_id>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
            sprintf(data1, " %d", ID);
 8003006:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800300a:	461a      	mov	r2, r3
 800300c:	492d      	ldr	r1, [pc, #180]	; (80030c4 <Response_Gateway+0x1b8>)
 800300e:	482e      	ldr	r0, [pc, #184]	; (80030c8 <Response_Gateway+0x1bc>)
 8003010:	f006 f85c 	bl	80090cc <siprintf>
            HAL_UART_Transmit(&huart1, (uint8_t *)data1 ,strlen(data1), 5000);
 8003014:	482c      	ldr	r0, [pc, #176]	; (80030c8 <Response_Gateway+0x1bc>)
 8003016:	f7fd f8a5 	bl	8000164 <strlen>
 800301a:	4603      	mov	r3, r0
 800301c:	b29a      	uxth	r2, r3
 800301e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003022:	4929      	ldr	r1, [pc, #164]	; (80030c8 <Response_Gateway+0x1bc>)
 8003024:	4823      	ldr	r0, [pc, #140]	; (80030b4 <Response_Gateway+0x1a8>)
 8003026:	f005 fa36 	bl	8008496 <HAL_UART_Transmit>
            LoRa_rxMode();
 800302a:	f7ff ff15 	bl	8002e58 <LoRa_rxMode>
            t=0;
 800302e:	2300      	movs	r3, #0
 8003030:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            k=0;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
            if(ID == ID_NODE)
 800303a:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 800303e:	2b01      	cmp	r3, #1
 8003040:	f040 81fa 	bne.w	8003438 <Response_Gateway+0x52c>
            {
            	while(1)
            	{

            		for( q = 0; q < sizeof(receive_data); q++)
 8003044:	2300      	movs	r3, #0
 8003046:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 800304a:	e009      	b.n	8003060 <Response_Gateway+0x154>
            		{
            			receive_data[q] = 0;
 800304c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003050:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <Response_Gateway+0x1c4>)
 8003052:	2100      	movs	r1, #0
 8003054:	54d1      	strb	r1, [r2, r3]
            		for( q = 0; q < sizeof(receive_data); q++)
 8003056:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800305a:	3301      	adds	r3, #1
 800305c:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8003060:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003064:	2b31      	cmp	r3, #49	; 0x31
 8003066:	d9f1      	bls.n	800304c <Response_Gateway+0x140>
            		}
            		LoRa_receivePacket(receive_data, 20000);
 8003068:	f644 6120 	movw	r1, #20000	; 0x4e20
 800306c:	4818      	ldr	r0, [pc, #96]	; (80030d0 <Response_Gateway+0x1c4>)
 800306e:	f7fe fa9d 	bl	80015ac <LoRa_receivePacket>
            		k++;
 8003072:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003076:	3301      	adds	r3, #1
 8003078:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
            		if(k==10) ///////////////////// thêm nút thì tăng k
 800307c:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003080:	2b0a      	cmp	r3, #10
 8003082:	f000 81d8 	beq.w	8003436 <Response_Gateway+0x52a>
            		{
            			break;
            		}
            		if(!strcmp(receive_data,"send_data"))
 8003086:	4913      	ldr	r1, [pc, #76]	; (80030d4 <Response_Gateway+0x1c8>)
 8003088:	4811      	ldr	r0, [pc, #68]	; (80030d0 <Response_Gateway+0x1c4>)
 800308a:	f7fd f861 	bl	8000150 <strcmp>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8187 	bne.w	80033a4 <Response_Gateway+0x498>
            		{
            			for( k=0;k<5;k++)
 8003096:	2300      	movs	r3, #0
 8003098:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800309c:	e16f      	b.n	800337e <Response_Gateway+0x472>
            			{
            				if(t==8) //////////////////khoảng 4 nút
 800309e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80030a2:	2b08      	cmp	r3, #8
 80030a4:	f000 8171 	beq.w	800338a <Response_Gateway+0x47e>
            					break;
            				}
            				while(1)

            				{
            					for( i = 0; i < sizeof(receive_data1); i++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80030ae:	e01d      	b.n	80030ec <Response_Gateway+0x1e0>
 80030b0:	20000218 	.word	0x20000218
 80030b4:	20000348 	.word	0x20000348
 80030b8:	0800bdd8 	.word	0x0800bdd8
 80030bc:	40010c00 	.word	0x40010c00
 80030c0:	0800bde0 	.word	0x0800bde0
 80030c4:	0800bdf8 	.word	0x0800bdf8
 80030c8:	20000238 	.word	0x20000238
 80030cc:	0800bdfc 	.word	0x0800bdfc
 80030d0:	20000258 	.word	0x20000258
 80030d4:	0800be14 	.word	0x0800be14
								{
									 receive_data1[i] = 0;
 80030d8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80030dc:	4ab3      	ldr	r2, [pc, #716]	; (80033ac <Response_Gateway+0x4a0>)
 80030de:	2100      	movs	r1, #0
 80030e0:	54d1      	strb	r1, [r2, r3]
            					for( i = 0; i < sizeof(receive_data1); i++)
 80030e2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80030e6:	3301      	adds	r3, #1
 80030e8:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80030ec:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80030f0:	2b31      	cmp	r3, #49	; 0x31
 80030f2:	d9f1      	bls.n	80030d8 <Response_Gateway+0x1cc>
								}
            					LoRa_rxMode();
 80030f4:	f7ff feb0 	bl	8002e58 <LoRa_rxMode>
            					LoRa_receivePacket(receive_data1, 12000);
 80030f8:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 80030fc:	48ab      	ldr	r0, [pc, #684]	; (80033ac <Response_Gateway+0x4a0>)
 80030fe:	f7fe fa55 	bl	80015ac <LoRa_receivePacket>
            					if(!strcmp(receive_data1,"1"))
 8003102:	49ab      	ldr	r1, [pc, #684]	; (80033b0 <Response_Gateway+0x4a4>)
 8003104:	48a9      	ldr	r0, [pc, #676]	; (80033ac <Response_Gateway+0x4a0>)
 8003106:	f7fd f823 	bl	8000150 <strcmp>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	f040 8114 	bne.w	800333a <Response_Gateway+0x42e>
            					{
            						HAL_ADC_Start_IT(&hadc1);
 8003112:	48a8      	ldr	r0, [pc, #672]	; (80033b4 <Response_Gateway+0x4a8>)
 8003114:	f001 fcae 	bl	8004a74 <HAL_ADC_Start_IT>
            						KqTocdogio();
 8003118:	f000 f996 	bl	8003448 <KqTocdogio>
            						pin();
 800311c:	f7fe fed0 	bl	8001ec0 <pin>
            						kq_adxl();
 8003120:	f7ff fb1a 	bl	8002758 <kq_adxl>
            						kq_adxl1();
 8003124:	f7fe ff70 	bl	8002008 <kq_adxl1>
									//itoa(speed,control1,10);///////gio
									itoa(GTthuc,sensor,10);///////dat
 8003128:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <Response_Gateway+0x4ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	220a      	movs	r2, #10
 800312e:	49a3      	ldr	r1, [pc, #652]	; (80033bc <Response_Gateway+0x4b0>)
 8003130:	4618      	mov	r0, r3
 8003132:	f005 fb61 	bl	80087f8 <itoa>
									HAL_Delay(400);
 8003136:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800313a:	f001 fb9f 	bl	800487c <HAL_Delay>
									sprintf(send_data,"*%s!%s#%s$%.f&%.f %.f^%s@%d<%.f&%.f %.f^%d@",receive_data1,datagps1B,sensor,X,Y,Z,control1,giatri,XL,YL,ZL,warning );
 800313e:	4ba0      	ldr	r3, [pc, #640]	; (80033c0 <Response_Gateway+0x4b4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	4b9f      	ldr	r3, [pc, #636]	; (80033c4 <Response_Gateway+0x4b8>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd f977 	bl	800043c <__aeabi_f2d>
 800314e:	4682      	mov	sl, r0
 8003150:	468b      	mov	fp, r1
 8003152:	4b9d      	ldr	r3, [pc, #628]	; (80033c8 <Response_Gateway+0x4bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f970 	bl	800043c <__aeabi_f2d>
 800315c:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003160:	4b9a      	ldr	r3, [pc, #616]	; (80033cc <Response_Gateway+0x4c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd f969 	bl	800043c <__aeabi_f2d>
 800316a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800316e:	4b98      	ldr	r3, [pc, #608]	; (80033d0 <Response_Gateway+0x4c4>)
 8003170:	681e      	ldr	r6, [r3, #0]
 8003172:	4b98      	ldr	r3, [pc, #608]	; (80033d4 <Response_Gateway+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd f960 	bl	800043c <__aeabi_f2d>
 800317c:	e9c7 0100 	strd	r0, r1, [r7]
 8003180:	4b95      	ldr	r3, [pc, #596]	; (80033d8 <Response_Gateway+0x4cc>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fd f959 	bl	800043c <__aeabi_f2d>
 800318a:	4680      	mov	r8, r0
 800318c:	4689      	mov	r9, r1
 800318e:	4b93      	ldr	r3, [pc, #588]	; (80033dc <Response_Gateway+0x4d0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f952 	bl	800043c <__aeabi_f2d>
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
 800319c:	4b90      	ldr	r3, [pc, #576]	; (80033e0 <Response_Gateway+0x4d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f107 0020 	add.w	r0, r7, #32
 80031a4:	9310      	str	r3, [sp, #64]	; 0x40
 80031a6:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 80031aa:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80031ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031b6:	9609      	str	r6, [sp, #36]	; 0x24
 80031b8:	4b8a      	ldr	r3, [pc, #552]	; (80033e4 <Response_Gateway+0x4d8>)
 80031ba:	9308      	str	r3, [sp, #32]
 80031bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031cc:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80031d0:	4b7a      	ldr	r3, [pc, #488]	; (80033bc <Response_Gateway+0x4b0>)
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4a75      	ldr	r2, [pc, #468]	; (80033ac <Response_Gateway+0x4a0>)
 80031d8:	4983      	ldr	r1, [pc, #524]	; (80033e8 <Response_Gateway+0x4dc>)
 80031da:	f005 ff77 	bl	80090cc <siprintf>
									HAL_UART_Transmit(&huart1, (uint8_t *)"\n\rSend data node2:" ,20,10000);
 80031de:	f242 7310 	movw	r3, #10000	; 0x2710
 80031e2:	2214      	movs	r2, #20
 80031e4:	4981      	ldr	r1, [pc, #516]	; (80033ec <Response_Gateway+0x4e0>)
 80031e6:	4882      	ldr	r0, [pc, #520]	; (80033f0 <Response_Gateway+0x4e4>)
 80031e8:	f005 f955 	bl	8008496 <HAL_UART_Transmit>
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031f2:	4880      	ldr	r0, [pc, #512]	; (80033f4 <Response_Gateway+0x4e8>)
 80031f4:	f002 fab9 	bl	800576a <HAL_GPIO_WritePin>
									HAL_Delay(1000);
 80031f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031fc:	f001 fb3e 	bl	800487c <HAL_Delay>
									LoRa_txMode();
 8003200:	f7ff fe22 	bl	8002e48 <LoRa_txMode>
									LoRa_sendPacket(send_data);
 8003204:	f107 0320 	add.w	r3, r7, #32
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe f9b6 	bl	800157a <LoRa_sendPacket>
									if( X-xx>5 || Y-yy>5 )
 800320e:	4b6d      	ldr	r3, [pc, #436]	; (80033c4 <Response_Gateway+0x4b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a79      	ldr	r2, [pc, #484]	; (80033f8 <Response_Gateway+0x4ec>)
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd fc93 	bl	8000b44 <__aeabi_fsub>
 800321e:	4603      	mov	r3, r0
 8003220:	4976      	ldr	r1, [pc, #472]	; (80033fc <Response_Gateway+0x4f0>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd ff54 	bl	80010d0 <__aeabi_fcmpgt>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <Response_Gateway+0x342>
 800322e:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <Response_Gateway+0x4bc>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a73      	ldr	r2, [pc, #460]	; (8003400 <Response_Gateway+0x4f4>)
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fc83 	bl	8000b44 <__aeabi_fsub>
 800323e:	4603      	mov	r3, r0
 8003240:	496e      	ldr	r1, [pc, #440]	; (80033fc <Response_Gateway+0x4f0>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd ff44 	bl	80010d0 <__aeabi_fcmpgt>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <Response_Gateway+0x34e>
								    {
									  p++;
 800324e:	4b6d      	ldr	r3, [pc, #436]	; (8003404 <Response_Gateway+0x4f8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b6b      	ldr	r3, [pc, #428]	; (8003404 <Response_Gateway+0x4f8>)
 8003258:	701a      	strb	r2, [r3, #0]
									}
									if( X-xx<-5 || Y-yy<-5 )
 800325a:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <Response_Gateway+0x4b8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a66      	ldr	r2, [pc, #408]	; (80033f8 <Response_Gateway+0x4ec>)
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd fc6d 	bl	8000b44 <__aeabi_fsub>
 800326a:	4603      	mov	r3, r0
 800326c:	4966      	ldr	r1, [pc, #408]	; (8003408 <Response_Gateway+0x4fc>)
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd ff10 	bl	8001094 <__aeabi_fcmplt>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10f      	bne.n	800329a <Response_Gateway+0x38e>
 800327a:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <Response_Gateway+0x4bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a60      	ldr	r2, [pc, #384]	; (8003400 <Response_Gateway+0x4f4>)
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	4611      	mov	r1, r2
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fc5d 	bl	8000b44 <__aeabi_fsub>
 800328a:	4603      	mov	r3, r0
 800328c:	495e      	ldr	r1, [pc, #376]	; (8003408 <Response_Gateway+0x4fc>)
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd ff00 	bl	8001094 <__aeabi_fcmplt>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <Response_Gateway+0x39a>
									{
									  m++;
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <Response_Gateway+0x500>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3301      	adds	r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b5a      	ldr	r3, [pc, #360]	; (800340c <Response_Gateway+0x500>)
 80032a4:	701a      	strb	r2, [r3, #0]
									}
									HAL_UART_Transmit(&huart1, (uint8_t *)"\n\r", 3,1000);
 80032a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032aa:	2203      	movs	r2, #3
 80032ac:	4958      	ldr	r1, [pc, #352]	; (8003410 <Response_Gateway+0x504>)
 80032ae:	4850      	ldr	r0, [pc, #320]	; (80033f0 <Response_Gateway+0x4e4>)
 80032b0:	f005 f8f1 	bl	8008496 <HAL_UART_Transmit>
									HAL_UART_Transmit(&huart1, (uint8_t *)send_data,strlen(send_data),5000);
 80032b4:	f107 0320 	add.w	r3, r7, #32
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fc ff53 	bl	8000164 <strlen>
 80032be:	4603      	mov	r3, r0
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	f107 0120 	add.w	r1, r7, #32
 80032c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80032ca:	4849      	ldr	r0, [pc, #292]	; (80033f0 <Response_Gateway+0x4e4>)
 80032cc:	f005 f8e3 	bl	8008496 <HAL_UART_Transmit>
									for(i=0;i<sizeof(send_data);i++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80032d6:	e00c      	b.n	80032f2 <Response_Gateway+0x3e6>
									{
										send_data[i]=0;
 80032d8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80032dc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80032e0:	4413      	add	r3, r2
 80032e2:	2200      	movs	r2, #0
 80032e4:	f803 2c80 	strb.w	r2, [r3, #-128]
									for(i=0;i<sizeof(send_data);i++)
 80032e8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80032ec:	3301      	adds	r3, #1
 80032ee:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 80032f2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80032f6:	2b77      	cmp	r3, #119	; 0x77
 80032f8:	d9ee      	bls.n	80032d8 <Response_Gateway+0x3cc>
									}
									for(i=0;i<sizeof(sensor);i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8003300:	e009      	b.n	8003316 <Response_Gateway+0x40a>
									{
										sensor[i]=0;
 8003302:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003306:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <Response_Gateway+0x4b0>)
 8003308:	2100      	movs	r1, #0
 800330a:	54d1      	strb	r1, [r2, r3]
									for(i=0;i<sizeof(sensor);i++)
 800330c:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003310:	3301      	adds	r3, #1
 8003312:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8003316:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800331a:	2b09      	cmp	r3, #9
 800331c:	d9f1      	bls.n	8003302 <Response_Gateway+0x3f6>
									}
									HAL_Delay(500);
 800331e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003322:	f001 faab 	bl	800487c <HAL_Delay>
									t=0;
 8003326:	2300      	movs	r3, #0
 8003328:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800332c:	2201      	movs	r2, #1
 800332e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003332:	4830      	ldr	r0, [pc, #192]	; (80033f4 <Response_Gateway+0x4e8>)
 8003334:	f002 fa19 	bl	800576a <HAL_GPIO_WritePin>
									break;
 8003338:	e01c      	b.n	8003374 <Response_Gateway+0x468>
            					}
            					t++;
 800333a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800333e:	3301      	adds	r3, #1
 8003340:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
            					if(t==8)
 8003344:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003348:	2b08      	cmp	r3, #8
 800334a:	d012      	beq.n	8003372 <Response_Gateway+0x466>
            					{
            						break;
            					}
            					for( i = 0; i < sizeof(receive_data1); i++)
 800334c:	2300      	movs	r3, #0
 800334e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8003352:	e009      	b.n	8003368 <Response_Gateway+0x45c>
            					{
            					     receive_data1[i] = 0;
 8003354:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003358:	4a14      	ldr	r2, [pc, #80]	; (80033ac <Response_Gateway+0x4a0>)
 800335a:	2100      	movs	r1, #0
 800335c:	54d1      	strb	r1, [r2, r3]
            					for( i = 0; i < sizeof(receive_data1); i++)
 800335e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8003362:	3301      	adds	r3, #1
 8003364:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8003368:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800336c:	2b31      	cmp	r3, #49	; 0x31
 800336e:	d9f1      	bls.n	8003354 <Response_Gateway+0x448>
            					for( i = 0; i < sizeof(receive_data1); i++)
 8003370:	e69a      	b.n	80030a8 <Response_Gateway+0x19c>
            						break;
 8003372:	bf00      	nop
            			for( k=0;k<5;k++)
 8003374:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003378:	3301      	adds	r3, #1
 800337a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800337e:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003382:	2b04      	cmp	r3, #4
 8003384:	f67f ae8b 	bls.w	800309e <Response_Gateway+0x192>
 8003388:	e000      	b.n	800338c <Response_Gateway+0x480>
            					break;
 800338a:	bf00      	nop

            				}


            			}
            			LoRa_txMode();
 800338c:	f7ff fd5c 	bl	8002e48 <LoRa_txMode>
            			HAL_TIM_Base_Stop_IT(&htim1);
 8003390:	4820      	ldr	r0, [pc, #128]	; (8003414 <Response_Gateway+0x508>)
 8003392:	f004 fcad 	bl	8007cf0 <HAL_TIM_Base_Stop_IT>
            			HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8003396:	2009      	movs	r0, #9
 8003398:	f001 ffbb 	bl	8005312 <HAL_NVIC_DisableIRQ>
//            			RTC_SetTime(9, 9, 0, 20, 3, 21);
//            			sleep_1p();
            			HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800339c:	2009      	movs	r0, #9
 800339e:	f001 ffaa 	bl	80052f6 <HAL_NVIC_EnableIRQ>
            			break;
 80033a2:	e049      	b.n	8003438 <Response_Gateway+0x52c>
            		}
            		for( q = 0; q < sizeof(receive_data); q++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 80033aa:	e03f      	b.n	800342c <Response_Gateway+0x520>
 80033ac:	2000028c 	.word	0x2000028c
 80033b0:	0800be20 	.word	0x0800be20
 80033b4:	200004e0 	.word	0x200004e0
 80033b8:	200003f0 	.word	0x200003f0
 80033bc:	20000784 	.word	0x20000784
 80033c0:	2000032c 	.word	0x2000032c
 80033c4:	200007f4 	.word	0x200007f4
 80033c8:	200004b8 	.word	0x200004b8
 80033cc:	20000648 	.word	0x20000648
 80033d0:	200005d4 	.word	0x200005d4
 80033d4:	20000530 	.word	0x20000530
 80033d8:	200007e0 	.word	0x200007e0
 80033dc:	20000528 	.word	0x20000528
 80033e0:	20000790 	.word	0x20000790
 80033e4:	200004d8 	.word	0x200004d8
 80033e8:	0800be24 	.word	0x0800be24
 80033ec:	0800be50 	.word	0x0800be50
 80033f0:	20000348 	.word	0x20000348
 80033f4:	40010c00 	.word	0x40010c00
 80033f8:	20000520 	.word	0x20000520
 80033fc:	40a00000 	.word	0x40a00000
 8003400:	20000640 	.word	0x20000640
 8003404:	200002be 	.word	0x200002be
 8003408:	c0a00000 	.word	0xc0a00000
 800340c:	200002bf 	.word	0x200002bf
 8003410:	0800be64 	.word	0x0800be64
 8003414:	20000534 	.word	0x20000534
            		{
            			receive_data[q] = 0;
 8003418:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 800341c:	4a09      	ldr	r2, [pc, #36]	; (8003444 <Response_Gateway+0x538>)
 800341e:	2100      	movs	r1, #0
 8003420:	54d1      	strb	r1, [r2, r3]
            		for( q = 0; q < sizeof(receive_data); q++)
 8003422:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003426:	3301      	adds	r3, #1
 8003428:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 800342c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8003430:	2b31      	cmp	r3, #49	; 0x31
 8003432:	d9f1      	bls.n	8003418 <Response_Gateway+0x50c>
            		for( q = 0; q < sizeof(receive_data); q++)
 8003434:	e606      	b.n	8003044 <Response_Gateway+0x138>
            			break;
 8003436:	bf00      	nop

            	}
            }
        }

}
 8003438:	bf00      	nop
 800343a:	37a4      	adds	r7, #164	; 0xa4
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	20000258 	.word	0x20000258

08003448 <KqTocdogio>:
////////////////////	WIND	//////////////////
void KqTocdogio()
  {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart1,(uint8_t*)"toc do gio: ",14,10000);
 800344c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003450:	220e      	movs	r2, #14
 8003452:	4915      	ldr	r1, [pc, #84]	; (80034a8 <KqTocdogio+0x60>)
 8003454:	4815      	ldr	r0, [pc, #84]	; (80034ac <KqTocdogio+0x64>)
 8003456:	f005 f81e 	bl	8008496 <HAL_UART_Transmit>
	  itoa(speed,control1,10);
 800345a:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <KqTocdogio+0x68>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fe40 	bl	80010e4 <__aeabi_f2iz>
 8003464:	4603      	mov	r3, r0
 8003466:	220a      	movs	r2, #10
 8003468:	4912      	ldr	r1, [pc, #72]	; (80034b4 <KqTocdogio+0x6c>)
 800346a:	4618      	mov	r0, r3
 800346c:	f005 f9c4 	bl	80087f8 <itoa>
	  HAL_UART_Transmit(&huart1,(uint8_t*)control1,4,10000);
 8003470:	f242 7310 	movw	r3, #10000	; 0x2710
 8003474:	2204      	movs	r2, #4
 8003476:	490f      	ldr	r1, [pc, #60]	; (80034b4 <KqTocdogio+0x6c>)
 8003478:	480c      	ldr	r0, [pc, #48]	; (80034ac <KqTocdogio+0x64>)
 800347a:	f005 f80c 	bl	8008496 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)"km/h ",6,10000);
 800347e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003482:	2206      	movs	r2, #6
 8003484:	490c      	ldr	r1, [pc, #48]	; (80034b8 <KqTocdogio+0x70>)
 8003486:	4809      	ldr	r0, [pc, #36]	; (80034ac <KqTocdogio+0x64>)
 8003488:	f005 f805 	bl	8008496 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r ",2,10000);
 800348c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003490:	2202      	movs	r2, #2
 8003492:	490a      	ldr	r1, [pc, #40]	; (80034bc <KqTocdogio+0x74>)
 8003494:	4805      	ldr	r0, [pc, #20]	; (80034ac <KqTocdogio+0x64>)
 8003496:	f004 fffe 	bl	8008496 <HAL_UART_Transmit>
	  HAL_Delay(999);
 800349a:	f240 30e7 	movw	r0, #999	; 0x3e7
 800349e:	f001 f9ed 	bl	800487c <HAL_Delay>
  }
 80034a2:	bf00      	nop
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	0800be68 	.word	0x0800be68
 80034ac:	20000348 	.word	0x20000348
 80034b0:	200006b4 	.word	0x200006b4
 80034b4:	200004d8 	.word	0x200004d8
 80034b8:	0800be78 	.word	0x0800be78
 80034bc:	0800be80 	.word	0x0800be80

080034c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034c4:	b092      	sub	sp, #72	; 0x48
 80034c6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034c8:	f001 f976 	bl	80047b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034cc:	f000 f936 	bl	800373c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034d0:	f000 fafa 	bl	8003ac8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80034d4:	f000 f982 	bl	80037dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80034d8:	f000 f9be 	bl	8003858 <MX_I2C1_Init>
  MX_I2C2_Init();
 80034dc:	f000 f9ea 	bl	80038b4 <MX_I2C2_Init>
  MX_SPI1_Init();
 80034e0:	f000 fa16 	bl	8003910 <MX_SPI1_Init>
  MX_TIM1_Init();
 80034e4:	f000 fa4a 	bl	800397c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80034e8:	f000 fa9a 	bl	8003a20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80034ec:	f000 fac2 	bl	8003a74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
 // kqgps();
  max17043_init();
 80034f0:	f7fe fcd2 	bl	8001e98 <max17043_init>
  for(uint8_t i=0;i<strlen(datagps);i++)
 80034f4:	2300      	movs	r3, #0
 80034f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034fa:	e00c      	b.n	8003516 <main+0x56>
  {
  	datagps1[i]=datagps[i];
 80034fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003500:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003504:	4972      	ldr	r1, [pc, #456]	; (80036d0 <main+0x210>)
 8003506:	5c89      	ldrb	r1, [r1, r2]
 8003508:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <main+0x214>)
 800350a:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i=0;i<strlen(datagps);i++)
 800350c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003510:	3301      	adds	r3, #1
 8003512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003516:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800351a:	486d      	ldr	r0, [pc, #436]	; (80036d0 <main+0x210>)
 800351c:	f7fc fe22 	bl	8000164 <strlen>
 8003520:	4603      	mov	r3, r0
 8003522:	429c      	cmp	r4, r3
 8003524:	d3ea      	bcc.n	80034fc <main+0x3c>
  }
  adxl_init1();
 8003526:	f7fe fd5b 	bl	8001fe0 <adxl_init1>
  adxl_init();
 800352a:	f7ff f8ff 	bl	800272c <adxl_init>
  if(!LoRa_Init(434E6))
 800352e:	486a      	ldr	r0, [pc, #424]	; (80036d8 <main+0x218>)
 8003530:	f7fd ff7a 	bl	8001428 <LoRa_Init>
 8003534:	4603      	mov	r3, r0
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d011      	beq.n	8003564 <main+0xa4>
   {
 	  char str[] = "\n\rLoRa init failed\n\r";
 8003540:	4b66      	ldr	r3, [pc, #408]	; (80036dc <main+0x21c>)
 8003542:	463c      	mov	r4, r7
 8003544:	461d      	mov	r5, r3
 8003546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800354a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800354e:	6020      	str	r0, [r4, #0]
 8003550:	3404      	adds	r4, #4
 8003552:	7021      	strb	r1, [r4, #0]
 	  HAL_UART_Transmit(&huart1 , (uint8_t*)str, sizeof(str), 1000);
 8003554:	4639      	mov	r1, r7
 8003556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800355a:	2215      	movs	r2, #21
 800355c:	4860      	ldr	r0, [pc, #384]	; (80036e0 <main+0x220>)
 800355e:	f004 ff9a 	bl	8008496 <HAL_UART_Transmit>
       while(1);
 8003562:	e7fe      	b.n	8003562 <main+0xa2>
   }
	LoRa_setSignalBandwidth(125E3);
 8003564:	485f      	ldr	r0, [pc, #380]	; (80036e4 <main+0x224>)
 8003566:	f7fe fa19 	bl	800199c <LoRa_setSignalBandwidth>
	LoRa_setSpreadingFactor(8);
 800356a:	2008      	movs	r0, #8
 800356c:	f7fe f98e 	bl	800188c <LoRa_setSpreadingFactor>
	LoRa_setPreambleLength(8);
 8003570:	2008      	movs	r0, #8
 8003572:	f7fe facf 	bl	8001b14 <LoRa_setPreambleLength>
	LoRa_setCodingRate4(5);
 8003576:	2005      	movs	r0, #5
 8003578:	f7fe faa4 	bl	8001ac4 <LoRa_setCodingRate4>
	LoRa_enableCrc();
 800357c:	f7fe fadf 	bl	8001b3e <LoRa_enableCrc>
   char str[] = "\n\rLoRa Node init succeeded\n\r";
 8003580:	4b59      	ldr	r3, [pc, #356]	; (80036e8 <main+0x228>)
 8003582:	f107 0418 	add.w	r4, r7, #24
 8003586:	461d      	mov	r5, r3
 8003588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800358c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003590:	c407      	stmia	r4!, {r0, r1, r2}
 8003592:	7023      	strb	r3, [r4, #0]
   HAL_UART_Transmit(&huart1 , (uint8_t*)str, sizeof(str), 1000);
 8003594:	f107 0118 	add.w	r1, r7, #24
 8003598:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359c:	221d      	movs	r2, #29
 800359e:	4850      	ldr	r0, [pc, #320]	; (80036e0 <main+0x220>)
 80035a0:	f004 ff79 	bl	8008496 <HAL_UART_Transmit>
   LoRa_rxMode();
 80035a4:	f7ff fc58 	bl	8002e58 <LoRa_rxMode>
  /* USER CODE BEGIN WHILE */




   for(uint8_t a=0;a<3;a++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80035ae:	e084      	b.n	80036ba <main+0x1fa>
   {
	   kq_adxl();
 80035b0:	f7ff f8d2 	bl	8002758 <kq_adxl>
	   kq_adxl1();
 80035b4:	f7fe fd28 	bl	8002008 <kq_adxl1>
	   xxL=XL;
 80035b8:	4b4c      	ldr	r3, [pc, #304]	; (80036ec <main+0x22c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a4c      	ldr	r2, [pc, #304]	; (80036f0 <main+0x230>)
 80035be:	6013      	str	r3, [r2, #0]
	   yyL=YL;
 80035c0:	4b4c      	ldr	r3, [pc, #304]	; (80036f4 <main+0x234>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a4c      	ldr	r2, [pc, #304]	; (80036f8 <main+0x238>)
 80035c6:	6013      	str	r3, [r2, #0]
	   zzL=ZL;
 80035c8:	4b4c      	ldr	r3, [pc, #304]	; (80036fc <main+0x23c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a4c      	ldr	r2, [pc, #304]	; (8003700 <main+0x240>)
 80035ce:	6013      	str	r3, [r2, #0]
	   xx=X;
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <main+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a4c      	ldr	r2, [pc, #304]	; (8003708 <main+0x248>)
 80035d6:	6013      	str	r3, [r2, #0]
	   yy=Y;
 80035d8:	4b4c      	ldr	r3, [pc, #304]	; (800370c <main+0x24c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <main+0x250>)
 80035de:	6013      	str	r3, [r2, #0]
	   zz=Z;
 80035e0:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <main+0x254>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	; (8003718 <main+0x258>)
 80035e6:	6013      	str	r3, [r2, #0]
	   sprintf(buffergn,"\r\n XH=%.4f YH=%.4f  ZH=%.4f \r\n ",X, Y,Z );
 80035e8:	4b46      	ldr	r3, [pc, #280]	; (8003704 <main+0x244>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ff25 	bl	800043c <__aeabi_f2d>
 80035f2:	4680      	mov	r8, r0
 80035f4:	4689      	mov	r9, r1
 80035f6:	4b45      	ldr	r3, [pc, #276]	; (800370c <main+0x24c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fc ff1e 	bl	800043c <__aeabi_f2d>
 8003600:	4604      	mov	r4, r0
 8003602:	460d      	mov	r5, r1
 8003604:	4b43      	ldr	r3, [pc, #268]	; (8003714 <main+0x254>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f7fc ff17 	bl	800043c <__aeabi_f2d>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003616:	e9cd 4500 	strd	r4, r5, [sp]
 800361a:	4642      	mov	r2, r8
 800361c:	464b      	mov	r3, r9
 800361e:	493f      	ldr	r1, [pc, #252]	; (800371c <main+0x25c>)
 8003620:	483f      	ldr	r0, [pc, #252]	; (8003720 <main+0x260>)
 8003622:	f005 fd53 	bl	80090cc <siprintf>
	   sprintf(buffergn1,"\r\n XL=%.4f YL=%.4f  ZL=%.4f \r\n ",XL, YL,ZL );
 8003626:	4b31      	ldr	r3, [pc, #196]	; (80036ec <main+0x22c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff06 	bl	800043c <__aeabi_f2d>
 8003630:	4680      	mov	r8, r0
 8003632:	4689      	mov	r9, r1
 8003634:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <main+0x234>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc feff 	bl	800043c <__aeabi_f2d>
 800363e:	4604      	mov	r4, r0
 8003640:	460d      	mov	r5, r1
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <main+0x23c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f7fc fef8 	bl	800043c <__aeabi_f2d>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003654:	e9cd 4500 	strd	r4, r5, [sp]
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	4931      	ldr	r1, [pc, #196]	; (8003724 <main+0x264>)
 800365e:	4832      	ldr	r0, [pc, #200]	; (8003728 <main+0x268>)
 8003660:	f005 fd34 	bl	80090cc <siprintf>
	   HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn, strlen(buffergn), 100);
 8003664:	482e      	ldr	r0, [pc, #184]	; (8003720 <main+0x260>)
 8003666:	f7fc fd7d 	bl	8000164 <strlen>
 800366a:	4603      	mov	r3, r0
 800366c:	b29a      	uxth	r2, r3
 800366e:	2364      	movs	r3, #100	; 0x64
 8003670:	492b      	ldr	r1, [pc, #172]	; (8003720 <main+0x260>)
 8003672:	481b      	ldr	r0, [pc, #108]	; (80036e0 <main+0x220>)
 8003674:	f004 ff0f 	bl	8008496 <HAL_UART_Transmit>
	   HAL_UART_Transmit(&huart1 , (uint8_t *)buffergn1, strlen(buffergn1), 100);
 8003678:	482b      	ldr	r0, [pc, #172]	; (8003728 <main+0x268>)
 800367a:	f7fc fd73 	bl	8000164 <strlen>
 800367e:	4603      	mov	r3, r0
 8003680:	b29a      	uxth	r2, r3
 8003682:	2364      	movs	r3, #100	; 0x64
 8003684:	4928      	ldr	r1, [pc, #160]	; (8003728 <main+0x268>)
 8003686:	4816      	ldr	r0, [pc, #88]	; (80036e0 <main+0x220>)
 8003688:	f004 ff05 	bl	8008496 <HAL_UART_Transmit>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800368c:	2201      	movs	r2, #1
 800368e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003692:	4826      	ldr	r0, [pc, #152]	; (800372c <main+0x26c>)
 8003694:	f002 f869 	bl	800576a <HAL_GPIO_WritePin>
	   HAL_Delay(200);
 8003698:	20c8      	movs	r0, #200	; 0xc8
 800369a:	f001 f8ef 	bl	800487c <HAL_Delay>
	   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
 80036a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036a4:	4821      	ldr	r0, [pc, #132]	; (800372c <main+0x26c>)
 80036a6:	f002 f860 	bl	800576a <HAL_GPIO_WritePin>
	   datagps1B = "10546.8284>1002.8274";
 80036aa:	4b21      	ldr	r3, [pc, #132]	; (8003730 <main+0x270>)
 80036ac:	4a21      	ldr	r2, [pc, #132]	; (8003734 <main+0x274>)
 80036ae:	601a      	str	r2, [r3, #0]
   for(uint8_t a=0;a<3;a++)
 80036b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80036b4:	3301      	adds	r3, #1
 80036b6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80036ba:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80036be:	2b02      	cmp	r3, #2
 80036c0:	f67f af76 	bls.w	80035b0 <main+0xf0>
   }

  while (1)
  {
	  HAL_TIM_Base_Start_IT(&htim1);
 80036c4:	481c      	ldr	r0, [pc, #112]	; (8003738 <main+0x278>)
 80036c6:	f004 fac1 	bl	8007c4c <HAL_TIM_Base_Start_IT>
	  Response_Gateway();
 80036ca:	f7ff fc1f 	bl	8002f0c <Response_Gateway>
	  HAL_TIM_Base_Start_IT(&htim1);
 80036ce:	e7f9      	b.n	80036c4 <main+0x204>
 80036d0:	200002c4 	.word	0x200002c4
 80036d4:	200002f8 	.word	0x200002f8
 80036d8:	19de5080 	.word	0x19de5080
 80036dc:	0800bed4 	.word	0x0800bed4
 80036e0:	20000348 	.word	0x20000348
 80036e4:	0001e848 	.word	0x0001e848
 80036e8:	0800beec 	.word	0x0800beec
 80036ec:	20000530 	.word	0x20000530
 80036f0:	200004b0 	.word	0x200004b0
 80036f4:	200007e0 	.word	0x200007e0
 80036f8:	20000518 	.word	0x20000518
 80036fc:	20000528 	.word	0x20000528
 8003700:	20000644 	.word	0x20000644
 8003704:	200007f4 	.word	0x200007f4
 8003708:	20000520 	.word	0x20000520
 800370c:	200004b8 	.word	0x200004b8
 8003710:	20000640 	.word	0x20000640
 8003714:	20000648 	.word	0x20000648
 8003718:	20000580 	.word	0x20000580
 800371c:	0800be9c 	.word	0x0800be9c
 8003720:	200005dc 	.word	0x200005dc
 8003724:	0800bd94 	.word	0x0800bd94
 8003728:	2000064c 	.word	0x2000064c
 800372c:	40010c00 	.word	0x40010c00
 8003730:	2000032c 	.word	0x2000032c
 8003734:	0800bebc 	.word	0x0800bebc
 8003738:	20000534 	.word	0x20000534

0800373c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b094      	sub	sp, #80	; 0x50
 8003740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003746:	2228      	movs	r2, #40	; 0x28
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f005 f856 	bl	80087fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800376c:	2302      	movs	r3, #2
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003770:	2301      	movs	r3, #1
 8003772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003774:	2310      	movs	r3, #16
 8003776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003778:	2300      	movs	r3, #0
 800377a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800377c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003780:	4618      	mov	r0, r3
 8003782:	f003 f82b 	bl	80067dc <HAL_RCC_OscConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800378c:	f000 fce2 	bl	8004154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003790:	230f      	movs	r3, #15
 8003792:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037a0:	2300      	movs	r3, #0
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fa96 	bl	8006cdc <HAL_RCC_ClockConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80037b6:	f000 fccd 	bl	8004154 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037ba:	2302      	movs	r3, #2
 80037bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 fc23 	bl	8007010 <HAL_RCCEx_PeriphCLKConfig>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80037d0:	f000 fcc0 	bl	8004154 <Error_Handler>
  }
}
 80037d4:	bf00      	nop
 80037d6:	3750      	adds	r7, #80	; 0x50
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80037e2:	1d3b      	adds	r3, r7, #4
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <MX_ADC1_Init+0x74>)
 80037ee:	4a19      	ldr	r2, [pc, #100]	; (8003854 <MX_ADC1_Init+0x78>)
 80037f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037f2:	4b17      	ldr	r3, [pc, #92]	; (8003850 <MX_ADC1_Init+0x74>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <MX_ADC1_Init+0x74>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037fe:	4b14      	ldr	r3, [pc, #80]	; (8003850 <MX_ADC1_Init+0x74>)
 8003800:	2200      	movs	r2, #0
 8003802:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <MX_ADC1_Init+0x74>)
 8003806:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800380a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800380c:	4b10      	ldr	r3, [pc, #64]	; (8003850 <MX_ADC1_Init+0x74>)
 800380e:	2200      	movs	r2, #0
 8003810:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <MX_ADC1_Init+0x74>)
 8003814:	2201      	movs	r2, #1
 8003816:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <MX_ADC1_Init+0x74>)
 800381a:	f001 f853 	bl	80048c4 <HAL_ADC_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003824:	f000 fc96 	bl	8004154 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003828:	2301      	movs	r3, #1
 800382a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800382c:	2301      	movs	r3, #1
 800382e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_ADC1_Init+0x74>)
 800383a:	f001 faa9 	bl	8004d90 <HAL_ADC_ConfigChannel>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003844:	f000 fc86 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200004e0 	.word	0x200004e0
 8003854:	40012400 	.word	0x40012400

08003858 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <MX_I2C1_Init+0x50>)
 800385e:	4a13      	ldr	r2, [pc, #76]	; (80038ac <MX_I2C1_Init+0x54>)
 8003860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003864:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <MX_I2C1_Init+0x58>)
 8003866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <MX_I2C1_Init+0x50>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003870:	2200      	movs	r2, #0
 8003872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800387a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <MX_I2C1_Init+0x50>)
 800387e:	2200      	movs	r2, #0
 8003880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <MX_I2C1_Init+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003894:	4804      	ldr	r0, [pc, #16]	; (80038a8 <MX_I2C1_Init+0x50>)
 8003896:	f001 ff99 	bl	80057cc <HAL_I2C_Init>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038a0:	f000 fc58 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038a4:	bf00      	nop
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000408 	.word	0x20000408
 80038ac:	40005400 	.word	0x40005400
 80038b0:	00061a80 	.word	0x00061a80

080038b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <MX_I2C2_Init+0x50>)
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <MX_I2C2_Init+0x54>)
 80038bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80038be:	4b11      	ldr	r3, [pc, #68]	; (8003904 <MX_I2C2_Init+0x50>)
 80038c0:	4a12      	ldr	r2, [pc, #72]	; (800390c <MX_I2C2_Init+0x58>)
 80038c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <MX_I2C2_Init+0x50>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <MX_I2C2_Init+0x50>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_I2C2_Init+0x50>)
 80038d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <MX_I2C2_Init+0x50>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_I2C2_Init+0x50>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <MX_I2C2_Init+0x50>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_I2C2_Init+0x50>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <MX_I2C2_Init+0x50>)
 80038f2:	f001 ff6b 	bl	80057cc <HAL_I2C_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80038fc:	f000 fc2a 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	2000045c 	.word	0x2000045c
 8003908:	40005800 	.word	0x40005800
 800390c:	00061a80 	.word	0x00061a80

08003910 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_SPI1_Init+0x64>)
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <MX_SPI1_Init+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_SPI1_Init+0x64>)
 800391c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003920:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <MX_SPI1_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <MX_SPI1_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_SPI1_Init+0x64>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <MX_SPI1_Init+0x64>)
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_SPI1_Init+0x64>)
 800393c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003940:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_SPI1_Init+0x64>)
 8003944:	2200      	movs	r2, #0
 8003946:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <MX_SPI1_Init+0x64>)
 800394a:	2200      	movs	r2, #0
 800394c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_SPI1_Init+0x64>)
 8003950:	2200      	movs	r2, #0
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <MX_SPI1_Init+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_SPI1_Init+0x64>)
 800395c:	220a      	movs	r2, #10
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003960:	4804      	ldr	r0, [pc, #16]	; (8003974 <MX_SPI1_Init+0x64>)
 8003962:	f003 fc0b 	bl	800717c <HAL_SPI_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800396c:	f000 fbf2 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	2000038c 	.word	0x2000038c
 8003978:	40013000 	.word	0x40013000

0800397c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003990:	463b      	mov	r3, r7
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003998:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <MX_TIM1_Init+0x9c>)
 800399a:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <MX_TIM1_Init+0xa0>)
 800399c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8000-1;
 800399e:	4b1e      	ldr	r3, [pc, #120]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80039a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a6:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80039ac:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b4:	4b18      	ldr	r3, [pc, #96]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039ba:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80039c6:	4814      	ldr	r0, [pc, #80]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039c8:	f004 f8f0 	bl	8007bac <HAL_TIM_Base_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80039d2:	f000 fbbf 	bl	8004154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	4619      	mov	r1, r3
 80039e2:	480d      	ldr	r0, [pc, #52]	; (8003a18 <MX_TIM1_Init+0x9c>)
 80039e4:	f004 faba 	bl	8007f5c <HAL_TIM_ConfigClockSource>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80039ee:	f000 fbb1 	bl	8004154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039fa:	463b      	mov	r3, r7
 80039fc:	4619      	mov	r1, r3
 80039fe:	4806      	ldr	r0, [pc, #24]	; (8003a18 <MX_TIM1_Init+0x9c>)
 8003a00:	f004 fc8c 	bl	800831c <HAL_TIMEx_MasterConfigSynchronization>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003a0a:	f000 fba3 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000534 	.word	0x20000534
 8003a1c:	40012c00 	.word	0x40012c00

08003a20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <MX_USART1_UART_Init+0x50>)
 8003a28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a46:	220c      	movs	r2, #12
 8003a48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <MX_USART1_UART_Init+0x4c>)
 8003a58:	f004 fcd0 	bl	80083fc <HAL_UART_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a62:	f000 fb77 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000348 	.word	0x20000348
 8003a70:	40013800 	.word	0x40013800

08003a74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <MX_USART2_UART_Init+0x50>)
 8003a7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a80:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a86:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a92:	4b0b      	ldr	r3, [pc, #44]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9e:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aaa:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <MX_USART2_UART_Init+0x4c>)
 8003aac:	f004 fca6 	bl	80083fc <HAL_UART_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ab6:	f000 fb4d 	bl	8004154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000794 	.word	0x20000794
 8003ac4:	40004400 	.word	0x40004400

08003ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ace:	f107 0310 	add.w	r3, r7, #16
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	605a      	str	r2, [r3, #4]
 8003ad8:	609a      	str	r2, [r3, #8]
 8003ada:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003adc:	4b4e      	ldr	r3, [pc, #312]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003ae2:	f043 0310 	orr.w	r3, r3, #16
 8003ae6:	6193      	str	r3, [r2, #24]
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	60fb      	str	r3, [r7, #12]
 8003af2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af4:	4b48      	ldr	r3, [pc, #288]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	4a47      	ldr	r2, [pc, #284]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	6193      	str	r3, [r2, #24]
 8003b00:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0c:	4b42      	ldr	r3, [pc, #264]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	4a41      	ldr	r2, [pc, #260]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	6193      	str	r3, [r2, #24]
 8003b18:	4b3f      	ldr	r3, [pc, #252]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	607b      	str	r3, [r7, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b24:	4b3c      	ldr	r3, [pc, #240]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b2a:	f043 0308 	orr.w	r3, r3, #8
 8003b2e:	6193      	str	r3, [r2, #24]
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <MX_GPIO_Init+0x150>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b42:	4836      	ldr	r0, [pc, #216]	; (8003c1c <MX_GPIO_Init+0x154>)
 8003b44:	f001 fe11 	bl	800576a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8003b48:	2201      	movs	r2, #1
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	4834      	ldr	r0, [pc, #208]	; (8003c20 <MX_GPIO_Init+0x158>)
 8003b4e:	f001 fe0c 	bl	800576a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|GPIO_PIN_13, GPIO_PIN_SET);
 8003b52:	2201      	movs	r2, #1
 8003b54:	f242 0102 	movw	r1, #8194	; 0x2002
 8003b58:	4832      	ldr	r0, [pc, #200]	; (8003c24 <MX_GPIO_Init+0x15c>)
 8003b5a:	f001 fe06 	bl	800576a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2110      	movs	r1, #16
 8003b62:	4830      	ldr	r0, [pc, #192]	; (8003c24 <MX_GPIO_Init+0x15c>)
 8003b64:	f001 fe01 	bl	800576a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	f107 0310 	add.w	r3, r7, #16
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4826      	ldr	r0, [pc, #152]	; (8003c1c <MX_GPIO_Init+0x154>)
 8003b82:	f001 fc57 	bl	8005434 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8003b86:	2310      	movs	r3, #16
 8003b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2302      	movs	r3, #2
 8003b94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8003b96:	f107 0310 	add.w	r3, r7, #16
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4820      	ldr	r0, [pc, #128]	; (8003c20 <MX_GPIO_Init+0x158>)
 8003b9e:	f001 fc49 	bl	8005434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <MX_GPIO_Init+0x160>)
 8003ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8003bae:	f107 0310 	add.w	r3, r7, #16
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	481b      	ldr	r0, [pc, #108]	; (8003c24 <MX_GPIO_Init+0x15c>)
 8003bb6:	f001 fc3d 	bl	8005434 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_Pin PB13 PB4 */
  GPIO_InitStruct.Pin = RESET_Pin|GPIO_PIN_13|GPIO_PIN_4;
 8003bba:	f242 0312 	movw	r3, #8210	; 0x2012
 8003bbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bcc:	f107 0310 	add.w	r3, r7, #16
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4814      	ldr	r0, [pc, #80]	; (8003c24 <MX_GPIO_Init+0x15c>)
 8003bd4:	f001 fc2e 	bl	8005434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bd8:	2308      	movs	r3, #8
 8003bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <MX_GPIO_Init+0x160>)
 8003bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be0:	2301      	movs	r3, #1
 8003be2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003be4:	f107 0310 	add.w	r3, r7, #16
 8003be8:	4619      	mov	r1, r3
 8003bea:	480e      	ldr	r0, [pc, #56]	; (8003c24 <MX_GPIO_Init+0x15c>)
 8003bec:	f001 fc22 	bl	8005434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	2006      	movs	r0, #6
 8003bf6:	f001 fb62 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003bfa:	2006      	movs	r0, #6
 8003bfc:	f001 fb7b 	bl	80052f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2009      	movs	r0, #9
 8003c06:	f001 fb5a 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003c0a:	2009      	movs	r0, #9
 8003c0c:	f001 fb73 	bl	80052f6 <HAL_NVIC_EnableIRQ>

}
 8003c10:	bf00      	nop
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	40010800 	.word	0x40010800
 8003c24:	40010c00 	.word	0x40010c00
 8003c28:	10110000 	.word	0x10110000

08003c2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DIO0_Pin)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_GPIO_EXTI_Callback+0x14>
	 {
		LoRa_handleDio0Rise();
 8003c3c:	f7fe f812 	bl	8001c64 <LoRa_handleDio0Rise>
	 }
	if(GPIO_Pin==GPIO_PIN_3)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d104      	bne.n	8003c50 <HAL_GPIO_EXTI_Callback+0x24>
		count++;
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a02      	ldr	r2, [pc, #8]	; (8003c58 <HAL_GPIO_EXTI_Callback+0x2c>)
 8003c4e:	6013      	str	r3, [r2, #0]
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	20000214 	.word	0x20000214

08003c5c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
  {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	  if(hadc->Instance==ADC1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_ADC_ConvCpltCallback+0xe0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d162      	bne.n	8003d34 <HAL_ADC_ConvCpltCallback+0xd8>
	  {
		  adc_value=HAL_ADC_GetValue(&hadc1);
 8003c6e:	4834      	ldr	r0, [pc, #208]	; (8003d40 <HAL_ADC_ConvCpltCallback+0xe4>)
 8003c70:	f000 ffb6 	bl	8004be0 <HAL_ADC_GetValue>
 8003c74:	4603      	mov	r3, r0
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003c7a:	801a      	strh	r2, [r3, #0]
		  b=adc_value;
 8003c7c:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <HAL_ADC_ConvCpltCallback+0xe8>)
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fd f811 	bl	8000ca8 <__aeabi_ui2f>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4a2f      	ldr	r2, [pc, #188]	; (8003d48 <HAL_ADC_ConvCpltCallback+0xec>)
 8003c8a:	6013      	str	r3, [r2, #0]
		  GTao=(b/4096)*100;
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	; (8003d48 <HAL_ADC_ConvCpltCallback+0xec>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd f913 	bl	8000ec0 <__aeabi_fdiv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	492b      	ldr	r1, [pc, #172]	; (8003d4c <HAL_ADC_ConvCpltCallback+0xf0>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd f85a 	bl	8000d58 <__aeabi_fmul>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b29      	ldr	r3, [pc, #164]	; (8003d50 <HAL_ADC_ConvCpltCallback+0xf4>)
 8003caa:	601a      	str	r2, [r3, #0]
		  GTthuc=100-GTao;
 8003cac:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_ADC_ConvCpltCallback+0xf4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4826      	ldr	r0, [pc, #152]	; (8003d4c <HAL_ADC_ConvCpltCallback+0xf0>)
 8003cb4:	f7fc ff46 	bl	8000b44 <__aeabi_fsub>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fd fa12 	bl	80010e4 <__aeabi_f2iz>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a24      	ldr	r2, [pc, #144]	; (8003d54 <HAL_ADC_ConvCpltCallback+0xf8>)
 8003cc4:	6013      	str	r3, [r2, #0]
		  if(GTthuc<5)
 8003cc6:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_ADC_ConvCpltCallback+0xf8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	dc02      	bgt.n	8003cd4 <HAL_ADC_ConvCpltCallback+0x78>
		  {
			  GTthuc=0;
 8003cce:	4b21      	ldr	r3, [pc, #132]	; (8003d54 <HAL_ADC_ConvCpltCallback+0xf8>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
		  }
		  HAL_UART_Transmit(&huart1,(uint8_t*)"HUMI:", 6,1000);
 8003cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd8:	2206      	movs	r2, #6
 8003cda:	491f      	ldr	r1, [pc, #124]	; (8003d58 <HAL_ADC_ConvCpltCallback+0xfc>)
 8003cdc:	481f      	ldr	r0, [pc, #124]	; (8003d5c <HAL_ADC_ConvCpltCallback+0x100>)
 8003cde:	f004 fbda 	bl	8008496 <HAL_UART_Transmit>
		  sprintf(sensor,"%d",GTthuc);
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <HAL_ADC_ConvCpltCallback+0xf8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	491d      	ldr	r1, [pc, #116]	; (8003d60 <HAL_ADC_ConvCpltCallback+0x104>)
 8003cea:	481e      	ldr	r0, [pc, #120]	; (8003d64 <HAL_ADC_ConvCpltCallback+0x108>)
 8003cec:	f005 f9ee 	bl	80090cc <siprintf>
		  HAL_UART_Transmit(&huart1,(uint8_t*)sensor, 5,1000);
 8003cf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cf4:	2205      	movs	r2, #5
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_ADC_ConvCpltCallback+0x108>)
 8003cf8:	4818      	ldr	r0, [pc, #96]	; (8003d5c <HAL_ADC_ConvCpltCallback+0x100>)
 8003cfa:	f004 fbcc 	bl	8008496 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"%", 1,1000);
 8003cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d02:	2201      	movs	r2, #1
 8003d04:	4918      	ldr	r1, [pc, #96]	; (8003d68 <HAL_ADC_ConvCpltCallback+0x10c>)
 8003d06:	4815      	ldr	r0, [pc, #84]	; (8003d5c <HAL_ADC_ConvCpltCallback+0x100>)
 8003d08:	f004 fbc5 	bl	8008496 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r", 2,1000);
 8003d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d10:	2202      	movs	r2, #2
 8003d12:	4916      	ldr	r1, [pc, #88]	; (8003d6c <HAL_ADC_ConvCpltCallback+0x110>)
 8003d14:	4811      	ldr	r0, [pc, #68]	; (8003d5c <HAL_ADC_ConvCpltCallback+0x100>)
 8003d16:	f004 fbbe 	bl	8008496 <HAL_UART_Transmit>
		  for(uint8_t i=0;i<3;i++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]
 8003d1e:	e006      	b.n	8003d2e <HAL_ADC_ConvCpltCallback+0xd2>
		  {
			  sensor[i]=0;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	4a10      	ldr	r2, [pc, #64]	; (8003d64 <HAL_ADC_ConvCpltCallback+0x108>)
 8003d24:	2100      	movs	r1, #0
 8003d26:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0;i<3;i++)
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d9f5      	bls.n	8003d20 <HAL_ADC_ConvCpltCallback+0xc4>
		  }
	  }
  }
 8003d34:	bf00      	nop
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40012400 	.word	0x40012400
 8003d40:	200004e0 	.word	0x200004e0
 8003d44:	200002c0 	.word	0x200002c0
 8003d48:	200003f4 	.word	0x200003f4
 8003d4c:	42c80000 	.word	0x42c80000
 8003d50:	200005d8 	.word	0x200005d8
 8003d54:	200003f0 	.word	0x200003f0
 8003d58:	0800bf0c 	.word	0x0800bf0c
 8003d5c:	20000348 	.word	0x20000348
 8003d60:	0800bdd4 	.word	0x0800bdd4
 8003d64:	20000784 	.word	0x20000784
 8003d68:	0800bf14 	.word	0x0800bf14
 8003d6c:	0800be64 	.word	0x0800be64

08003d70 <Wind>:
{
	count++;
}

void Wind()
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
	uint8_t radius_cm = 9;
 8003d76:	2309      	movs	r3, #9
 8003d78:	71fb      	strb	r3, [r7, #7]

	circumference_cm = 2 * 3.14 * radius_cm;
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fc fb4b 	bl	8000418 <__aeabi_i2d>
 8003d82:	a325      	add	r3, pc, #148	; (adr r3, 8003e18 <Wind+0xa8>)
 8003d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d88:	f7fc fbb0 	bl	80004ec <__aeabi_dmul>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f7fc fe82 	bl	8000a9c <__aeabi_d2f>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <Wind+0xb8>)
 8003d9c:	6013      	str	r3, [r2, #0]
	rotations = count / 2;
 8003d9e:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <Wind+0xbc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0fda      	lsrs	r2, r3, #31
 8003da4:	4413      	add	r3, r2
 8003da6:	105b      	asrs	r3, r3, #1
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc ff81 	bl	8000cb0 <__aeabi_i2f>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <Wind+0xc0>)
 8003db2:	6013      	str	r3, [r2, #0]
	distance_km = (circumference_cm * rotations) / 100000;
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <Wind+0xb8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <Wind+0xc0>)
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc ffca 	bl	8000d58 <__aeabi_fmul>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	491b      	ldr	r1, [pc, #108]	; (8003e34 <Wind+0xc4>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f879 	bl	8000ec0 <__aeabi_fdiv>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <Wind+0xc8>)
 8003dd4:	601a      	str	r2, [r3, #0]
	km_per_hour = (distance_km / 1) * 3600;
 8003dd6:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <Wind+0xc8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4918      	ldr	r1, [pc, #96]	; (8003e3c <Wind+0xcc>)
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc ffbb 	bl	8000d58 <__aeabi_fmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <Wind+0xd0>)
 8003de8:	601a      	str	r2, [r3, #0]
	speed = km_per_hour * 1.18;
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <Wind+0xd0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fc fb24 	bl	800043c <__aeabi_f2d>
 8003df4:	a30a      	add	r3, pc, #40	; (adr r3, 8003e20 <Wind+0xb0>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f7fc fb77 	bl	80004ec <__aeabi_dmul>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	4610      	mov	r0, r2
 8003e04:	4619      	mov	r1, r3
 8003e06:	f7fc fe49 	bl	8000a9c <__aeabi_d2f>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <Wind+0xd4>)
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	51eb851f 	.word	0x51eb851f
 8003e1c:	40191eb8 	.word	0x40191eb8
 8003e20:	ae147ae1 	.word	0xae147ae1
 8003e24:	3ff2e147 	.word	0x3ff2e147
 8003e28:	20000510 	.word	0x20000510
 8003e2c:	20000214 	.word	0x20000214
 8003e30:	2000052c 	.word	0x2000052c
 8003e34:	47c35000 	.word	0x47c35000
 8003e38:	20000524 	.word	0x20000524
 8003e3c:	45610000 	.word	0x45610000
 8003e40:	200006b0 	.word	0x200006b0
 8003e44:	200006b4 	.word	0x200006b4

08003e48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	4ba4      	ldr	r3, [pc, #656]	; (80040e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	f040 8175 	bne.w	8004148 <HAL_TIM_PeriodElapsedCallback+0x300>
	{
		Wind();
 8003e5e:	f7ff ff87 	bl	8003d70 <Wind>
		count=0;
 8003e62:	4ba2      	ldr	r3, [pc, #648]	; (80040ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e6e:	48a0      	ldr	r0, [pc, #640]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003e70:	f001 fc7b 	bl	800576a <HAL_GPIO_WritePin>
		if (q==5)
 8003e74:	4b9f      	ldr	r3, [pc, #636]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b05      	cmp	r3, #5
 8003e7a:	d10e      	bne.n	8003e9a <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			q=0;
 8003e7c:	4b9d      	ldr	r3, [pc, #628]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
			k=0;
 8003e82:	4b9d      	ldr	r3, [pc, #628]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
			c=0;
 8003e88:	4b9c      	ldr	r3, [pc, #624]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
			w=0;
 8003e8e:	4b9c      	ldr	r3, [pc, #624]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
			v=0;
 8003e94:	4b9b      	ldr	r3, [pc, #620]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
			//warning=0;
		}
		if(e==20)
 8003e9a:	4b9b      	ldr	r3, [pc, #620]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b14      	cmp	r3, #20
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			e=0;
 8003ea2:	4b99      	ldr	r3, [pc, #612]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2110      	movs	r1, #16
 8003eac:	4890      	ldr	r0, [pc, #576]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003eae:	f001 fc5c 	bl	800576a <HAL_GPIO_WritePin>
		}
		kq_adxl_timer1();
 8003eb2:	f7fe fa31 	bl	8002318 <kq_adxl_timer1>
		kq_adxl_timer();
 8003eb6:	f7fe fdd7 	bl	8002a68 <kq_adxl_timer>
		if( XL-xxL>5 || YL-yyL>5 )
 8003eba:	4b94      	ldr	r3, [pc, #592]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a94      	ldr	r2, [pc, #592]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc fe3d 	bl	8000b44 <__aeabi_fsub>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4991      	ldr	r1, [pc, #580]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd f8fe 	bl	80010d0 <__aeabi_fcmpgt>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <HAL_TIM_PeriodElapsedCallback+0xb2>
 8003eda:	4b8f      	ldr	r3, [pc, #572]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a8f      	ldr	r2, [pc, #572]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc fe2d 	bl	8000b44 <__aeabi_fsub>
 8003eea:	4603      	mov	r3, r0
 8003eec:	4989      	ldr	r1, [pc, #548]	; (8004114 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd f8ee 	bl	80010d0 <__aeabi_fcmpgt>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_PeriodElapsedCallback+0xbc>
		{
			w++;
 8003efa:	4b81      	ldr	r3, [pc, #516]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3301      	adds	r3, #1
 8003f00:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8003f02:	6013      	str	r3, [r2, #0]
		}
		if( XL-xxL<-5 || YL-yyL<-5 )
 8003f04:	4b81      	ldr	r3, [pc, #516]	; (800410c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a81      	ldr	r2, [pc, #516]	; (8004110 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc fe18 	bl	8000b44 <__aeabi_fsub>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4982      	ldr	r1, [pc, #520]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7fd f8bb 	bl	8001094 <__aeabi_fcmplt>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d10f      	bne.n	8003f44 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8003f24:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a7c      	ldr	r2, [pc, #496]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fe08 	bl	8000b44 <__aeabi_fsub>
 8003f34:	4603      	mov	r3, r0
 8003f36:	497a      	ldr	r1, [pc, #488]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fd f8ab 	bl	8001094 <__aeabi_fcmplt>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_TIM_PeriodElapsedCallback+0x106>
		{
			v++;
 8003f44:	4b6f      	ldr	r3, [pc, #444]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	4a6e      	ldr	r2, [pc, #440]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8003f4c:	6013      	str	r3, [r2, #0]
		}
		if( X-xx>15 || Y-yy > 15 )
 8003f4e:	4b75      	ldr	r3, [pc, #468]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fdf3 	bl	8000b44 <__aeabi_fsub>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4972      	ldr	r1, [pc, #456]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7fd f8b4 	bl	80010d0 <__aeabi_fcmpgt>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10f      	bne.n	8003f8e <HAL_TIM_PeriodElapsedCallback+0x146>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a70      	ldr	r2, [pc, #448]	; (8004134 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003f74:	6812      	ldr	r2, [r2, #0]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fc fde3 	bl	8000b44 <__aeabi_fsub>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	496a      	ldr	r1, [pc, #424]	; (800412c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd f8a4 	bl	80010d0 <__aeabi_fcmpgt>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d004      	beq.n	8003f98 <HAL_TIM_PeriodElapsedCallback+0x150>
		{
			k++;
 8003f8e:	4b5a      	ldr	r3, [pc, #360]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003f96:	6013      	str	r3, [r2, #0]
		}
		if( X-xx<-15 ||Y-yy<-15 )
 8003f98:	4b62      	ldr	r3, [pc, #392]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a62      	ldr	r2, [pc, #392]	; (8004128 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fc fdce 	bl	8000b44 <__aeabi_fsub>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	4963      	ldr	r1, [pc, #396]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd f871 	bl	8001094 <__aeabi_fcmplt>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10f      	bne.n	8003fd8 <HAL_TIM_PeriodElapsedCallback+0x190>
 8003fb8:	4b5d      	ldr	r3, [pc, #372]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5d      	ldr	r2, [pc, #372]	; (8004134 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fdbe 	bl	8000b44 <__aeabi_fsub>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	495b      	ldr	r1, [pc, #364]	; (8004138 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fd f861 	bl	8001094 <__aeabi_fcmplt>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_TIM_PeriodElapsedCallback+0x19a>
		{
			c++;
 8003fd8:	4b48      	ldr	r3, [pc, #288]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	4a47      	ldr	r2, [pc, #284]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8003fe0:	6013      	str	r3, [r2, #0]
		}
		if(X!=0 && Y!=0 && Z!=0)
 8003fe2:	4b50      	ldr	r3, [pc, #320]	; (8004124 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd f848 	bl	8001080 <__aeabi_fcmpeq>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d167      	bne.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x27e>
 8003ff6:	4b4e      	ldr	r3, [pc, #312]	; (8004130 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f04f 0100 	mov.w	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd f83e 	bl	8001080 <__aeabi_fcmpeq>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d15d      	bne.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x27e>
 800400a:	4b4c      	ldr	r3, [pc, #304]	; (800413c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f04f 0100 	mov.w	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd f834 	bl	8001080 <__aeabi_fcmpeq>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d153      	bne.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x27e>
		{	if(k>2 && w>2 )
 800401e:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	dd10      	ble.n	8004048 <HAL_TIM_PeriodElapsedCallback+0x200>
 8004026:	4b36      	ldr	r3, [pc, #216]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b02      	cmp	r3, #2
 800402c:	dd0c      	ble.n	8004048 <HAL_TIM_PeriodElapsedCallback+0x200>
			{
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800402e:	2201      	movs	r2, #1
 8004030:	2110      	movs	r1, #16
 8004032:	482f      	ldr	r0, [pc, #188]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004034:	f001 fb99 	bl	800576a <HAL_GPIO_WritePin>
//			  sstr = "warning\r\n";
//			  HAL_UART_Transmit(&huart1, (uint8_t *)sstr, strlen (sstr), HAL_MAX_DELAY);
			  warning = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8004038:	2110      	movs	r1, #16
 800403a:	482d      	ldr	r0, [pc, #180]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800403c:	f001 fb7e 	bl	800573c <HAL_GPIO_ReadPin>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	4b3e      	ldr	r3, [pc, #248]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004046:	601a      	str	r2, [r3, #0]
			}
			if(c>2 && v>2)
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	dd10      	ble.n	8004072 <HAL_TIM_PeriodElapsedCallback+0x22a>
 8004050:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	dd0c      	ble.n	8004072 <HAL_TIM_PeriodElapsedCallback+0x22a>
			{
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004058:	2201      	movs	r2, #1
 800405a:	2110      	movs	r1, #16
 800405c:	4824      	ldr	r0, [pc, #144]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800405e:	f001 fb84 	bl	800576a <HAL_GPIO_WritePin>
//			 sstr = "warning\r\n";
//			 HAL_UART_Transmit(&huart1, (uint8_t *)sstr, strlen (sstr), HAL_MAX_DELAY);
			  warning = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8004062:	2110      	movs	r1, #16
 8004064:	4822      	ldr	r0, [pc, #136]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004066:	f001 fb69 	bl	800573c <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8004070:	601a      	str	r2, [r3, #0]
			}
			if(k>2 && v>2 )
 8004072:	4b21      	ldr	r3, [pc, #132]	; (80040f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b02      	cmp	r3, #2
 8004078:	dd10      	ble.n	800409c <HAL_TIM_PeriodElapsedCallback+0x254>
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b02      	cmp	r3, #2
 8004080:	dd0c      	ble.n	800409c <HAL_TIM_PeriodElapsedCallback+0x254>
			{
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004082:	2201      	movs	r2, #1
 8004084:	2110      	movs	r1, #16
 8004086:	481a      	ldr	r0, [pc, #104]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004088:	f001 fb6f 	bl	800576a <HAL_GPIO_WritePin>
		//	 sstr = "warning\r\n";
		//	 HAL_UART_Transmit(&huart1, (uint8_t *)sstr, strlen (sstr), HAL_MAX_DELAY);
			 warning = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 800408c:	2110      	movs	r1, #16
 800408e:	4818      	ldr	r0, [pc, #96]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004090:	f001 fb54 	bl	800573c <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	461a      	mov	r2, r3
 8004098:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800409a:	601a      	str	r2, [r3, #0]
			}
			if(c>2 && w>2)
 800409c:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	dd10      	ble.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x27e>
 80040a4:	4b16      	ldr	r3, [pc, #88]	; (8004100 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	dd0c      	ble.n	80040c6 <HAL_TIM_PeriodElapsedCallback+0x27e>
			{
			 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80040ac:	2201      	movs	r2, #1
 80040ae:	2110      	movs	r1, #16
 80040b0:	480f      	ldr	r0, [pc, #60]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80040b2:	f001 fb5a 	bl	800576a <HAL_GPIO_WritePin>
		//	 sstr = "warning\r\n";
		//	 HAL_UART_Transmit(&huart1, (uint8_t *)sstr, strlen (sstr), HAL_MAX_DELAY);
			 warning = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80040b6:	2110      	movs	r1, #16
 80040b8:	480d      	ldr	r0, [pc, #52]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80040ba:	f001 fb3f 	bl	800573c <HAL_GPIO_ReadPin>
 80040be:	4603      	mov	r3, r0
 80040c0:	461a      	mov	r2, r3
 80040c2:	4b1f      	ldr	r3, [pc, #124]	; (8004140 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80040c4:	601a      	str	r2, [r3, #0]
					}
		    }
		q++;
 80040c6:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3301      	adds	r3, #1
 80040cc:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80040ce:	6013      	str	r3, [r2, #0]
		if(HAL_GPIO_ReadPin(GPIOB,  GPIO_PIN_4)==1)
 80040d0:	2110      	movs	r1, #16
 80040d2:	4807      	ldr	r0, [pc, #28]	; (80040f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80040d4:	f001 fb32 	bl	800573c <HAL_GPIO_ReadPin>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d134      	bne.n	8004148 <HAL_TIM_PeriodElapsedCallback+0x300>
		{
			e++;
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	e02e      	b.n	8004144 <HAL_TIM_PeriodElapsedCallback+0x2fc>
 80040e6:	bf00      	nop
 80040e8:	20000534 	.word	0x20000534
 80040ec:	20000214 	.word	0x20000214
 80040f0:	40010c00 	.word	0x40010c00
 80040f4:	20000204 	.word	0x20000204
 80040f8:	200001fc 	.word	0x200001fc
 80040fc:	20000200 	.word	0x20000200
 8004100:	2000020c 	.word	0x2000020c
 8004104:	20000210 	.word	0x20000210
 8004108:	20000208 	.word	0x20000208
 800410c:	20000530 	.word	0x20000530
 8004110:	200004b0 	.word	0x200004b0
 8004114:	40a00000 	.word	0x40a00000
 8004118:	200007e0 	.word	0x200007e0
 800411c:	20000518 	.word	0x20000518
 8004120:	c0a00000 	.word	0xc0a00000
 8004124:	200007f4 	.word	0x200007f4
 8004128:	20000520 	.word	0x20000520
 800412c:	41700000 	.word	0x41700000
 8004130:	200004b8 	.word	0x200004b8
 8004134:	20000640 	.word	0x20000640
 8004138:	c1700000 	.word	0xc1700000
 800413c:	20000648 	.word	0x20000648
 8004140:	20000790 	.word	0x20000790
 8004144:	4a02      	ldr	r2, [pc, #8]	; (8004150 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8004146:	6013      	str	r3, [r2, #0]
		}
	}
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20000208 	.word	0x20000208

08004154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004158:	b672      	cpsid	i
}
 800415a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800415c:	e7fe      	b.n	800415c <Error_Handler+0x8>
	...

08004160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004166:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_MspInit+0x6c>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	4a18      	ldr	r2, [pc, #96]	; (80041cc <HAL_MspInit+0x6c>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6193      	str	r3, [r2, #24]
 8004172:	4b16      	ldr	r3, [pc, #88]	; (80041cc <HAL_MspInit+0x6c>)
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_MspInit+0x6c>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <HAL_MspInit+0x6c>)
 8004184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004188:	61d3      	str	r3, [r2, #28]
 800418a:	4b10      	ldr	r3, [pc, #64]	; (80041cc <HAL_MspInit+0x6c>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	2001      	movs	r0, #1
 800419c:	f001 f88f 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80041a0:	2001      	movs	r0, #1
 80041a2:	f001 f8a8 	bl	80052f6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_MspInit+0x70>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	4a04      	ldr	r2, [pc, #16]	; (80041d0 <HAL_MspInit+0x70>)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40021000 	.word	0x40021000
 80041d0:	40010000 	.word	0x40010000

080041d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041dc:	f107 0310 	add.w	r3, r7, #16
 80041e0:	2200      	movs	r2, #0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	605a      	str	r2, [r3, #4]
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_ADC_MspInit+0x7c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d129      	bne.n	8004248 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <HAL_ADC_MspInit+0x80>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	4a16      	ldr	r2, [pc, #88]	; (8004254 <HAL_ADC_MspInit+0x80>)
 80041fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fe:	6193      	str	r3, [r2, #24]
 8004200:	4b14      	ldr	r3, [pc, #80]	; (8004254 <HAL_ADC_MspInit+0x80>)
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_ADC_MspInit+0x80>)
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	4a10      	ldr	r2, [pc, #64]	; (8004254 <HAL_ADC_MspInit+0x80>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	6193      	str	r3, [r2, #24]
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <HAL_ADC_MspInit+0x80>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004224:	2302      	movs	r3, #2
 8004226:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004228:	2303      	movs	r3, #3
 800422a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422c:	f107 0310 	add.w	r3, r7, #16
 8004230:	4619      	mov	r1, r3
 8004232:	4809      	ldr	r0, [pc, #36]	; (8004258 <HAL_ADC_MspInit+0x84>)
 8004234:	f001 f8fe 	bl	8005434 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004238:	2200      	movs	r2, #0
 800423a:	2100      	movs	r1, #0
 800423c:	2012      	movs	r0, #18
 800423e:	f001 f83e 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004242:	2012      	movs	r0, #18
 8004244:	f001 f857 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004248:	bf00      	nop
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40012400 	.word	0x40012400
 8004254:	40021000 	.word	0x40021000
 8004258:	40010800 	.word	0x40010800

0800425c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004264:	f107 0318 	add.w	r3, r7, #24
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
 800426e:	609a      	str	r2, [r3, #8]
 8004270:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_I2C_MspInit+0xc8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d124      	bne.n	80042c6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800427c:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	4a29      	ldr	r2, [pc, #164]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 8004282:	f043 0308 	orr.w	r3, r3, #8
 8004286:	6193      	str	r3, [r2, #24]
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004294:	23c0      	movs	r3, #192	; 0xc0
 8004296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004298:	2312      	movs	r3, #18
 800429a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800429c:	2303      	movs	r3, #3
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042a0:	f107 0318 	add.w	r3, r7, #24
 80042a4:	4619      	mov	r1, r3
 80042a6:	4821      	ldr	r0, [pc, #132]	; (800432c <HAL_I2C_MspInit+0xd0>)
 80042a8:	f001 f8c4 	bl	8005434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042ac:	4b1e      	ldr	r3, [pc, #120]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	4a1d      	ldr	r2, [pc, #116]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042b6:	61d3      	str	r3, [r2, #28]
 80042b8:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80042c4:	e029      	b.n	800431a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a19      	ldr	r2, [pc, #100]	; (8004330 <HAL_I2C_MspInit+0xd4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d124      	bne.n	800431a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042d0:	4b15      	ldr	r3, [pc, #84]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042d6:	f043 0308 	orr.w	r3, r3, #8
 80042da:	6193      	str	r3, [r2, #24]
 80042dc:	4b12      	ldr	r3, [pc, #72]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80042ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042ee:	2312      	movs	r3, #18
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042f2:	2303      	movs	r3, #3
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042f6:	f107 0318 	add.w	r3, r7, #24
 80042fa:	4619      	mov	r1, r3
 80042fc:	480b      	ldr	r0, [pc, #44]	; (800432c <HAL_I2C_MspInit+0xd0>)
 80042fe:	f001 f899 	bl	8005434 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004302:	4b09      	ldr	r3, [pc, #36]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4a08      	ldr	r2, [pc, #32]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 8004308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800430c:	61d3      	str	r3, [r2, #28]
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_I2C_MspInit+0xcc>)
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
}
 800431a:	bf00      	nop
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40005400 	.word	0x40005400
 8004328:	40021000 	.word	0x40021000
 800432c:	40010c00 	.word	0x40010c00
 8004330:	40005800 	.word	0x40005800

08004334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800433c:	f107 0310 	add.w	r3, r7, #16
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	609a      	str	r2, [r3, #8]
 8004348:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1f      	ldr	r2, [pc, #124]	; (80043cc <HAL_SPI_MspInit+0x98>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d137      	bne.n	80043c4 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 800435a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800435e:	6193      	str	r3, [r2, #24]
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800436c:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 8004372:	f043 0304 	orr.w	r3, r3, #4
 8004376:	6193      	str	r3, [r2, #24]
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_SPI_MspInit+0x9c>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	60bb      	str	r3, [r7, #8]
 8004382:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004384:	23a0      	movs	r3, #160	; 0xa0
 8004386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004388:	2302      	movs	r3, #2
 800438a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800438c:	2303      	movs	r3, #3
 800438e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	f107 0310 	add.w	r3, r7, #16
 8004394:	4619      	mov	r1, r3
 8004396:	480f      	ldr	r0, [pc, #60]	; (80043d4 <HAL_SPI_MspInit+0xa0>)
 8004398:	f001 f84c 	bl	8005434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a8:	f107 0310 	add.w	r3, r7, #16
 80043ac:	4619      	mov	r1, r3
 80043ae:	4809      	ldr	r0, [pc, #36]	; (80043d4 <HAL_SPI_MspInit+0xa0>)
 80043b0:	f001 f840 	bl	8005434 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80043b4:	2200      	movs	r2, #0
 80043b6:	2100      	movs	r1, #0
 80043b8:	2023      	movs	r0, #35	; 0x23
 80043ba:	f000 ff80 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80043be:	2023      	movs	r0, #35	; 0x23
 80043c0:	f000 ff99 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80043c4:	bf00      	nop
 80043c6:	3720      	adds	r7, #32
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40013000 	.word	0x40013000
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40010800 	.word	0x40010800

080043d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0d      	ldr	r2, [pc, #52]	; (800441c <HAL_TIM_Base_MspInit+0x44>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d113      	bne.n	8004412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043f4:	6193      	str	r3, [r2, #24]
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_TIM_Base_MspInit+0x48>)
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 2, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2102      	movs	r1, #2
 8004406:	2019      	movs	r0, #25
 8004408:	f000 ff59 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800440c:	2019      	movs	r0, #25
 800440e:	f000 ff72 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004412:	bf00      	nop
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40012c00 	.word	0x40012c00
 8004420:	40021000 	.word	0x40021000

08004424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800442c:	f107 0318 	add.w	r3, r7, #24
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a37      	ldr	r2, [pc, #220]	; (800451c <HAL_UART_MspInit+0xf8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d132      	bne.n	80044aa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_UART_MspInit+0xfc>)
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	4a35      	ldr	r2, [pc, #212]	; (8004520 <HAL_UART_MspInit+0xfc>)
 800444a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444e:	6193      	str	r3, [r2, #24]
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_UART_MspInit+0xfc>)
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800445c:	4b30      	ldr	r3, [pc, #192]	; (8004520 <HAL_UART_MspInit+0xfc>)
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	4a2f      	ldr	r2, [pc, #188]	; (8004520 <HAL_UART_MspInit+0xfc>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	6193      	str	r3, [r2, #24]
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_UART_MspInit+0xfc>)
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004474:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800447e:	2303      	movs	r3, #3
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004482:	f107 0318 	add.w	r3, r7, #24
 8004486:	4619      	mov	r1, r3
 8004488:	4826      	ldr	r0, [pc, #152]	; (8004524 <HAL_UART_MspInit+0x100>)
 800448a:	f000 ffd3 	bl	8005434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800448e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004498:	2300      	movs	r3, #0
 800449a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	4619      	mov	r1, r3
 80044a2:	4820      	ldr	r0, [pc, #128]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044a4:	f000 ffc6 	bl	8005434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80044a8:	e034      	b.n	8004514 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1e      	ldr	r2, [pc, #120]	; (8004528 <HAL_UART_MspInit+0x104>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d12f      	bne.n	8004514 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044b4:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	4a19      	ldr	r2, [pc, #100]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	61d3      	str	r3, [r2, #28]
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044cc:	4b14      	ldr	r3, [pc, #80]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4a13      	ldr	r2, [pc, #76]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	6193      	str	r3, [r2, #24]
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_UART_MspInit+0xfc>)
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044e4:	2304      	movs	r3, #4
 80044e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	2302      	movs	r3, #2
 80044ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f0:	f107 0318 	add.w	r3, r7, #24
 80044f4:	4619      	mov	r1, r3
 80044f6:	480b      	ldr	r0, [pc, #44]	; (8004524 <HAL_UART_MspInit+0x100>)
 80044f8:	f000 ff9c 	bl	8005434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044fc:	2308      	movs	r3, #8
 80044fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004500:	2300      	movs	r3, #0
 8004502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004504:	2300      	movs	r3, #0
 8004506:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004508:	f107 0318 	add.w	r3, r7, #24
 800450c:	4619      	mov	r1, r3
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <HAL_UART_MspInit+0x100>)
 8004510:	f000 ff90 	bl	8005434 <HAL_GPIO_Init>
}
 8004514:	bf00      	nop
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40013800 	.word	0x40013800
 8004520:	40021000 	.word	0x40021000
 8004524:	40010800 	.word	0x40010800
 8004528:	40004400 	.word	0x40004400

0800452c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004530:	e7fe      	b.n	8004530 <NMI_Handler+0x4>

08004532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004536:	e7fe      	b.n	8004536 <HardFault_Handler+0x4>

08004538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800453c:	e7fe      	b.n	800453c <MemManage_Handler+0x4>

0800453e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <BusFault_Handler+0x4>

08004544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <UsageFault_Handler+0x4>

0800454a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr

08004556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr

08004562 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr

0800456e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004572:	f000 f967 	bl	8004844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}

0800457a <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800457e:	f002 f915 	bl	80067ac <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}

08004586 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800458a:	2001      	movs	r0, #1
 800458c:	f001 f906 	bl	800579c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004598:	2008      	movs	r0, #8
 800459a:	f001 f8ff 	bl	800579c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <ADC1_2_IRQHandler+0x10>)
 80045aa:	f000 fb25 	bl	8004bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200004e0 	.word	0x200004e0

080045b8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <TIM1_UP_IRQHandler+0x10>)
 80045be:	f003 fbc5 	bl	8007d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000534 	.word	0x20000534

080045cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <SPI1_IRQHandler+0x10>)
 80045d2:	f003 f935 	bl	8007840 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	2000038c 	.word	0x2000038c

080045e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
	return 1;
 80045e4:	2301      	movs	r3, #1
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <_kill>:

int _kill(int pid, int sig)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045f8:	f004 f8bc 	bl	8008774 <__errno>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2216      	movs	r2, #22
 8004600:	601a      	str	r2, [r3, #0]
	return -1;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_exit>:

void _exit (int status)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004616:	f04f 31ff 	mov.w	r1, #4294967295
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ffe7 	bl	80045ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8004620:	e7fe      	b.n	8004620 <_exit+0x12>

08004622 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b086      	sub	sp, #24
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e00a      	b.n	800464a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004634:	f3af 8000 	nop.w
 8004638:	4601      	mov	r1, r0
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	60ba      	str	r2, [r7, #8]
 8004640:	b2ca      	uxtb	r2, r1
 8004642:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3301      	adds	r3, #1
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	dbf0      	blt.n	8004634 <_read+0x12>
	}

return len;
 8004652:	687b      	ldr	r3, [r7, #4]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e009      	b.n	8004682 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	60ba      	str	r2, [r7, #8]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	dbf1      	blt.n	800466e <_write+0x12>
	}
	return len;
 800468a:	687b      	ldr	r3, [r7, #4]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <_close>:

int _close(int file)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
	return -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046ba:	605a      	str	r2, [r3, #4]
	return 0;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <_isatty>:

int _isatty(int file)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	return 1;
 80046d0:	2301      	movs	r3, #1
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	return 0;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bc80      	pop	{r7}
 80046f2:	4770      	bx	lr

080046f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <_sbrk+0x5c>)
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <_sbrk+0x60>)
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004708:	4b13      	ldr	r3, [pc, #76]	; (8004758 <_sbrk+0x64>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <_sbrk+0x64>)
 8004712:	4a12      	ldr	r2, [pc, #72]	; (800475c <_sbrk+0x68>)
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <_sbrk+0x64>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d207      	bcs.n	8004734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004724:	f004 f826 	bl	8008774 <__errno>
 8004728:	4603      	mov	r3, r0
 800472a:	220c      	movs	r2, #12
 800472c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800472e:	f04f 33ff 	mov.w	r3, #4294967295
 8004732:	e009      	b.n	8004748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004734:	4b08      	ldr	r3, [pc, #32]	; (8004758 <_sbrk+0x64>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <_sbrk+0x64>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <_sbrk+0x64>)
 8004744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004746:	68fb      	ldr	r3, [r7, #12]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20005000 	.word	0x20005000
 8004754:	00000400 	.word	0x00000400
 8004758:	20000330 	.word	0x20000330
 800475c:	20000810 	.word	0x20000810

08004760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004760:	b480      	push	{r7}
 8004762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr

0800476c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800476c:	480c      	ldr	r0, [pc, #48]	; (80047a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800476e:	490d      	ldr	r1, [pc, #52]	; (80047a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004770:	4a0d      	ldr	r2, [pc, #52]	; (80047a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004774:	e002      	b.n	800477c <LoopCopyDataInit>

08004776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800477a:	3304      	adds	r3, #4

0800477c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800477c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800477e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004780:	d3f9      	bcc.n	8004776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004788:	e001      	b.n	800478e <LoopFillZerobss>

0800478a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800478a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800478c:	3204      	adds	r2, #4

0800478e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800478e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004790:	d3fb      	bcc.n	800478a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004792:	f7ff ffe5 	bl	8004760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004796:	f003 fff3 	bl	8008780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800479a:	f7fe fe91 	bl	80034c0 <main>
  bx lr
 800479e:	4770      	bx	lr
  ldr r0, =_sdata
 80047a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80047a8:	0800c3d0 	.word	0x0800c3d0
  ldr r2, =_sbss
 80047ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80047b0:	20000810 	.word	0x20000810

080047b4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80047b4:	e7fe      	b.n	80047b4 <CAN1_RX1_IRQHandler>
	...

080047b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_Init+0x28>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <HAL_Init+0x28>)
 80047c2:	f043 0310 	orr.w	r3, r3, #16
 80047c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047c8:	2003      	movs	r0, #3
 80047ca:	f000 fd6d 	bl	80052a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047ce:	200f      	movs	r0, #15
 80047d0:	f000 f808 	bl	80047e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047d4:	f7ff fcc4 	bl	8004160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000

080047e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047ec:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_InitTick+0x54>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_InitTick+0x58>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	4619      	mov	r1, r3
 80047f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fd93 	bl	800532e <HAL_SYSTICK_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e00e      	b.n	8004830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b0f      	cmp	r3, #15
 8004816:	d80a      	bhi.n	800482e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004818:	2200      	movs	r2, #0
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	f000 fd4d 	bl	80052be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004824:	4a06      	ldr	r2, [pc, #24]	; (8004840 <HAL_InitTick+0x5c>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	e000      	b.n	8004830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
}
 8004830:	4618      	mov	r0, r3
 8004832:	3708      	adds	r7, #8
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000000 	.word	0x20000000
 800483c:	20000008 	.word	0x20000008
 8004840:	20000004 	.word	0x20000004

08004844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_IncTick+0x1c>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_IncTick+0x20>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4413      	add	r3, r2
 8004854:	4a03      	ldr	r2, [pc, #12]	; (8004864 <HAL_IncTick+0x20>)
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	20000008 	.word	0x20000008
 8004864:	200007fc 	.word	0x200007fc

08004868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return uwTick;
 800486c:	4b02      	ldr	r3, [pc, #8]	; (8004878 <HAL_GetTick+0x10>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	200007fc 	.word	0x200007fc

0800487c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004884:	f7ff fff0 	bl	8004868 <HAL_GetTick>
 8004888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004894:	d005      	beq.n	80048a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_Delay+0x44>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048a2:	bf00      	nop
 80048a4:	f7ff ffe0 	bl	8004868 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d8f7      	bhi.n	80048a4 <HAL_Delay+0x28>
  {
  }
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000008 	.word	0x20000008

080048c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e0be      	b.n	8004a64 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fc66 	bl	80041d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fb93 	bl	8005034 <ADC_ConversionStop_Disable>
 800490e:	4603      	mov	r3, r0
 8004910:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 8099 	bne.w	8004a52 <HAL_ADC_Init+0x18e>
 8004920:	7dfb      	ldrb	r3, [r7, #23]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 8095 	bne.w	8004a52 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004930:	f023 0302 	bic.w	r3, r3, #2
 8004934:	f043 0202 	orr.w	r2, r3, #2
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004944:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	7b1b      	ldrb	r3, [r3, #12]
 800494a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800494c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4313      	orrs	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495c:	d003      	beq.n	8004966 <HAL_ADC_Init+0xa2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d102      	bne.n	800496c <HAL_ADC_Init+0xa8>
 8004966:	f44f 7380 	mov.w	r3, #256	; 0x100
 800496a:	e000      	b.n	800496e <HAL_ADC_Init+0xaa>
 800496c:	2300      	movs	r3, #0
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7d1b      	ldrb	r3, [r3, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d119      	bne.n	80049b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7b1b      	ldrb	r3, [r3, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d109      	bne.n	8004998 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	3b01      	subs	r3, #1
 800498a:	035a      	lsls	r2, r3, #13
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e00b      	b.n	80049b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <HAL_ADC_Init+0x1a8>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e0:	d003      	beq.n	80049ea <HAL_ADC_Init+0x126>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d104      	bne.n	80049f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	051b      	lsls	r3, r3, #20
 80049f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	4b18      	ldr	r3, [pc, #96]	; (8004a70 <HAL_ADC_Init+0x1ac>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d10b      	bne.n	8004a30 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	f043 0201 	orr.w	r2, r3, #1
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a2e:	e018      	b.n	8004a62 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f023 0312 	bic.w	r3, r3, #18
 8004a38:	f043 0210 	orr.w	r2, r3, #16
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	f043 0201 	orr.w	r2, r3, #1
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a50:	e007      	b.n	8004a62 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f043 0210 	orr.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	ffe1f7fd 	.word	0xffe1f7fd
 8004a70:	ff1f0efe 	.word	0xff1f0efe

08004a74 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_ADC_Start_IT+0x1a>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0a0      	b.n	8004bd0 <HAL_ADC_Start_IT+0x15c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa72 	bl	8004f80 <ADC_Enable>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 808f 	bne.w	8004bc6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a45      	ldr	r2, [pc, #276]	; (8004bd8 <HAL_ADC_Start_IT+0x164>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d105      	bne.n	8004ad2 <HAL_ADC_Start_IT+0x5e>
 8004ac6:	4b45      	ldr	r3, [pc, #276]	; (8004bdc <HAL_ADC_Start_IT+0x168>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d115      	bne.n	8004afe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d026      	beq.n	8004b3a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004af4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004afc:	e01d      	b.n	8004b3a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <HAL_ADC_Start_IT+0x168>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d004      	beq.n	8004b1e <HAL_ADC_Start_IT+0xaa>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <HAL_ADC_Start_IT+0x164>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10d      	bne.n	8004b3a <HAL_ADC_Start_IT+0xc6>
 8004b1e:	4b2f      	ldr	r3, [pc, #188]	; (8004bdc <HAL_ADC_Start_IT+0x168>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d006      	beq.n	8004b54 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	f023 0206 	bic.w	r2, r3, #6
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b52:	e002      	b.n	8004b5a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f06f 0202 	mvn.w	r2, #2
 8004b6a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0220 	orr.w	r2, r2, #32
 8004b7a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004b86:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004b8a:	d113      	bne.n	8004bb4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b90:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <HAL_ADC_Start_IT+0x164>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d105      	bne.n	8004ba2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b96:	4b11      	ldr	r3, [pc, #68]	; (8004bdc <HAL_ADC_Start_IT+0x168>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d108      	bne.n	8004bb4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	e00c      	b.n	8004bce <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	e003      	b.n	8004bce <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40012800 	.word	0x40012800
 8004bdc:	40012400 	.word	0x40012400

08004be0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bc80      	pop	{r7}
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0320 	and.w	r3, r3, #32
 8004c0a:	2b20      	cmp	r3, #32
 8004c0c:	d140      	bne.n	8004c90 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d139      	bne.n	8004c90 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d105      	bne.n	8004c34 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004c42:	d11d      	bne.n	8004c80 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d119      	bne.n	8004c80 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0220 	bic.w	r2, r2, #32
 8004c5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d105      	bne.n	8004c80 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	f043 0201 	orr.w	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f7fe ffeb 	bl	8003c5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0212 	mvn.w	r2, #18
 8004c8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b80      	cmp	r3, #128	; 0x80
 8004c9c:	d14f      	bne.n	8004d3e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d148      	bne.n	8004d3e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004cce:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8004cd2:	d012      	beq.n	8004cfa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d125      	bne.n	8004d2e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8004cec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004cf0:	d11d      	bne.n	8004d2e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d119      	bne.n	8004d2e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d08:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d105      	bne.n	8004d2e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9c1 	bl	80050b6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 020c 	mvn.w	r2, #12
 8004d3c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d48:	2b40      	cmp	r3, #64	; 0x40
 8004d4a:	d114      	bne.n	8004d76 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10d      	bne.n	8004d76 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f809 	bl	8004d7e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0201 	mvn.w	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b083      	sub	sp, #12
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x20>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e0dc      	b.n	8004f6a <HAL_ADC_ConfigChannel+0x1da>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d81c      	bhi.n	8004dfa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b05      	subs	r3, #5
 8004dd2:	221f      	movs	r2, #31
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	4019      	ands	r1, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	3b05      	subs	r3, #5
 8004dec:	fa00 f203 	lsl.w	r2, r0, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	635a      	str	r2, [r3, #52]	; 0x34
 8004df8:	e03c      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d81c      	bhi.n	8004e3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	3b23      	subs	r3, #35	; 0x23
 8004e14:	221f      	movs	r2, #31
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	4019      	ands	r1, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3b23      	subs	r3, #35	; 0x23
 8004e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
 8004e3a:	e01b      	b.n	8004e74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	3b41      	subs	r3, #65	; 0x41
 8004e4e:	221f      	movs	r2, #31
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	4019      	ands	r1, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	3b41      	subs	r3, #65	; 0x41
 8004e68:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b09      	cmp	r3, #9
 8004e7a:	d91c      	bls.n	8004eb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68d9      	ldr	r1, [r3, #12]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	4613      	mov	r3, r2
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	4413      	add	r3, r2
 8004e8c:	3b1e      	subs	r3, #30
 8004e8e:	2207      	movs	r2, #7
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	4019      	ands	r1, r3
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6898      	ldr	r0, [r3, #8]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3b1e      	subs	r3, #30
 8004ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]
 8004eb4:	e019      	b.n	8004eea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6919      	ldr	r1, [r3, #16]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4019      	ands	r1, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6898      	ldr	r0, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d003      	beq.n	8004efa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ef6:	2b11      	cmp	r3, #17
 8004ef8:	d132      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d125      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d126      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004f20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d11a      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f2a:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <HAL_ADC_ConfigChannel+0x1ec>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	0c9a      	lsrs	r2, r3, #18
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f40:	e002      	b.n	8004f48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f9      	bne.n	8004f42 <HAL_ADC_ConfigChannel+0x1b2>
 8004f4e:	e007      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bc80      	pop	{r7}
 8004f72:	4770      	bx	lr
 8004f74:	40012400 	.word	0x40012400
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	431bde83 	.word	0x431bde83

08004f80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d040      	beq.n	8005020 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fae:	4b1f      	ldr	r3, [pc, #124]	; (800502c <ADC_Enable+0xac>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <ADC_Enable+0xb0>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	0c9b      	lsrs	r3, r3, #18
 8004fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fbc:	e002      	b.n	8004fc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f9      	bne.n	8004fbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fca:	f7ff fc4d 	bl	8004868 <HAL_GetTick>
 8004fce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004fd0:	e01f      	b.n	8005012 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004fd2:	f7ff fc49 	bl	8004868 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d918      	bls.n	8005012 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d011      	beq.n	8005012 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	f043 0210 	orr.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f043 0201 	orr.w	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e007      	b.n	8005022 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b01      	cmp	r3, #1
 800501e:	d1d8      	bne.n	8004fd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000000 	.word	0x20000000
 8005030:	431bde83 	.word	0x431bde83

08005034 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b01      	cmp	r3, #1
 800504c:	d12e      	bne.n	80050ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0201 	bic.w	r2, r2, #1
 800505c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800505e:	f7ff fc03 	bl	8004868 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005064:	e01b      	b.n	800509e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005066:	f7ff fbff 	bl	8004868 <HAL_GetTick>
 800506a:	4602      	mov	r2, r0
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d914      	bls.n	800509e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b01      	cmp	r3, #1
 8005080:	d10d      	bne.n	800509e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	f043 0201 	orr.w	r2, r3, #1
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e007      	b.n	80050ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d0dc      	beq.n	8005066 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr

080050c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <__NVIC_SetPriorityGrouping+0x44>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050e4:	4013      	ands	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80050f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fa:	4a04      	ldr	r2, [pc, #16]	; (800510c <__NVIC_SetPriorityGrouping+0x44>)
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	60d3      	str	r3, [r2, #12]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	e000ed00 	.word	0xe000ed00

08005110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__NVIC_GetPriorityGrouping+0x18>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	0a1b      	lsrs	r3, r3, #8
 800511a:	f003 0307 	and.w	r3, r3, #7
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513a:	2b00      	cmp	r3, #0
 800513c:	db0b      	blt.n	8005156 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800513e:	79fb      	ldrb	r3, [r7, #7]
 8005140:	f003 021f 	and.w	r2, r3, #31
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <__NVIC_EnableIRQ+0x34>)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	2001      	movs	r0, #1
 800514e:	fa00 f202 	lsl.w	r2, r0, r2
 8005152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005156:	bf00      	nop
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	bc80      	pop	{r7}
 800515e:	4770      	bx	lr
 8005160:	e000e100 	.word	0xe000e100

08005164 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	2b00      	cmp	r3, #0
 8005174:	db12      	blt.n	800519c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005176:	79fb      	ldrb	r3, [r7, #7]
 8005178:	f003 021f 	and.w	r2, r3, #31
 800517c:	490a      	ldr	r1, [pc, #40]	; (80051a8 <__NVIC_DisableIRQ+0x44>)
 800517e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005182:	095b      	lsrs	r3, r3, #5
 8005184:	2001      	movs	r0, #1
 8005186:	fa00 f202 	lsl.w	r2, r0, r2
 800518a:	3320      	adds	r3, #32
 800518c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005190:	f3bf 8f4f 	dsb	sy
}
 8005194:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005196:	f3bf 8f6f 	isb	sy
}
 800519a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	e000e100 	.word	0xe000e100

080051ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	4603      	mov	r3, r0
 80051b4:	6039      	str	r1, [r7, #0]
 80051b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	db0a      	blt.n	80051d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	490c      	ldr	r1, [pc, #48]	; (80051f8 <__NVIC_SetPriority+0x4c>)
 80051c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	440b      	add	r3, r1
 80051d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d4:	e00a      	b.n	80051ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	4908      	ldr	r1, [pc, #32]	; (80051fc <__NVIC_SetPriority+0x50>)
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	3b04      	subs	r3, #4
 80051e4:	0112      	lsls	r2, r2, #4
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	440b      	add	r3, r1
 80051ea:	761a      	strb	r2, [r3, #24]
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	e000e100 	.word	0xe000e100
 80051fc:	e000ed00 	.word	0xe000ed00

08005200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005200:	b480      	push	{r7}
 8005202:	b089      	sub	sp, #36	; 0x24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f1c3 0307 	rsb	r3, r3, #7
 800521a:	2b04      	cmp	r3, #4
 800521c:	bf28      	it	cs
 800521e:	2304      	movcs	r3, #4
 8005220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3304      	adds	r3, #4
 8005226:	2b06      	cmp	r3, #6
 8005228:	d902      	bls.n	8005230 <NVIC_EncodePriority+0x30>
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3b03      	subs	r3, #3
 800522e:	e000      	b.n	8005232 <NVIC_EncodePriority+0x32>
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005234:	f04f 32ff 	mov.w	r2, #4294967295
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43da      	mvns	r2, r3
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	401a      	ands	r2, r3
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43d9      	mvns	r1, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	4313      	orrs	r3, r2
         );
}
 800525a:	4618      	mov	r0, r3
 800525c:	3724      	adds	r7, #36	; 0x24
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005274:	d301      	bcc.n	800527a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005276:	2301      	movs	r3, #1
 8005278:	e00f      	b.n	800529a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800527a:	4a0a      	ldr	r2, [pc, #40]	; (80052a4 <SysTick_Config+0x40>)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3b01      	subs	r3, #1
 8005280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005282:	210f      	movs	r1, #15
 8005284:	f04f 30ff 	mov.w	r0, #4294967295
 8005288:	f7ff ff90 	bl	80051ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <SysTick_Config+0x40>)
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005292:	4b04      	ldr	r3, [pc, #16]	; (80052a4 <SysTick_Config+0x40>)
 8005294:	2207      	movs	r2, #7
 8005296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000e010 	.word	0xe000e010

080052a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff09 	bl	80050c8 <__NVIC_SetPriorityGrouping>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d0:	f7ff ff1e 	bl	8005110 <__NVIC_GetPriorityGrouping>
 80052d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	6978      	ldr	r0, [r7, #20]
 80052dc:	f7ff ff90 	bl	8005200 <NVIC_EncodePriority>
 80052e0:	4602      	mov	r2, r0
 80052e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ff5f 	bl	80051ac <__NVIC_SetPriority>
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff11 	bl	800512c <__NVIC_EnableIRQ>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	4603      	mov	r3, r0
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800531c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ff1f 	bl	8005164 <__NVIC_DisableIRQ>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b082      	sub	sp, #8
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff ff94 	bl	8005264 <SysTick_Config>
 800533c:	4603      	mov	r3, r0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800535a:	2b02      	cmp	r3, #2
 800535c:	d005      	beq.n	800536a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2204      	movs	r2, #4
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e051      	b.n	800540e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 020e 	bic.w	r2, r2, #14
 8005378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0201 	bic.w	r2, r2, #1
 8005388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a22      	ldr	r2, [pc, #136]	; (8005418 <HAL_DMA_Abort_IT+0xd0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d029      	beq.n	80053e8 <HAL_DMA_Abort_IT+0xa0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <HAL_DMA_Abort_IT+0xd4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d022      	beq.n	80053e4 <HAL_DMA_Abort_IT+0x9c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <HAL_DMA_Abort_IT+0xd8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d01a      	beq.n	80053de <HAL_DMA_Abort_IT+0x96>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <HAL_DMA_Abort_IT+0xdc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d012      	beq.n	80053d8 <HAL_DMA_Abort_IT+0x90>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a1c      	ldr	r2, [pc, #112]	; (8005428 <HAL_DMA_Abort_IT+0xe0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00a      	beq.n	80053d2 <HAL_DMA_Abort_IT+0x8a>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <HAL_DMA_Abort_IT+0xe4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d102      	bne.n	80053cc <HAL_DMA_Abort_IT+0x84>
 80053c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80053ca:	e00e      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053d0:	e00b      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80053d6:	e008      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053dc:	e005      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053e2:	e002      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053e4:	2310      	movs	r3, #16
 80053e6:	e000      	b.n	80053ea <HAL_DMA_Abort_IT+0xa2>
 80053e8:	2301      	movs	r3, #1
 80053ea:	4a11      	ldr	r2, [pc, #68]	; (8005430 <HAL_DMA_Abort_IT+0xe8>)
 80053ec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
    } 
  }
  return status;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40020008 	.word	0x40020008
 800541c:	4002001c 	.word	0x4002001c
 8005420:	40020030 	.word	0x40020030
 8005424:	40020044 	.word	0x40020044
 8005428:	40020058 	.word	0x40020058
 800542c:	4002006c 	.word	0x4002006c
 8005430:	40020000 	.word	0x40020000

08005434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005434:	b480      	push	{r7}
 8005436:	b08b      	sub	sp, #44	; 0x2c
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005446:	e169      	b.n	800571c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005448:	2201      	movs	r2, #1
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	429a      	cmp	r2, r3
 8005462:	f040 8158 	bne.w	8005716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4a9a      	ldr	r2, [pc, #616]	; (80056d4 <HAL_GPIO_Init+0x2a0>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d05e      	beq.n	800552e <HAL_GPIO_Init+0xfa>
 8005470:	4a98      	ldr	r2, [pc, #608]	; (80056d4 <HAL_GPIO_Init+0x2a0>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d875      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 8005476:	4a98      	ldr	r2, [pc, #608]	; (80056d8 <HAL_GPIO_Init+0x2a4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d058      	beq.n	800552e <HAL_GPIO_Init+0xfa>
 800547c:	4a96      	ldr	r2, [pc, #600]	; (80056d8 <HAL_GPIO_Init+0x2a4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d86f      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 8005482:	4a96      	ldr	r2, [pc, #600]	; (80056dc <HAL_GPIO_Init+0x2a8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d052      	beq.n	800552e <HAL_GPIO_Init+0xfa>
 8005488:	4a94      	ldr	r2, [pc, #592]	; (80056dc <HAL_GPIO_Init+0x2a8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d869      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 800548e:	4a94      	ldr	r2, [pc, #592]	; (80056e0 <HAL_GPIO_Init+0x2ac>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d04c      	beq.n	800552e <HAL_GPIO_Init+0xfa>
 8005494:	4a92      	ldr	r2, [pc, #584]	; (80056e0 <HAL_GPIO_Init+0x2ac>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d863      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 800549a:	4a92      	ldr	r2, [pc, #584]	; (80056e4 <HAL_GPIO_Init+0x2b0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d046      	beq.n	800552e <HAL_GPIO_Init+0xfa>
 80054a0:	4a90      	ldr	r2, [pc, #576]	; (80056e4 <HAL_GPIO_Init+0x2b0>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d85d      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 80054a6:	2b12      	cmp	r3, #18
 80054a8:	d82a      	bhi.n	8005500 <HAL_GPIO_Init+0xcc>
 80054aa:	2b12      	cmp	r3, #18
 80054ac:	d859      	bhi.n	8005562 <HAL_GPIO_Init+0x12e>
 80054ae:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <HAL_GPIO_Init+0x80>)
 80054b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b4:	0800552f 	.word	0x0800552f
 80054b8:	08005509 	.word	0x08005509
 80054bc:	0800551b 	.word	0x0800551b
 80054c0:	0800555d 	.word	0x0800555d
 80054c4:	08005563 	.word	0x08005563
 80054c8:	08005563 	.word	0x08005563
 80054cc:	08005563 	.word	0x08005563
 80054d0:	08005563 	.word	0x08005563
 80054d4:	08005563 	.word	0x08005563
 80054d8:	08005563 	.word	0x08005563
 80054dc:	08005563 	.word	0x08005563
 80054e0:	08005563 	.word	0x08005563
 80054e4:	08005563 	.word	0x08005563
 80054e8:	08005563 	.word	0x08005563
 80054ec:	08005563 	.word	0x08005563
 80054f0:	08005563 	.word	0x08005563
 80054f4:	08005563 	.word	0x08005563
 80054f8:	08005511 	.word	0x08005511
 80054fc:	08005525 	.word	0x08005525
 8005500:	4a79      	ldr	r2, [pc, #484]	; (80056e8 <HAL_GPIO_Init+0x2b4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005506:	e02c      	b.n	8005562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	623b      	str	r3, [r7, #32]
          break;
 800550e:	e029      	b.n	8005564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	3304      	adds	r3, #4
 8005516:	623b      	str	r3, [r7, #32]
          break;
 8005518:	e024      	b.n	8005564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	3308      	adds	r3, #8
 8005520:	623b      	str	r3, [r7, #32]
          break;
 8005522:	e01f      	b.n	8005564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	330c      	adds	r3, #12
 800552a:	623b      	str	r3, [r7, #32]
          break;
 800552c:	e01a      	b.n	8005564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005536:	2304      	movs	r3, #4
 8005538:	623b      	str	r3, [r7, #32]
          break;
 800553a:	e013      	b.n	8005564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d105      	bne.n	8005550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005544:	2308      	movs	r3, #8
 8005546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	611a      	str	r2, [r3, #16]
          break;
 800554e:	e009      	b.n	8005564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005550:	2308      	movs	r3, #8
 8005552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69fa      	ldr	r2, [r7, #28]
 8005558:	615a      	str	r2, [r3, #20]
          break;
 800555a:	e003      	b.n	8005564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800555c:	2300      	movs	r3, #0
 800555e:	623b      	str	r3, [r7, #32]
          break;
 8005560:	e000      	b.n	8005564 <HAL_GPIO_Init+0x130>
          break;
 8005562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	2bff      	cmp	r3, #255	; 0xff
 8005568:	d801      	bhi.n	800556e <HAL_GPIO_Init+0x13a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	e001      	b.n	8005572 <HAL_GPIO_Init+0x13e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3304      	adds	r3, #4
 8005572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2bff      	cmp	r3, #255	; 0xff
 8005578:	d802      	bhi.n	8005580 <HAL_GPIO_Init+0x14c>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	e002      	b.n	8005586 <HAL_GPIO_Init+0x152>
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	3b08      	subs	r3, #8
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	210f      	movs	r1, #15
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	401a      	ands	r2, r3
 8005598:	6a39      	ldr	r1, [r7, #32]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	fa01 f303 	lsl.w	r3, r1, r3
 80055a0:	431a      	orrs	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80b1 	beq.w	8005716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80055b4:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <HAL_GPIO_Init+0x2b8>)
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	4a4c      	ldr	r2, [pc, #304]	; (80056ec <HAL_GPIO_Init+0x2b8>)
 80055ba:	f043 0301 	orr.w	r3, r3, #1
 80055be:	6193      	str	r3, [r2, #24]
 80055c0:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <HAL_GPIO_Init+0x2b8>)
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	f003 0301 	and.w	r3, r3, #1
 80055c8:	60bb      	str	r3, [r7, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80055cc:	4a48      	ldr	r2, [pc, #288]	; (80056f0 <HAL_GPIO_Init+0x2bc>)
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	089b      	lsrs	r3, r3, #2
 80055d2:	3302      	adds	r3, #2
 80055d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	220f      	movs	r2, #15
 80055e4:	fa02 f303 	lsl.w	r3, r2, r3
 80055e8:	43db      	mvns	r3, r3
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <HAL_GPIO_Init+0x2c0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <HAL_GPIO_Init+0x1ec>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3f      	ldr	r2, [pc, #252]	; (80056f8 <HAL_GPIO_Init+0x2c4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00d      	beq.n	800561c <HAL_GPIO_Init+0x1e8>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3e      	ldr	r2, [pc, #248]	; (80056fc <HAL_GPIO_Init+0x2c8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <HAL_GPIO_Init+0x1e4>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <HAL_GPIO_Init+0x2cc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d101      	bne.n	8005614 <HAL_GPIO_Init+0x1e0>
 8005610:	2303      	movs	r3, #3
 8005612:	e006      	b.n	8005622 <HAL_GPIO_Init+0x1ee>
 8005614:	2304      	movs	r3, #4
 8005616:	e004      	b.n	8005622 <HAL_GPIO_Init+0x1ee>
 8005618:	2302      	movs	r3, #2
 800561a:	e002      	b.n	8005622 <HAL_GPIO_Init+0x1ee>
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_GPIO_Init+0x1ee>
 8005620:	2300      	movs	r3, #0
 8005622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005624:	f002 0203 	and.w	r2, r2, #3
 8005628:	0092      	lsls	r2, r2, #2
 800562a:	4093      	lsls	r3, r2
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005632:	492f      	ldr	r1, [pc, #188]	; (80056f0 <HAL_GPIO_Init+0x2bc>)
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	089b      	lsrs	r3, r3, #2
 8005638:	3302      	adds	r3, #2
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d006      	beq.n	800565a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800564c:	4b2d      	ldr	r3, [pc, #180]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	492c      	ldr	r1, [pc, #176]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	4313      	orrs	r3, r2
 8005656:	600b      	str	r3, [r1, #0]
 8005658:	e006      	b.n	8005668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800565a:	4b2a      	ldr	r3, [pc, #168]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	43db      	mvns	r3, r3
 8005662:	4928      	ldr	r1, [pc, #160]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 8005664:	4013      	ands	r3, r2
 8005666:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d006      	beq.n	8005682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005674:	4b23      	ldr	r3, [pc, #140]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	4922      	ldr	r1, [pc, #136]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	604b      	str	r3, [r1, #4]
 8005680:	e006      	b.n	8005690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	43db      	mvns	r3, r3
 800568a:	491e      	ldr	r1, [pc, #120]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 800568c:	4013      	ands	r3, r2
 800568e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d006      	beq.n	80056aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800569c:	4b19      	ldr	r3, [pc, #100]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	4918      	ldr	r1, [pc, #96]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	608b      	str	r3, [r1, #8]
 80056a8:	e006      	b.n	80056b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	4914      	ldr	r1, [pc, #80]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d021      	beq.n	8005708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056c4:	4b0f      	ldr	r3, [pc, #60]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	490e      	ldr	r1, [pc, #56]	; (8005704 <HAL_GPIO_Init+0x2d0>)
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
 80056d0:	e021      	b.n	8005716 <HAL_GPIO_Init+0x2e2>
 80056d2:	bf00      	nop
 80056d4:	10320000 	.word	0x10320000
 80056d8:	10310000 	.word	0x10310000
 80056dc:	10220000 	.word	0x10220000
 80056e0:	10210000 	.word	0x10210000
 80056e4:	10120000 	.word	0x10120000
 80056e8:	10110000 	.word	0x10110000
 80056ec:	40021000 	.word	0x40021000
 80056f0:	40010000 	.word	0x40010000
 80056f4:	40010800 	.word	0x40010800
 80056f8:	40010c00 	.word	0x40010c00
 80056fc:	40011000 	.word	0x40011000
 8005700:	40011400 	.word	0x40011400
 8005704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <HAL_GPIO_Init+0x304>)
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	43db      	mvns	r3, r3
 8005710:	4909      	ldr	r1, [pc, #36]	; (8005738 <HAL_GPIO_Init+0x304>)
 8005712:	4013      	ands	r3, r2
 8005714:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	3301      	adds	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	f47f ae8e 	bne.w	8005448 <HAL_GPIO_Init+0x14>
  }
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	372c      	adds	r7, #44	; 0x2c
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	40010400 	.word	0x40010400

0800573c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	887b      	ldrh	r3, [r7, #2]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]
 8005758:	e001      	b.n	800575e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800575a:	2300      	movs	r3, #0
 800575c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005760:	4618      	mov	r0, r3
 8005762:	3714      	adds	r7, #20
 8005764:	46bd      	mov	sp, r7
 8005766:	bc80      	pop	{r7}
 8005768:	4770      	bx	lr

0800576a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	460b      	mov	r3, r1
 8005774:	807b      	strh	r3, [r7, #2]
 8005776:	4613      	mov	r3, r2
 8005778:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800577a:	787b      	ldrb	r3, [r7, #1]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005780:	887a      	ldrh	r2, [r7, #2]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005786:	e003      	b.n	8005790 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	041a      	lsls	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	611a      	str	r2, [r3, #16]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
	...

0800579c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fe fa36 	bl	8003c2c <HAL_GPIO_EXTI_Callback>
  }
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40010400 	.word	0x40010400

080057cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e12b      	b.n	8005a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fe fd32 	bl	800425c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	; 0x24
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800581e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800582e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005830:	f001 fba8 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8005834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4a81      	ldr	r2, [pc, #516]	; (8005a40 <HAL_I2C_Init+0x274>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d807      	bhi.n	8005850 <HAL_I2C_Init+0x84>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a80      	ldr	r2, [pc, #512]	; (8005a44 <HAL_I2C_Init+0x278>)
 8005844:	4293      	cmp	r3, r2
 8005846:	bf94      	ite	ls
 8005848:	2301      	movls	r3, #1
 800584a:	2300      	movhi	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e006      	b.n	800585e <HAL_I2C_Init+0x92>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a7d      	ldr	r2, [pc, #500]	; (8005a48 <HAL_I2C_Init+0x27c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	bf94      	ite	ls
 8005858:	2301      	movls	r3, #1
 800585a:	2300      	movhi	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0e7      	b.n	8005a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a78      	ldr	r2, [pc, #480]	; (8005a4c <HAL_I2C_Init+0x280>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0c9b      	lsrs	r3, r3, #18
 8005870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a6a      	ldr	r2, [pc, #424]	; (8005a40 <HAL_I2C_Init+0x274>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d802      	bhi.n	80058a0 <HAL_I2C_Init+0xd4>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	e009      	b.n	80058b4 <HAL_I2C_Init+0xe8>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	4a69      	ldr	r2, [pc, #420]	; (8005a50 <HAL_I2C_Init+0x284>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	099b      	lsrs	r3, r3, #6
 80058b2:	3301      	adds	r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	495c      	ldr	r1, [pc, #368]	; (8005a40 <HAL_I2C_Init+0x274>)
 80058d0:	428b      	cmp	r3, r1
 80058d2:	d819      	bhi.n	8005908 <HAL_I2C_Init+0x13c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1e59      	subs	r1, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fbb1 f3f3 	udiv	r3, r1, r3
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058e8:	400b      	ands	r3, r1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_I2C_Init+0x138>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e59      	subs	r1, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058fc:	3301      	adds	r3, #1
 80058fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005902:	e051      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005904:	2304      	movs	r3, #4
 8005906:	e04f      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d111      	bne.n	8005934 <HAL_I2C_Init+0x168>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e58      	subs	r0, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e012      	b.n	800595a <HAL_I2C_Init+0x18e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1e58      	subs	r0, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	0099      	lsls	r1, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	fbb0 f3f3 	udiv	r3, r0, r3
 800594a:	3301      	adds	r3, #1
 800594c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Init+0x196>
 800595e:	2301      	movs	r3, #1
 8005960:	e022      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10e      	bne.n	8005988 <HAL_I2C_Init+0x1bc>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1e58      	subs	r0, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	440b      	add	r3, r1
 8005978:	fbb0 f3f3 	udiv	r3, r0, r3
 800597c:	3301      	adds	r3, #1
 800597e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005986:	e00f      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1e58      	subs	r0, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	0099      	lsls	r1, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	fbb0 f3f3 	udiv	r3, r0, r3
 800599e:	3301      	adds	r3, #1
 80059a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	6809      	ldr	r1, [r1, #0]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69da      	ldr	r2, [r3, #28]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6911      	ldr	r1, [r2, #16]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	4311      	orrs	r1, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	000186a0 	.word	0x000186a0
 8005a44:	001e847f 	.word	0x001e847f
 8005a48:	003d08ff 	.word	0x003d08ff
 8005a4c:	431bde83 	.word	0x431bde83
 8005a50:	10624dd3 	.word	0x10624dd3

08005a54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	460b      	mov	r3, r1
 8005a62:	817b      	strh	r3, [r7, #10]
 8005a64:	4613      	mov	r3, r2
 8005a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a68:	f7fe fefe 	bl	8004868 <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f040 80e0 	bne.w	8005c3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2319      	movs	r3, #25
 8005a82:	2201      	movs	r2, #1
 8005a84:	4970      	ldr	r1, [pc, #448]	; (8005c48 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fcb4 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0d3      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2C_Master_Transmit+0x50>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e0cc      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d007      	beq.n	8005aca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	; 0x21
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	893a      	ldrh	r2, [r7, #8]
 8005afa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a50      	ldr	r2, [pc, #320]	; (8005c4c <HAL_I2C_Master_Transmit+0x1f8>)
 8005b0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fb04 	bl	8006120 <I2C_MasterRequestWrite>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e08d      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b38:	e066      	b.n	8005c08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fd2e 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d107      	bne.n	8005b62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e06b      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11b      	bne.n	8005bdc <HAL_I2C_Master_Transmit+0x188>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	6a39      	ldr	r1, [r7, #32]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fd1e 	bl	8006622 <I2C_WaitOnBTFFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d107      	bne.n	8005c04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e01a      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d194      	bne.n	8005b3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	00100002 	.word	0x00100002
 8005c4c:	ffff0000 	.word	0xffff0000

08005c50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	; 0x30
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	4608      	mov	r0, r1
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4603      	mov	r3, r0
 8005c60:	817b      	strh	r3, [r7, #10]
 8005c62:	460b      	mov	r3, r1
 8005c64:	813b      	strh	r3, [r7, #8]
 8005c66:	4613      	mov	r3, r2
 8005c68:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c6e:	f7fe fdfb 	bl	8004868 <HAL_GetTick>
 8005c72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	f040 8244 	bne.w	800610a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	2319      	movs	r3, #25
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4982      	ldr	r1, [pc, #520]	; (8005e94 <HAL_I2C_Mem_Read+0x244>)
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fbb1 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e237      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <HAL_I2C_Mem_Read+0x5a>
 8005ca6:	2302      	movs	r3, #2
 8005ca8:	e230      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d007      	beq.n	8005cd0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2222      	movs	r2, #34	; 0x22
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2240      	movs	r2, #64	; 0x40
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005d00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	4a62      	ldr	r2, [pc, #392]	; (8005e98 <HAL_I2C_Mem_Read+0x248>)
 8005d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d12:	88f8      	ldrh	r0, [r7, #6]
 8005d14:	893a      	ldrh	r2, [r7, #8]
 8005d16:	8979      	ldrh	r1, [r7, #10]
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4603      	mov	r3, r0
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	f000 fa7e 	bl	8006224 <I2C_RequestMemoryRead>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e1ec      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d113      	bne.n	8005d62 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	61fb      	str	r3, [r7, #28]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	61fb      	str	r3, [r7, #28]
 8005d4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e1c0      	b.n	80060e4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d11e      	bne.n	8005da8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d7a:	b672      	cpsid	i
}
 8005d7c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	61bb      	str	r3, [r7, #24]
 8005d92:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005da2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005da4:	b662      	cpsie	i
}
 8005da6:	e035      	b.n	8005e14 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11e      	bne.n	8005dee <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dbe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005dc0:	b672      	cpsid	i
}
 8005dc2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005dea:	b662      	cpsie	i
}
 8005dec:	e012      	b.n	8005e14 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dfc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005e14:	e166      	b.n	80060e4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	2b03      	cmp	r3, #3
 8005e1c:	f200 811f 	bhi.w	800605e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d123      	bne.n	8005e70 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 fc39 	bl	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e167      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e6e:	e139      	b.n	80060e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d152      	bne.n	8005f1e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	2200      	movs	r2, #0
 8005e80:	4906      	ldr	r1, [pc, #24]	; (8005e9c <HAL_I2C_Mem_Read+0x24c>)
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fab6 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d008      	beq.n	8005ea0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e13c      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
 8005e92:	bf00      	nop
 8005e94:	00100002 	.word	0x00100002
 8005e98:	ffff0000 	.word	0xffff0000
 8005e9c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005ea0:	b672      	cpsid	i
}
 8005ea2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ee6:	b662      	cpsie	i
}
 8005ee8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	691a      	ldr	r2, [r3, #16]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f06:	3b01      	subs	r3, #1
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	3b01      	subs	r3, #1
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f1c:	e0e2      	b.n	80060e4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2200      	movs	r2, #0
 8005f26:	497b      	ldr	r1, [pc, #492]	; (8006114 <HAL_I2C_Mem_Read+0x4c4>)
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fa63 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e0e9      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005f48:	b672      	cpsid	i
}
 8005f4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691a      	ldr	r2, [r3, #16]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f7e:	4b66      	ldr	r3, [pc, #408]	; (8006118 <HAL_I2C_Mem_Read+0x4c8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	4a65      	ldr	r2, [pc, #404]	; (800611c <HAL_I2C_Mem_Read+0x4cc>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	0a1a      	lsrs	r2, r3, #8
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	00da      	lsls	r2, r3, #3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d118      	bne.n	8005fd6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005fc6:	b662      	cpsie	i
}
 8005fc8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e09a      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b04      	cmp	r3, #4
 8005fe2:	d1d9      	bne.n	8005f98 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006010:	3b01      	subs	r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006026:	b662      	cpsie	i
}
 8006028:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	1c5a      	adds	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800605c:	e042      	b.n	80060e4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fb1e 	bl	80066a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e04c      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d118      	bne.n	80060e4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060da:	b29b      	uxth	r3, r3
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f47f ae94 	bne.w	8005e16 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	; 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	00010004 	.word	0x00010004
 8006118:	20000000 	.word	0x20000000
 800611c:	14f8b589 	.word	0x14f8b589

08006120 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	607a      	str	r2, [r7, #4]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	460b      	mov	r3, r1
 800612e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d006      	beq.n	800614a <I2C_MasterRequestWrite+0x2a>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d003      	beq.n	800614a <I2C_MasterRequestWrite+0x2a>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006148:	d108      	bne.n	800615c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	e00b      	b.n	8006174 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	2b12      	cmp	r3, #18
 8006162:	d107      	bne.n	8006174 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006172:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f000 f937 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00d      	beq.n	80061a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800619a:	d103      	bne.n	80061a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e035      	b.n	8006214 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b0:	d108      	bne.n	80061c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061b2:	897b      	ldrh	r3, [r7, #10]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	461a      	mov	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061c0:	611a      	str	r2, [r3, #16]
 80061c2:	e01b      	b.n	80061fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061c4:	897b      	ldrh	r3, [r7, #10]
 80061c6:	11db      	asrs	r3, r3, #7
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 0306 	and.w	r3, r3, #6
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f063 030f 	orn	r3, r3, #15
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	490e      	ldr	r1, [pc, #56]	; (800621c <I2C_MasterRequestWrite+0xfc>)
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f95d 	bl	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e010      	b.n	8006214 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061f2:	897b      	ldrh	r3, [r7, #10]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4907      	ldr	r1, [pc, #28]	; (8006220 <I2C_MasterRequestWrite+0x100>)
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 f94d 	bl	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	00010008 	.word	0x00010008
 8006220:	00010002 	.word	0x00010002

08006224 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	4603      	mov	r3, r0
 8006234:	817b      	strh	r3, [r7, #10]
 8006236:	460b      	mov	r3, r1
 8006238:	813b      	strh	r3, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	2200      	movs	r2, #0
 8006266:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f8c2 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00d      	beq.n	8006292 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006284:	d103      	bne.n	800628e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e0aa      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006292:	897b      	ldrh	r3, [r7, #10]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	461a      	mov	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	6a3a      	ldr	r2, [r7, #32]
 80062a6:	4952      	ldr	r1, [pc, #328]	; (80063f0 <I2C_RequestMemoryRead+0x1cc>)
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f8fa 	bl	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e097      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d0:	6a39      	ldr	r1, [r7, #32]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 f964 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00d      	beq.n	80062fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d107      	bne.n	80062f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e076      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d105      	bne.n	800630c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006300:	893b      	ldrh	r3, [r7, #8]
 8006302:	b2da      	uxtb	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	611a      	str	r2, [r3, #16]
 800630a:	e021      	b.n	8006350 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800630c:	893b      	ldrh	r3, [r7, #8]
 800630e:	0a1b      	lsrs	r3, r3, #8
 8006310:	b29b      	uxth	r3, r3
 8006312:	b2da      	uxtb	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f93e 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b04      	cmp	r3, #4
 8006330:	d107      	bne.n	8006342 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e050      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006352:	6a39      	ldr	r1, [r7, #32]
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 f923 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00d      	beq.n	800637c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006364:	2b04      	cmp	r3, #4
 8006366:	d107      	bne.n	8006378 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006376:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e035      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800638a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2200      	movs	r2, #0
 8006394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f82b 	bl	80063f4 <I2C_WaitOnFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b2:	d103      	bne.n	80063bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e013      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063c0:	897b      	ldrh	r3, [r7, #10]
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f043 0301 	orr.w	r3, r3, #1
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	6a3a      	ldr	r2, [r7, #32]
 80063d4:	4906      	ldr	r1, [pc, #24]	; (80063f0 <I2C_RequestMemoryRead+0x1cc>)
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f863 	bl	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e000      	b.n	80063e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	00010002 	.word	0x00010002

080063f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	603b      	str	r3, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006404:	e025      	b.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800640c:	d021      	beq.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800640e:	f7fe fa2b 	bl	8004868 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d302      	bcc.n	8006424 <I2C_WaitOnFlagUntilTimeout+0x30>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d116      	bne.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e023      	b.n	800649a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d10d      	bne.n	8006478 <I2C_WaitOnFlagUntilTimeout+0x84>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	43da      	mvns	r2, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	e00c      	b.n	8006492 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	43da      	mvns	r2, r3
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	4013      	ands	r3, r2
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	bf0c      	ite	eq
 800648a:	2301      	moveq	r3, #1
 800648c:	2300      	movne	r3, #0
 800648e:	b2db      	uxtb	r3, r3
 8006490:	461a      	mov	r2, r3
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	429a      	cmp	r2, r3
 8006496:	d0b6      	beq.n	8006406 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064b0:	e051      	b.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064c0:	d123      	bne.n	800650a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f043 0204 	orr.w	r2, r3, #4
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e046      	b.n	8006598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d021      	beq.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe f9a9 	bl	8004868 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d116      	bne.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e020      	b.n	8006598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10c      	bne.n	800657a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	43da      	mvns	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	e00b      	b.n	8006592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	43da      	mvns	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4013      	ands	r3, r2
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf14      	ite	ne
 800658c:	2301      	movne	r3, #1
 800658e:	2300      	moveq	r3, #0
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d18d      	bne.n	80064b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ac:	e02d      	b.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f8ce 	bl	8006750 <I2C_IsAcknowledgeFailed>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e02d      	b.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d021      	beq.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c6:	f7fe f94f 	bl	8004868 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d116      	bne.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2220      	movs	r2, #32
 80065e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f043 0220 	orr.w	r2, r3, #32
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e007      	b.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006614:	2b80      	cmp	r3, #128	; 0x80
 8006616:	d1ca      	bne.n	80065ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800662e:	e02d      	b.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 f88d 	bl	8006750 <I2C_IsAcknowledgeFailed>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e02d      	b.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d021      	beq.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006648:	f7fe f90e 	bl	8004868 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	429a      	cmp	r2, r3
 8006656:	d302      	bcc.n	800665e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d116      	bne.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e007      	b.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d1ca      	bne.n	8006630 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066b0:	e042      	b.n	8006738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0310 	and.w	r3, r3, #16
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d119      	bne.n	80066f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f06f 0210 	mvn.w	r2, #16
 80066c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e029      	b.n	8006748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7fe f8b8 	bl	8004868 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d116      	bne.n	8006738 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2220      	movs	r2, #32
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e007      	b.n	8006748 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006742:	2b40      	cmp	r3, #64	; 0x40
 8006744:	d1b5      	bne.n	80066b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006766:	d11b      	bne.n	80067a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006770:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	f043 0204 	orr.w	r2, r3, #4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <HAL_PWR_PVD_IRQHandler+0x20>)
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80067bc:	f000 f808 	bl	80067d0 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80067c0:	4b02      	ldr	r3, [pc, #8]	; (80067cc <HAL_PWR_PVD_IRQHandler+0x20>)
 80067c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80067c6:	615a      	str	r2, [r3, #20]
  }
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40010400 	.word	0x40010400

080067d0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80067d0:	b480      	push	{r7}
 80067d2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80067d4:	bf00      	nop
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bc80      	pop	{r7}
 80067da:	4770      	bx	lr

080067dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e26c      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 8087 	beq.w	800690a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067fc:	4b92      	ldr	r3, [pc, #584]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f003 030c 	and.w	r3, r3, #12
 8006804:	2b04      	cmp	r3, #4
 8006806:	d00c      	beq.n	8006822 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006808:	4b8f      	ldr	r3, [pc, #572]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f003 030c 	and.w	r3, r3, #12
 8006810:	2b08      	cmp	r3, #8
 8006812:	d112      	bne.n	800683a <HAL_RCC_OscConfig+0x5e>
 8006814:	4b8c      	ldr	r3, [pc, #560]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800681c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006820:	d10b      	bne.n	800683a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006822:	4b89      	ldr	r3, [pc, #548]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d06c      	beq.n	8006908 <HAL_RCC_OscConfig+0x12c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d168      	bne.n	8006908 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e246      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006842:	d106      	bne.n	8006852 <HAL_RCC_OscConfig+0x76>
 8006844:	4b80      	ldr	r3, [pc, #512]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a7f      	ldr	r2, [pc, #508]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800684a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e02e      	b.n	80068b0 <HAL_RCC_OscConfig+0xd4>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10c      	bne.n	8006874 <HAL_RCC_OscConfig+0x98>
 800685a:	4b7b      	ldr	r3, [pc, #492]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7a      	ldr	r2, [pc, #488]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4b78      	ldr	r3, [pc, #480]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a77      	ldr	r2, [pc, #476]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800686c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	e01d      	b.n	80068b0 <HAL_RCC_OscConfig+0xd4>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800687c:	d10c      	bne.n	8006898 <HAL_RCC_OscConfig+0xbc>
 800687e:	4b72      	ldr	r3, [pc, #456]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a71      	ldr	r2, [pc, #452]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	4b6f      	ldr	r3, [pc, #444]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a6e      	ldr	r2, [pc, #440]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	e00b      	b.n	80068b0 <HAL_RCC_OscConfig+0xd4>
 8006898:	4b6b      	ldr	r3, [pc, #428]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a6a      	ldr	r2, [pc, #424]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800689e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	4b68      	ldr	r3, [pc, #416]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a67      	ldr	r2, [pc, #412]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80068aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d013      	beq.n	80068e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fd ffd6 	bl	8004868 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fd ffd2 	bl	8004868 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1fa      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068d2:	4b5d      	ldr	r3, [pc, #372]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0xe4>
 80068de:	e014      	b.n	800690a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e0:	f7fd ffc2 	bl	8004868 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068e8:	f7fd ffbe 	bl	8004868 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b64      	cmp	r3, #100	; 0x64
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e1e6      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068fa:	4b53      	ldr	r3, [pc, #332]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x10c>
 8006906:	e000      	b.n	800690a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0302 	and.w	r3, r3, #2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d063      	beq.n	80069de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006916:	4b4c      	ldr	r3, [pc, #304]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f003 030c 	and.w	r3, r3, #12
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006922:	4b49      	ldr	r3, [pc, #292]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	d11c      	bne.n	8006968 <HAL_RCC_OscConfig+0x18c>
 800692e:	4b46      	ldr	r3, [pc, #280]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d116      	bne.n	8006968 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693a:	4b43      	ldr	r3, [pc, #268]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x176>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e1ba      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	4b3d      	ldr	r3, [pc, #244]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	4939      	ldr	r1, [pc, #228]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006966:	e03a      	b.n	80069de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006970:	4b36      	ldr	r3, [pc, #216]	; (8006a4c <HAL_RCC_OscConfig+0x270>)
 8006972:	2201      	movs	r2, #1
 8006974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006976:	f7fd ff77 	bl	8004868 <HAL_GetTick>
 800697a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800697c:	e008      	b.n	8006990 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800697e:	f7fd ff73 	bl	8004868 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	2b02      	cmp	r3, #2
 800698a:	d901      	bls.n	8006990 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e19b      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006990:	4b2d      	ldr	r3, [pc, #180]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0f0      	beq.n	800697e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800699c:	4b2a      	ldr	r3, [pc, #168]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4927      	ldr	r1, [pc, #156]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	600b      	str	r3, [r1, #0]
 80069b0:	e015      	b.n	80069de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069b2:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_RCC_OscConfig+0x270>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd ff56 	bl	8004868 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fd ff52 	bl	8004868 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e17a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069d2:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d03a      	beq.n	8006a60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d019      	beq.n	8006a26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069f2:	4b17      	ldr	r3, [pc, #92]	; (8006a50 <HAL_RCC_OscConfig+0x274>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069f8:	f7fd ff36 	bl	8004868 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a00:	f7fd ff32 	bl	8004868 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e15a      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f000 fad8 	bl	8006fd4 <RCC_Delay>
 8006a24:	e01c      	b.n	8006a60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a26:	4b0a      	ldr	r3, [pc, #40]	; (8006a50 <HAL_RCC_OscConfig+0x274>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a2c:	f7fd ff1c 	bl	8004868 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a32:	e00f      	b.n	8006a54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a34:	f7fd ff18 	bl	8004868 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d908      	bls.n	8006a54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e140      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
 8006a46:	bf00      	nop
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	42420000 	.word	0x42420000
 8006a50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a54:	4b9e      	ldr	r3, [pc, #632]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e9      	bne.n	8006a34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80a6 	beq.w	8006bba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a72:	4b97      	ldr	r3, [pc, #604]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006a74:	69db      	ldr	r3, [r3, #28]
 8006a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10d      	bne.n	8006a9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a7e:	4b94      	ldr	r3, [pc, #592]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	4a93      	ldr	r2, [pc, #588]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a88:	61d3      	str	r3, [r2, #28]
 8006a8a:	4b91      	ldr	r3, [pc, #580]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a92:	60bb      	str	r3, [r7, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a96:	2301      	movs	r3, #1
 8006a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9a:	4b8e      	ldr	r3, [pc, #568]	; (8006cd4 <HAL_RCC_OscConfig+0x4f8>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d118      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006aa6:	4b8b      	ldr	r3, [pc, #556]	; (8006cd4 <HAL_RCC_OscConfig+0x4f8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a8a      	ldr	r2, [pc, #552]	; (8006cd4 <HAL_RCC_OscConfig+0x4f8>)
 8006aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ab2:	f7fd fed9 	bl	8004868 <HAL_GetTick>
 8006ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aba:	f7fd fed5 	bl	8004868 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b64      	cmp	r3, #100	; 0x64
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0fd      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006acc:	4b81      	ldr	r3, [pc, #516]	; (8006cd4 <HAL_RCC_OscConfig+0x4f8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d0f0      	beq.n	8006aba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d106      	bne.n	8006aee <HAL_RCC_OscConfig+0x312>
 8006ae0:	4b7b      	ldr	r3, [pc, #492]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	4a7a      	ldr	r2, [pc, #488]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	6213      	str	r3, [r2, #32]
 8006aec:	e02d      	b.n	8006b4a <HAL_RCC_OscConfig+0x36e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x334>
 8006af6:	4b76      	ldr	r3, [pc, #472]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	4a75      	ldr	r2, [pc, #468]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006afc:	f023 0301 	bic.w	r3, r3, #1
 8006b00:	6213      	str	r3, [r2, #32]
 8006b02:	4b73      	ldr	r3, [pc, #460]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	4a72      	ldr	r2, [pc, #456]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b08:	f023 0304 	bic.w	r3, r3, #4
 8006b0c:	6213      	str	r3, [r2, #32]
 8006b0e:	e01c      	b.n	8006b4a <HAL_RCC_OscConfig+0x36e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d10c      	bne.n	8006b32 <HAL_RCC_OscConfig+0x356>
 8006b18:	4b6d      	ldr	r3, [pc, #436]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	4a6c      	ldr	r2, [pc, #432]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b1e:	f043 0304 	orr.w	r3, r3, #4
 8006b22:	6213      	str	r3, [r2, #32]
 8006b24:	4b6a      	ldr	r3, [pc, #424]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	4a69      	ldr	r2, [pc, #420]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b2a:	f043 0301 	orr.w	r3, r3, #1
 8006b2e:	6213      	str	r3, [r2, #32]
 8006b30:	e00b      	b.n	8006b4a <HAL_RCC_OscConfig+0x36e>
 8006b32:	4b67      	ldr	r3, [pc, #412]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	4a66      	ldr	r2, [pc, #408]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	6213      	str	r3, [r2, #32]
 8006b3e:	4b64      	ldr	r3, [pc, #400]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	4a63      	ldr	r2, [pc, #396]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b44:	f023 0304 	bic.w	r3, r3, #4
 8006b48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d015      	beq.n	8006b7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b52:	f7fd fe89 	bl	8004868 <HAL_GetTick>
 8006b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b58:	e00a      	b.n	8006b70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b5a:	f7fd fe85 	bl	8004868 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e0ab      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b70:	4b57      	ldr	r3, [pc, #348]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d0ee      	beq.n	8006b5a <HAL_RCC_OscConfig+0x37e>
 8006b7c:	e014      	b.n	8006ba8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b7e:	f7fd fe73 	bl	8004868 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b84:	e00a      	b.n	8006b9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b86:	f7fd fe6f 	bl	8004868 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e095      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9c:	4b4c      	ldr	r3, [pc, #304]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ee      	bne.n	8006b86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d105      	bne.n	8006bba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bae:	4b48      	ldr	r3, [pc, #288]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	4a47      	ldr	r2, [pc, #284]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8081 	beq.w	8006cc6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bc4:	4b42      	ldr	r3, [pc, #264]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 030c 	and.w	r3, r3, #12
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d061      	beq.n	8006c94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d146      	bne.n	8006c66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_RCC_OscConfig+0x4fc>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bde:	f7fd fe43 	bl	8004868 <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006be6:	f7fd fe3f 	bl	8004868 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e067      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bf8:	4b35      	ldr	r3, [pc, #212]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c0c:	d108      	bne.n	8006c20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c0e:	4b30      	ldr	r3, [pc, #192]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	492d      	ldr	r1, [pc, #180]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c20:	4b2b      	ldr	r3, [pc, #172]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a19      	ldr	r1, [r3, #32]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	430b      	orrs	r3, r1
 8006c32:	4927      	ldr	r1, [pc, #156]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c38:	4b27      	ldr	r3, [pc, #156]	; (8006cd8 <HAL_RCC_OscConfig+0x4fc>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3e:	f7fd fe13 	bl	8004868 <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c44:	e008      	b.n	8006c58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c46:	f7fd fe0f 	bl	8004868 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e037      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c58:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <HAL_RCC_OscConfig+0x46a>
 8006c64:	e02f      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c66:	4b1c      	ldr	r3, [pc, #112]	; (8006cd8 <HAL_RCC_OscConfig+0x4fc>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c6c:	f7fd fdfc 	bl	8004868 <HAL_GetTick>
 8006c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c72:	e008      	b.n	8006c86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c74:	f7fd fdf8 	bl	8004868 <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e020      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f0      	bne.n	8006c74 <HAL_RCC_OscConfig+0x498>
 8006c92:	e018      	b.n	8006cc6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e013      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_RCC_OscConfig+0x4f4>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d106      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d001      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	40007000 	.word	0x40007000
 8006cd8:	42420060 	.word	0x42420060

08006cdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e0d0      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cf0:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d910      	bls.n	8006d20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cfe:	4b67      	ldr	r3, [pc, #412]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f023 0207 	bic.w	r2, r3, #7
 8006d06:	4965      	ldr	r1, [pc, #404]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0e:	4b63      	ldr	r3, [pc, #396]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0307 	and.w	r3, r3, #7
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e0b8      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d020      	beq.n	8006d6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d38:	4b59      	ldr	r3, [pc, #356]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a58      	ldr	r2, [pc, #352]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d005      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d50:	4b53      	ldr	r3, [pc, #332]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a52      	ldr	r2, [pc, #328]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d56:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d5c:	4b50      	ldr	r3, [pc, #320]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	494d      	ldr	r1, [pc, #308]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d040      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d82:	4b47      	ldr	r3, [pc, #284]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d115      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e07f      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d107      	bne.n	8006daa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d9a:	4b41      	ldr	r3, [pc, #260]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e073      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006daa:	4b3d      	ldr	r3, [pc, #244]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e06b      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dba:	4b39      	ldr	r3, [pc, #228]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f023 0203 	bic.w	r2, r3, #3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4936      	ldr	r1, [pc, #216]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006dcc:	f7fd fd4c 	bl	8004868 <HAL_GetTick>
 8006dd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd4:	f7fd fd48 	bl	8004868 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e053      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dea:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f003 020c 	and.w	r2, r3, #12
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d1eb      	bne.n	8006dd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b27      	ldr	r3, [pc, #156]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0307 	and.w	r3, r3, #7
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d210      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b24      	ldr	r3, [pc, #144]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f023 0207 	bic.w	r2, r3, #7
 8006e12:	4922      	ldr	r1, [pc, #136]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e1a:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <HAL_RCC_ClockConfig+0x1c0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d001      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e032      	b.n	8006e92 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e38:	4b19      	ldr	r3, [pc, #100]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4916      	ldr	r1, [pc, #88]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0308 	and.w	r3, r3, #8
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d009      	beq.n	8006e6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e56:	4b12      	ldr	r3, [pc, #72]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	490e      	ldr	r1, [pc, #56]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e6a:	f000 f821 	bl	8006eb0 <HAL_RCC_GetSysClockFreq>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_ClockConfig+0x1c4>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	490a      	ldr	r1, [pc, #40]	; (8006ea4 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7c:	5ccb      	ldrb	r3, [r1, r3]
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	4a09      	ldr	r2, [pc, #36]	; (8006ea8 <HAL_RCC_ClockConfig+0x1cc>)
 8006e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <HAL_RCC_ClockConfig+0x1d0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fd fcaa 	bl	80047e4 <HAL_InitTick>

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40022000 	.word	0x40022000
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	0800bf28 	.word	0x0800bf28
 8006ea8:	20000000 	.word	0x20000000
 8006eac:	20000004 	.word	0x20000004

08006eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006eb0:	b490      	push	{r4, r7}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006eb6:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006eb8:	1d3c      	adds	r4, r7, #4
 8006eba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ebc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ec0:	f240 2301 	movw	r3, #513	; 0x201
 8006ec4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	2300      	movs	r3, #0
 8006ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006eda:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d002      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x40>
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d003      	beq.n	8006ef6 <HAL_RCC_GetSysClockFreq+0x46>
 8006eee:	e02d      	b.n	8006f4c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef2:	623b      	str	r3, [r7, #32]
      break;
 8006ef4:	e02d      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	0c9b      	lsrs	r3, r3, #18
 8006efa:	f003 030f 	and.w	r3, r3, #15
 8006efe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f02:	4413      	add	r3, r2
 8006f04:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006f08:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006f14:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	0c5b      	lsrs	r3, r3, #17
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006f22:	4413      	add	r3, r2
 8006f24:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f28:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	4a0e      	ldr	r2, [pc, #56]	; (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f2e:	fb02 f203 	mul.w	r2, r2, r3
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
 8006f3a:	e004      	b.n	8006f46 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f40:	fb02 f303 	mul.w	r3, r2, r3
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	623b      	str	r3, [r7, #32]
      break;
 8006f4a:	e002      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f4e:	623b      	str	r3, [r7, #32]
      break;
 8006f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f52:	6a3b      	ldr	r3, [r7, #32]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3728      	adds	r7, #40	; 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc90      	pop	{r4, r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	0800bf18 	.word	0x0800bf18
 8006f64:	40021000 	.word	0x40021000
 8006f68:	007a1200 	.word	0x007a1200
 8006f6c:	003d0900 	.word	0x003d0900

08006f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	20000000 	.word	0x20000000

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f88:	f7ff fff2 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4903      	ldr	r1, [pc, #12]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9a:	5ccb      	ldrb	r3, [r1, r3]
 8006f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	0800bf38 	.word	0x0800bf38

08006fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fb0:	f7ff ffde 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	0adb      	lsrs	r3, r3, #11
 8006fbc:	f003 0307 	and.w	r3, r3, #7
 8006fc0:	4903      	ldr	r1, [pc, #12]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc2:	5ccb      	ldrb	r3, [r1, r3]
 8006fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	40021000 	.word	0x40021000
 8006fd0:	0800bf38 	.word	0x0800bf38

08006fd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <RCC_Delay+0x34>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <RCC_Delay+0x38>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	0a5b      	lsrs	r3, r3, #9
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ff0:	bf00      	nop
  }
  while (Delay --);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1e5a      	subs	r2, r3, #1
 8006ff6:	60fa      	str	r2, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f9      	bne.n	8006ff0 <RCC_Delay+0x1c>
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	bc80      	pop	{r7}
 8007006:	4770      	bx	lr
 8007008:	20000000 	.word	0x20000000
 800700c:	10624dd3 	.word	0x10624dd3

08007010 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d07d      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800702c:	2300      	movs	r3, #0
 800702e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007030:	4b4f      	ldr	r3, [pc, #316]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007032:	69db      	ldr	r3, [r3, #28]
 8007034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10d      	bne.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703c:	4b4c      	ldr	r3, [pc, #304]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	4a4b      	ldr	r2, [pc, #300]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007046:	61d3      	str	r3, [r2, #28]
 8007048:	4b49      	ldr	r3, [pc, #292]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800704a:	69db      	ldr	r3, [r3, #28]
 800704c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007054:	2301      	movs	r3, #1
 8007056:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007058:	4b46      	ldr	r3, [pc, #280]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007060:	2b00      	cmp	r3, #0
 8007062:	d118      	bne.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007064:	4b43      	ldr	r3, [pc, #268]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a42      	ldr	r2, [pc, #264]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800706a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007070:	f7fd fbfa 	bl	8004868 <HAL_GetTick>
 8007074:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007076:	e008      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007078:	f7fd fbf6 	bl	8004868 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b64      	cmp	r3, #100	; 0x64
 8007084:	d901      	bls.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e06d      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708a:	4b3a      	ldr	r3, [pc, #232]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007096:	4b36      	ldr	r3, [pc, #216]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d02e      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d027      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070b4:	4b2e      	ldr	r3, [pc, #184]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b6:	6a1b      	ldr	r3, [r3, #32]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070be:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070c4:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070ca:	4a29      	ldr	r2, [pc, #164]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d014      	beq.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070da:	f7fd fbc5 	bl	8004868 <HAL_GetTick>
 80070de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e0:	e00a      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070e2:	f7fd fbc1 	bl	8004868 <HAL_GetTick>
 80070e6:	4602      	mov	r2, r0
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d901      	bls.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070f4:	2303      	movs	r3, #3
 80070f6:	e036      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	f003 0302 	and.w	r3, r3, #2
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ee      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007104:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4917      	ldr	r1, [pc, #92]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007112:	4313      	orrs	r3, r2
 8007114:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d105      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800711c:	4b14      	ldr	r3, [pc, #80]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	4a13      	ldr	r2, [pc, #76]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007126:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d008      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007134:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	490b      	ldr	r1, [pc, #44]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0310 	and.w	r3, r3, #16
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007152:	4b07      	ldr	r3, [pc, #28]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	4904      	ldr	r1, [pc, #16]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007160:	4313      	orrs	r3, r2
 8007162:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3718      	adds	r7, #24
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40021000 	.word	0x40021000
 8007174:	40007000 	.word	0x40007000
 8007178:	42420440 	.word	0x42420440

0800717c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e076      	b.n	800727c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d108      	bne.n	80071a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800719e:	d009      	beq.n	80071b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	61da      	str	r2, [r3, #28]
 80071a6:	e005      	b.n	80071b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fd f8b0 	bl	8004334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071fc:	431a      	orrs	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007206:	431a      	orrs	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	431a      	orrs	r2, r3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	431a      	orrs	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	699b      	ldr	r3, [r3, #24]
 8007220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	ea42 0103 	orr.w	r1, r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	430a      	orrs	r2, r1
 800724a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	0c1a      	lsrs	r2, r3, #16
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f002 0204 	and.w	r2, r2, #4
 800725a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69da      	ldr	r2, [r3, #28]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800726a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b088      	sub	sp, #32
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_SPI_Transmit+0x22>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e126      	b.n	80074f4 <HAL_SPI_Transmit+0x270>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ae:	f7fd fadb 	bl	8004868 <HAL_GetTick>
 80072b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
 80072c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072c8:	e10b      	b.n	80074e2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_SPI_Transmit+0x52>
 80072d0:	88fb      	ldrh	r3, [r7, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d102      	bne.n	80072dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072da:	e102      	b.n	80074e2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2203      	movs	r2, #3
 80072e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	88fa      	ldrh	r2, [r7, #6]
 80072f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	88fa      	ldrh	r2, [r7, #6]
 80072fa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007322:	d10f      	bne.n	8007344 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007332:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681a      	ldr	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007342:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d007      	beq.n	8007362 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800736a:	d14b      	bne.n	8007404 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <HAL_SPI_Transmit+0xf6>
 8007374:	8afb      	ldrh	r3, [r7, #22]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d13e      	bne.n	80073f8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	1c9a      	adds	r2, r3, #2
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007394:	b29b      	uxth	r3, r3
 8007396:	3b01      	subs	r3, #1
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800739e:	e02b      	b.n	80073f8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d112      	bne.n	80073d4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	881a      	ldrh	r2, [r3, #0]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	1c9a      	adds	r2, r3, #2
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80073d2:	e011      	b.n	80073f8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073d4:	f7fd fa48 	bl	8004868 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d803      	bhi.n	80073ec <HAL_SPI_Transmit+0x168>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_Transmit+0x16e>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073f6:	e074      	b.n	80074e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1ce      	bne.n	80073a0 <HAL_SPI_Transmit+0x11c>
 8007402:	e04c      	b.n	800749e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_SPI_Transmit+0x18e>
 800740c:	8afb      	ldrh	r3, [r7, #22]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d140      	bne.n	8007494 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007438:	e02c      	b.n	8007494 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b02      	cmp	r3, #2
 8007446:	d113      	bne.n	8007470 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	330c      	adds	r3, #12
 8007452:	7812      	ldrb	r2, [r2, #0]
 8007454:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007464:	b29b      	uxth	r3, r3
 8007466:	3b01      	subs	r3, #1
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	86da      	strh	r2, [r3, #54]	; 0x36
 800746e:	e011      	b.n	8007494 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007470:	f7fd f9fa 	bl	8004868 <HAL_GetTick>
 8007474:	4602      	mov	r2, r0
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d803      	bhi.n	8007488 <HAL_SPI_Transmit+0x204>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007486:	d102      	bne.n	800748e <HAL_SPI_Transmit+0x20a>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d102      	bne.n	8007494 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007492:	e026      	b.n	80074e2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1cd      	bne.n	800743a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fb64 	bl	8007b70 <SPI_EndRxTxTransaction>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d002      	beq.n	80074b4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2220      	movs	r2, #32
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e000      	b.n	80074e2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80074e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	60b9      	str	r1, [r7, #8]
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800750a:	2301      	movs	r3, #1
 800750c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x26>
 800751e:	2302      	movs	r3, #2
 8007520:	e18a      	b.n	8007838 <HAL_SPI_TransmitReceive+0x33c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800752a:	f7fd f99d 	bl	8004868 <HAL_GetTick>
 800752e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007540:	887b      	ldrh	r3, [r7, #2]
 8007542:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007548:	2b01      	cmp	r3, #1
 800754a:	d00f      	beq.n	800756c <HAL_SPI_TransmitReceive+0x70>
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007552:	d107      	bne.n	8007564 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d103      	bne.n	8007564 <HAL_SPI_TransmitReceive+0x68>
 800755c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007560:	2b04      	cmp	r3, #4
 8007562:	d003      	beq.n	800756c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007564:	2302      	movs	r3, #2
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800756a:	e15b      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d005      	beq.n	800757e <HAL_SPI_TransmitReceive+0x82>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_SPI_TransmitReceive+0x82>
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d103      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007584:	e14e      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b04      	cmp	r3, #4
 8007590:	d003      	beq.n	800759a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2205      	movs	r2, #5
 8007596:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	887a      	ldrh	r2, [r7, #2]
 80075aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	887a      	ldrh	r2, [r7, #2]
 80075b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	887a      	ldrh	r2, [r7, #2]
 80075bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	887a      	ldrh	r2, [r7, #2]
 80075c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2200      	movs	r2, #0
 80075c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075da:	2b40      	cmp	r3, #64	; 0x40
 80075dc:	d007      	beq.n	80075ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f6:	d178      	bne.n	80076ea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_SPI_TransmitReceive+0x10a>
 8007600:	8b7b      	ldrh	r3, [r7, #26]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d166      	bne.n	80076d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	881a      	ldrh	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	1c9a      	adds	r2, r3, #2
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800762a:	e053      	b.n	80076d4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 0302 	and.w	r3, r3, #2
 8007636:	2b02      	cmp	r3, #2
 8007638:	d11b      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x176>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	d016      	beq.n	8007672 <HAL_SPI_TransmitReceive+0x176>
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d113      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	881a      	ldrh	r2, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	1c9a      	adds	r2, r3, #2
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007664:	b29b      	uxth	r3, r3
 8007666:	3b01      	subs	r3, #1
 8007668:	b29a      	uxth	r2, r3
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b01      	cmp	r3, #1
 800767e:	d119      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x1b8>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007684:	b29b      	uxth	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d014      	beq.n	80076b4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68da      	ldr	r2, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	b292      	uxth	r2, r2
 8007696:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769c:	1c9a      	adds	r2, r3, #2
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076b0:	2301      	movs	r3, #1
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076b4:	f7fd f8d8 	bl	8004868 <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d807      	bhi.n	80076d4 <HAL_SPI_TransmitReceive+0x1d8>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d003      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076d2:	e0a7      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1a6      	bne.n	800762c <HAL_SPI_TransmitReceive+0x130>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1a1      	bne.n	800762c <HAL_SPI_TransmitReceive+0x130>
 80076e8:	e07c      	b.n	80077e4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d002      	beq.n	80076f8 <HAL_SPI_TransmitReceive+0x1fc>
 80076f2:	8b7b      	ldrh	r3, [r7, #26]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d16b      	bne.n	80077d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	330c      	adds	r3, #12
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007714:	b29b      	uxth	r3, r3
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800771e:	e057      	b.n	80077d0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d11c      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x26c>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007732:	b29b      	uxth	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <HAL_SPI_TransmitReceive+0x26c>
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	2b01      	cmp	r3, #1
 800773c:	d114      	bne.n	8007768 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	330c      	adds	r3, #12
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29a      	uxth	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b01      	cmp	r3, #1
 8007774:	d119      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x2ae>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d014      	beq.n	80077aa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800779c:	b29b      	uxth	r3, r3
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077a6:	2301      	movs	r3, #1
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077aa:	f7fd f85d 	bl	8004868 <HAL_GetTick>
 80077ae:	4602      	mov	r2, r0
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d803      	bhi.n	80077c2 <HAL_SPI_TransmitReceive+0x2c6>
 80077ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c0:	d102      	bne.n	80077c8 <HAL_SPI_TransmitReceive+0x2cc>
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d103      	bne.n	80077d0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80077ce:	e029      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1a2      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x224>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d19d      	bne.n	8007720 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 f9c1 	bl	8007b70 <SPI_EndRxTxTransaction>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d006      	beq.n	8007802 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007800:	e010      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	617b      	str	r3, [r7, #20]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	617b      	str	r3, [r7, #20]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	e000      	b.n	8007824 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007822:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007838:	4618      	mov	r0, r3
 800783a:	3730      	adds	r7, #48	; 0x30
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b088      	sub	sp, #32
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	099b      	lsrs	r3, r3, #6
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10f      	bne.n	8007884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	099b      	lsrs	r3, r3, #6
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
    return;
 8007882:	e0be      	b.n	8007a02 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00a      	beq.n	80078a6 <HAL_SPI_IRQHandler+0x66>
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	09db      	lsrs	r3, r3, #7
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
    return;
 80078a4:	e0ad      	b.n	8007a02 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <HAL_SPI_IRQHandler+0x80>
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	099b      	lsrs	r3, r3, #6
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80a1 	beq.w	8007a02 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 809a 	beq.w	8007a02 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	099b      	lsrs	r3, r3, #6
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d023      	beq.n	8007922 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d011      	beq.n	800790a <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ea:	f043 0204 	orr.w	r2, r3, #4
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078f2:	2300      	movs	r3, #0
 80078f4:	617b      	str	r3, [r7, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	617b      	str	r3, [r7, #20]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	e00b      	b.n	8007922 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	613b      	str	r3, [r7, #16]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	693b      	ldr	r3, [r7, #16]
        return;
 8007920:	e06f      	b.n	8007a02 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d014      	beq.n	8007958 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007932:	f043 0201 	orr.w	r2, r3, #1
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	60fb      	str	r3, [r7, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795c:	2b00      	cmp	r3, #0
 800795e:	d04f      	beq.n	8007a00 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800796e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_SPI_IRQHandler+0x14c>
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d034      	beq.n	80079f6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f022 0203 	bic.w	r2, r2, #3
 800799a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	4a17      	ldr	r2, [pc, #92]	; (8007a08 <HAL_SPI_IRQHandler+0x1c8>)
 80079aa:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fcc9 	bl	8005348 <HAL_DMA_Abort_IT>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d016      	beq.n	80079fe <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079d4:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <HAL_SPI_IRQHandler+0x1c8>)
 80079d6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fd fcb3 	bl	8005348 <HAL_DMA_Abort_IT>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80079f4:	e003      	b.n	80079fe <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f808 	bl	8007a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80079fc:	e000      	b.n	8007a00 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80079fe:	bf00      	nop
    return;
 8007a00:	bf00      	nop
  }
}
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	08007a39 	.word	0x08007a39

08007a0c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bc80      	pop	{r7}
 8007a1c:	4770      	bx	lr

08007a1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b083      	sub	sp, #12
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a2c:	b2db      	uxtb	r3, r3
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bc80      	pop	{r7}
 8007a36:	4770      	bx	lr

08007a38 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7ff ffda 	bl	8007a0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a70:	f7fc fefa 	bl	8004868 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a80:	f7fc fef2 	bl	8004868 <HAL_GetTick>
 8007a84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a86:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	015b      	lsls	r3, r3, #5
 8007a8c:	0d1b      	lsrs	r3, r3, #20
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	fb02 f303 	mul.w	r3, r2, r3
 8007a94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a96:	e054      	b.n	8007b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d050      	beq.n	8007b42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007aa0:	f7fc fee2 	bl	8004868 <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	1ad3      	subs	r3, r2, r3
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d902      	bls.n	8007ab6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d13d      	bne.n	8007b32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ac4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ace:	d111      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad8:	d004      	beq.n	8007ae4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae2:	d107      	bne.n	8007af4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007afc:	d10f      	bne.n	8007b1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2201      	movs	r2, #1
 8007b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e017      	b.n	8007b62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d101      	bne.n	8007b3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	bf0c      	ite	eq
 8007b52:	2301      	moveq	r3, #1
 8007b54:	2300      	movne	r3, #0
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	461a      	mov	r2, r3
 8007b5a:	79fb      	ldrb	r3, [r7, #7]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d19b      	bne.n	8007a98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000000 	.word	0x20000000

08007b70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	2180      	movs	r1, #128	; 0x80
 8007b86:	68f8      	ldr	r0, [r7, #12]
 8007b88:	f7ff ff6a 	bl	8007a60 <SPI_WaitFlagStateUntilTimeout>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d007      	beq.n	8007ba2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e000      	b.n	8007ba4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e041      	b.n	8007c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d106      	bne.n	8007bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7fc fc00 	bl	80043d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f000 fa9e 	bl	800812c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d001      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e03a      	b.n	8007cda <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a18      	ldr	r2, [pc, #96]	; (8007ce4 <HAL_TIM_Base_Start_IT+0x98>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x58>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8e:	d009      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x58>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_TIM_Base_Start_IT+0x58>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a13      	ldr	r2, [pc, #76]	; (8007cec <HAL_TIM_Base_Start_IT+0xa0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d111      	bne.n	8007cc8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0307 	and.w	r3, r3, #7
 8007cae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d010      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc6:	e007      	b.n	8007cd8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f042 0201 	orr.w	r2, r2, #1
 8007cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bc80      	pop	{r7}
 8007ce2:	4770      	bx	lr
 8007ce4:	40012c00 	.word	0x40012c00
 8007ce8:	40000400 	.word	0x40000400
 8007cec:	40000800 	.word	0x40000800

08007cf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6a1a      	ldr	r2, [r3, #32]
 8007d0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d12:	4013      	ands	r3, r2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10f      	bne.n	8007d38 <HAL_TIM_Base_Stop_IT+0x48>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6a1a      	ldr	r2, [r3, #32]
 8007d1e:	f240 4344 	movw	r3, #1092	; 0x444
 8007d22:	4013      	ands	r3, r2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d107      	bne.n	8007d38 <HAL_TIM_Base_Stop_IT+0x48>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f022 0201 	bic.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0202 	mvn.w	r2, #2
 8007d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f9b1 	bl	80080f6 <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f9a4 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 f9b3 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0204 	mvn.w	r2, #4
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f987 	bl	80080f6 <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f97a 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f989 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0208 	mvn.w	r2, #8
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2204      	movs	r2, #4
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f95d 	bl	80080f6 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f950 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f95f 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d122      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d11b      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0210 	mvn.w	r2, #16
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f933 	bl	80080f6 <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f926 	bl	80080e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f935 	bl	8008108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d10e      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d107      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0201 	mvn.w	r2, #1
 8007ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f7fb ffbc 	bl	8003e48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b80      	cmp	r3, #128	; 0x80
 8007edc:	d10e      	bne.n	8007efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d107      	bne.n	8007efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa77 	bl	80083ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d10e      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d107      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f8f9 	bl	800811a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d10e      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d107      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0220 	mvn.w	r2, #32
 8007f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa42 	bl	80083d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIM_ConfigClockSource+0x18>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e0b3      	b.n	80080dc <HAL_TIM_ConfigClockSource+0x180>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fac:	d03e      	beq.n	800802c <HAL_TIM_ConfigClockSource+0xd0>
 8007fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb2:	f200 8087 	bhi.w	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fba:	f000 8085 	beq.w	80080c8 <HAL_TIM_ConfigClockSource+0x16c>
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fc2:	d87f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fc4:	2b70      	cmp	r3, #112	; 0x70
 8007fc6:	d01a      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xa2>
 8007fc8:	2b70      	cmp	r3, #112	; 0x70
 8007fca:	d87b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fcc:	2b60      	cmp	r3, #96	; 0x60
 8007fce:	d050      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0x116>
 8007fd0:	2b60      	cmp	r3, #96	; 0x60
 8007fd2:	d877      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fd4:	2b50      	cmp	r3, #80	; 0x50
 8007fd6:	d03c      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0xf6>
 8007fd8:	2b50      	cmp	r3, #80	; 0x50
 8007fda:	d873      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fdc:	2b40      	cmp	r3, #64	; 0x40
 8007fde:	d058      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x136>
 8007fe0:	2b40      	cmp	r3, #64	; 0x40
 8007fe2:	d86f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fe4:	2b30      	cmp	r3, #48	; 0x30
 8007fe6:	d064      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x156>
 8007fe8:	2b30      	cmp	r3, #48	; 0x30
 8007fea:	d86b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d060      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x156>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d867      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d05c      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x156>
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d05a      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007ffc:	e062      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6899      	ldr	r1, [r3, #8]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	f000 f966 	bl	80082de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008020:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	609a      	str	r2, [r3, #8]
      break;
 800802a:	e04e      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6899      	ldr	r1, [r3, #8]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f000 f94f 	bl	80082de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800804e:	609a      	str	r2, [r3, #8]
      break;
 8008050:	e03b      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6818      	ldr	r0, [r3, #0]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6859      	ldr	r1, [r3, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	461a      	mov	r2, r3
 8008060:	f000 f8c6 	bl	80081f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2150      	movs	r1, #80	; 0x50
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f91d 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8008070:	e02b      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	461a      	mov	r2, r3
 8008080:	f000 f8e4 	bl	800824c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2160      	movs	r1, #96	; 0x60
 800808a:	4618      	mov	r0, r3
 800808c:	f000 f90d 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 8008090:	e01b      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 f8a6 	bl	80081f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2140      	movs	r1, #64	; 0x40
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f8fd 	bl	80082aa <TIM_ITRx_SetConfig>
      break;
 80080b0:	e00b      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f000 f8f4 	bl	80082aa <TIM_ITRx_SetConfig>
        break;
 80080c2:	e002      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080c4:	bf00      	nop
 80080c6:	e000      	b.n	80080ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80080c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2201      	movs	r2, #1
 80080ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bc80      	pop	{r7}
 80080f4:	4770      	bx	lr

080080f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr

08008108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	bc80      	pop	{r7}
 8008118:	4770      	bx	lr

0800811a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	bc80      	pop	{r7}
 800812a:	4770      	bx	lr

0800812c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a29      	ldr	r2, [pc, #164]	; (80081e4 <TIM_Base_SetConfig+0xb8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d00b      	beq.n	800815c <TIM_Base_SetConfig+0x30>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800814a:	d007      	beq.n	800815c <TIM_Base_SetConfig+0x30>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a26      	ldr	r2, [pc, #152]	; (80081e8 <TIM_Base_SetConfig+0xbc>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d003      	beq.n	800815c <TIM_Base_SetConfig+0x30>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a25      	ldr	r2, [pc, #148]	; (80081ec <TIM_Base_SetConfig+0xc0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d108      	bne.n	800816e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <TIM_Base_SetConfig+0xb8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00b      	beq.n	800818e <TIM_Base_SetConfig+0x62>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817c:	d007      	beq.n	800818e <TIM_Base_SetConfig+0x62>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a19      	ldr	r2, [pc, #100]	; (80081e8 <TIM_Base_SetConfig+0xbc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d003      	beq.n	800818e <TIM_Base_SetConfig+0x62>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a18      	ldr	r2, [pc, #96]	; (80081ec <TIM_Base_SetConfig+0xc0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d108      	bne.n	80081a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	4313      	orrs	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	689a      	ldr	r2, [r3, #8]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <TIM_Base_SetConfig+0xb8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d103      	bne.n	80081d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	691a      	ldr	r2, [r3, #16]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	615a      	str	r2, [r3, #20]
}
 80081da:	bf00      	nop
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bc80      	pop	{r7}
 80081e2:	4770      	bx	lr
 80081e4:	40012c00 	.word	0x40012c00
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800

080081f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	f023 0201 	bic.w	r2, r3, #1
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	699b      	ldr	r3, [r3, #24]
 8008212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800821a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	011b      	lsls	r3, r3, #4
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	4313      	orrs	r3, r2
 8008224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f023 030a 	bic.w	r3, r3, #10
 800822c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	621a      	str	r2, [r3, #32]
}
 8008242:	bf00      	nop
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr

0800824c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	f023 0210 	bic.w	r2, r3, #16
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008276:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	031b      	lsls	r3, r3, #12
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008288:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	011b      	lsls	r3, r3, #4
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	621a      	str	r2, [r3, #32]
}
 80082a0:	bf00      	nop
 80082a2:	371c      	adds	r7, #28
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr

080082aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	f043 0307 	orr.w	r3, r3, #7
 80082cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	609a      	str	r2, [r3, #8]
}
 80082d4:	bf00      	nop
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082de:	b480      	push	{r7}
 80082e0:	b087      	sub	sp, #28
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
 80082ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	021a      	lsls	r2, r3, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	431a      	orrs	r2, r3
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	4313      	orrs	r3, r2
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	609a      	str	r2, [r3, #8]
}
 8008312:	bf00      	nop
 8008314:	371c      	adds	r7, #28
 8008316:	46bd      	mov	sp, r7
 8008318:	bc80      	pop	{r7}
 800831a:	4770      	bx	lr

0800831c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008330:	2302      	movs	r3, #2
 8008332:	e046      	b.n	80083c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800835a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a16      	ldr	r2, [pc, #88]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00e      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008380:	d009      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a12      	ldr	r2, [pc, #72]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a10      	ldr	r2, [pc, #64]	; (80083d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d10c      	bne.n	80083b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800839c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	68ba      	ldr	r2, [r7, #8]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bc80      	pop	{r7}
 80083ca:	4770      	bx	lr
 80083cc:	40012c00 	.word	0x40012c00
 80083d0:	40000400 	.word	0x40000400
 80083d4:	40000800 	.word	0x40000800

080083d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bc80      	pop	{r7}
 80083e8:	4770      	bx	lr

080083ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083ea:	b480      	push	{r7}
 80083ec:	b083      	sub	sp, #12
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e03f      	b.n	800848e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d106      	bne.n	8008428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f7fb fffe 	bl	8004424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2224      	movs	r2, #36	; 0x24
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68da      	ldr	r2, [r3, #12]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800843e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f905 	bl	8008650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691a      	ldr	r2, [r3, #16]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	695a      	ldr	r2, [r3, #20]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2220      	movs	r2, #32
 8008488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b08a      	sub	sp, #40	; 0x28
 800849a:	af02      	add	r7, sp, #8
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b20      	cmp	r3, #32
 80084b4:	d17c      	bne.n	80085b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <HAL_UART_Transmit+0x2c>
 80084bc:	88fb      	ldrh	r3, [r7, #6]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e075      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_UART_Transmit+0x3e>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e06e      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2221      	movs	r2, #33	; 0x21
 80084e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ea:	f7fc f9bd 	bl	8004868 <HAL_GetTick>
 80084ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	88fa      	ldrh	r2, [r7, #6]
 80084fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008504:	d108      	bne.n	8008518 <HAL_UART_Transmit+0x82>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d104      	bne.n	8008518 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800850e:	2300      	movs	r3, #0
 8008510:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	61bb      	str	r3, [r7, #24]
 8008516:	e003      	b.n	8008520 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008528:	e02a      	b.n	8008580 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2200      	movs	r2, #0
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 f840 	bl	80085ba <UART_WaitOnFlagUntilTimeout>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e036      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10b      	bne.n	8008562 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	881b      	ldrh	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008558:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	3302      	adds	r3, #2
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	e007      	b.n	8008572 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	781a      	ldrb	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800856c:	69fb      	ldr	r3, [r7, #28]
 800856e:	3301      	adds	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008576:	b29b      	uxth	r3, r3
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008584:	b29b      	uxth	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1cf      	bne.n	800852a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2200      	movs	r2, #0
 8008592:	2140      	movs	r1, #64	; 0x40
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 f810 	bl	80085ba <UART_WaitOnFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e006      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e000      	b.n	80085b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085b0:	2302      	movs	r3, #2
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3720      	adds	r7, #32
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	603b      	str	r3, [r7, #0]
 80085c6:	4613      	mov	r3, r2
 80085c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ca:	e02c      	b.n	8008626 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d2:	d028      	beq.n	8008626 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d007      	beq.n	80085ea <UART_WaitOnFlagUntilTimeout+0x30>
 80085da:	f7fc f945 	bl	8004868 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	69ba      	ldr	r2, [r7, #24]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d21d      	bcs.n	8008626 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80085f8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695a      	ldr	r2, [r3, #20]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e00f      	b.n	8008646 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	4013      	ands	r3, r2
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	461a      	mov	r2, r3
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	429a      	cmp	r2, r3
 8008642:	d0c3      	beq.n	80085cc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689a      	ldr	r2, [r3, #8]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	431a      	orrs	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	4313      	orrs	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800868a:	f023 030c 	bic.w	r3, r3, #12
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	430b      	orrs	r3, r1
 8008696:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699a      	ldr	r2, [r3, #24]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2c      	ldr	r2, [pc, #176]	; (8008764 <UART_SetConfig+0x114>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d103      	bne.n	80086c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80086b8:	f7fe fc78 	bl	8006fac <HAL_RCC_GetPCLK2Freq>
 80086bc:	60f8      	str	r0, [r7, #12]
 80086be:	e002      	b.n	80086c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80086c0:	f7fe fc60 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 80086c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009a      	lsls	r2, r3, #2
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086dc:	4a22      	ldr	r2, [pc, #136]	; (8008768 <UART_SetConfig+0x118>)
 80086de:	fba2 2303 	umull	r2, r3, r2, r3
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	0119      	lsls	r1, r3, #4
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	4613      	mov	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4413      	add	r3, r2
 80086ee:	009a      	lsls	r2, r3, #2
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <UART_SetConfig+0x118>)
 80086fe:	fba3 0302 	umull	r0, r3, r3, r2
 8008702:	095b      	lsrs	r3, r3, #5
 8008704:	2064      	movs	r0, #100	; 0x64
 8008706:	fb00 f303 	mul.w	r3, r0, r3
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	011b      	lsls	r3, r3, #4
 800870e:	3332      	adds	r3, #50	; 0x32
 8008710:	4a15      	ldr	r2, [pc, #84]	; (8008768 <UART_SetConfig+0x118>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	095b      	lsrs	r3, r3, #5
 8008718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800871c:	4419      	add	r1, r3
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009a      	lsls	r2, r3, #2
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	fbb2 f2f3 	udiv	r2, r2, r3
 8008734:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <UART_SetConfig+0x118>)
 8008736:	fba3 0302 	umull	r0, r3, r3, r2
 800873a:	095b      	lsrs	r3, r3, #5
 800873c:	2064      	movs	r0, #100	; 0x64
 800873e:	fb00 f303 	mul.w	r3, r0, r3
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	011b      	lsls	r3, r3, #4
 8008746:	3332      	adds	r3, #50	; 0x32
 8008748:	4a07      	ldr	r2, [pc, #28]	; (8008768 <UART_SetConfig+0x118>)
 800874a:	fba2 2303 	umull	r2, r3, r2, r3
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	f003 020f 	and.w	r2, r3, #15
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	440a      	add	r2, r1
 800875a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	40013800 	.word	0x40013800
 8008768:	51eb851f 	.word	0x51eb851f

0800876c <atoi>:
 800876c:	220a      	movs	r2, #10
 800876e:	2100      	movs	r1, #0
 8008770:	f000 bd52 	b.w	8009218 <strtol>

08008774 <__errno>:
 8008774:	4b01      	ldr	r3, [pc, #4]	; (800877c <__errno+0x8>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	2000000c 	.word	0x2000000c

08008780 <__libc_init_array>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	2600      	movs	r6, #0
 8008784:	4d0c      	ldr	r5, [pc, #48]	; (80087b8 <__libc_init_array+0x38>)
 8008786:	4c0d      	ldr	r4, [pc, #52]	; (80087bc <__libc_init_array+0x3c>)
 8008788:	1b64      	subs	r4, r4, r5
 800878a:	10a4      	asrs	r4, r4, #2
 800878c:	42a6      	cmp	r6, r4
 800878e:	d109      	bne.n	80087a4 <__libc_init_array+0x24>
 8008790:	f003 fae4 	bl	800bd5c <_init>
 8008794:	2600      	movs	r6, #0
 8008796:	4d0a      	ldr	r5, [pc, #40]	; (80087c0 <__libc_init_array+0x40>)
 8008798:	4c0a      	ldr	r4, [pc, #40]	; (80087c4 <__libc_init_array+0x44>)
 800879a:	1b64      	subs	r4, r4, r5
 800879c:	10a4      	asrs	r4, r4, #2
 800879e:	42a6      	cmp	r6, r4
 80087a0:	d105      	bne.n	80087ae <__libc_init_array+0x2e>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a8:	4798      	blx	r3
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7ee      	b.n	800878c <__libc_init_array+0xc>
 80087ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b2:	4798      	blx	r3
 80087b4:	3601      	adds	r6, #1
 80087b6:	e7f2      	b.n	800879e <__libc_init_array+0x1e>
 80087b8:	0800c3c8 	.word	0x0800c3c8
 80087bc:	0800c3c8 	.word	0x0800c3c8
 80087c0:	0800c3c8 	.word	0x0800c3c8
 80087c4:	0800c3cc 	.word	0x0800c3cc

080087c8 <__itoa>:
 80087c8:	1e93      	subs	r3, r2, #2
 80087ca:	2b22      	cmp	r3, #34	; 0x22
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	d904      	bls.n	80087dc <__itoa+0x14>
 80087d2:	2300      	movs	r3, #0
 80087d4:	461c      	mov	r4, r3
 80087d6:	700b      	strb	r3, [r1, #0]
 80087d8:	4620      	mov	r0, r4
 80087da:	bd10      	pop	{r4, pc}
 80087dc:	2a0a      	cmp	r2, #10
 80087de:	d109      	bne.n	80087f4 <__itoa+0x2c>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	da07      	bge.n	80087f4 <__itoa+0x2c>
 80087e4:	232d      	movs	r3, #45	; 0x2d
 80087e6:	700b      	strb	r3, [r1, #0]
 80087e8:	2101      	movs	r1, #1
 80087ea:	4240      	negs	r0, r0
 80087ec:	4421      	add	r1, r4
 80087ee:	f000 fd1d 	bl	800922c <__utoa>
 80087f2:	e7f1      	b.n	80087d8 <__itoa+0x10>
 80087f4:	2100      	movs	r1, #0
 80087f6:	e7f9      	b.n	80087ec <__itoa+0x24>

080087f8 <itoa>:
 80087f8:	f7ff bfe6 	b.w	80087c8 <__itoa>

080087fc <memset>:
 80087fc:	4603      	mov	r3, r0
 80087fe:	4402      	add	r2, r0
 8008800:	4293      	cmp	r3, r2
 8008802:	d100      	bne.n	8008806 <memset+0xa>
 8008804:	4770      	bx	lr
 8008806:	f803 1b01 	strb.w	r1, [r3], #1
 800880a:	e7f9      	b.n	8008800 <memset+0x4>

0800880c <__cvt>:
 800880c:	2b00      	cmp	r3, #0
 800880e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008812:	461f      	mov	r7, r3
 8008814:	bfbb      	ittet	lt
 8008816:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800881a:	461f      	movlt	r7, r3
 800881c:	2300      	movge	r3, #0
 800881e:	232d      	movlt	r3, #45	; 0x2d
 8008820:	b088      	sub	sp, #32
 8008822:	4614      	mov	r4, r2
 8008824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008826:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008828:	7013      	strb	r3, [r2, #0]
 800882a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800882c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008830:	f023 0820 	bic.w	r8, r3, #32
 8008834:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008838:	d005      	beq.n	8008846 <__cvt+0x3a>
 800883a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800883e:	d100      	bne.n	8008842 <__cvt+0x36>
 8008840:	3501      	adds	r5, #1
 8008842:	2302      	movs	r3, #2
 8008844:	e000      	b.n	8008848 <__cvt+0x3c>
 8008846:	2303      	movs	r3, #3
 8008848:	aa07      	add	r2, sp, #28
 800884a:	9204      	str	r2, [sp, #16]
 800884c:	aa06      	add	r2, sp, #24
 800884e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008852:	e9cd 3500 	strd	r3, r5, [sp]
 8008856:	4622      	mov	r2, r4
 8008858:	463b      	mov	r3, r7
 800885a:	f000 fdb9 	bl	80093d0 <_dtoa_r>
 800885e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008862:	4606      	mov	r6, r0
 8008864:	d102      	bne.n	800886c <__cvt+0x60>
 8008866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008868:	07db      	lsls	r3, r3, #31
 800886a:	d522      	bpl.n	80088b2 <__cvt+0xa6>
 800886c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008870:	eb06 0905 	add.w	r9, r6, r5
 8008874:	d110      	bne.n	8008898 <__cvt+0x8c>
 8008876:	7833      	ldrb	r3, [r6, #0]
 8008878:	2b30      	cmp	r3, #48	; 0x30
 800887a:	d10a      	bne.n	8008892 <__cvt+0x86>
 800887c:	2200      	movs	r2, #0
 800887e:	2300      	movs	r3, #0
 8008880:	4620      	mov	r0, r4
 8008882:	4639      	mov	r1, r7
 8008884:	f7f8 f89a 	bl	80009bc <__aeabi_dcmpeq>
 8008888:	b918      	cbnz	r0, 8008892 <__cvt+0x86>
 800888a:	f1c5 0501 	rsb	r5, r5, #1
 800888e:	f8ca 5000 	str.w	r5, [sl]
 8008892:	f8da 3000 	ldr.w	r3, [sl]
 8008896:	4499      	add	r9, r3
 8008898:	2200      	movs	r2, #0
 800889a:	2300      	movs	r3, #0
 800889c:	4620      	mov	r0, r4
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f88c 	bl	80009bc <__aeabi_dcmpeq>
 80088a4:	b108      	cbz	r0, 80088aa <__cvt+0x9e>
 80088a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80088aa:	2230      	movs	r2, #48	; 0x30
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	454b      	cmp	r3, r9
 80088b0:	d307      	bcc.n	80088c2 <__cvt+0xb6>
 80088b2:	4630      	mov	r0, r6
 80088b4:	9b07      	ldr	r3, [sp, #28]
 80088b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80088b8:	1b9b      	subs	r3, r3, r6
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	b008      	add	sp, #32
 80088be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c2:	1c59      	adds	r1, r3, #1
 80088c4:	9107      	str	r1, [sp, #28]
 80088c6:	701a      	strb	r2, [r3, #0]
 80088c8:	e7f0      	b.n	80088ac <__cvt+0xa0>

080088ca <__exponent>:
 80088ca:	4603      	mov	r3, r0
 80088cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ce:	2900      	cmp	r1, #0
 80088d0:	f803 2b02 	strb.w	r2, [r3], #2
 80088d4:	bfb6      	itet	lt
 80088d6:	222d      	movlt	r2, #45	; 0x2d
 80088d8:	222b      	movge	r2, #43	; 0x2b
 80088da:	4249      	neglt	r1, r1
 80088dc:	2909      	cmp	r1, #9
 80088de:	7042      	strb	r2, [r0, #1]
 80088e0:	dd2b      	ble.n	800893a <__exponent+0x70>
 80088e2:	f10d 0407 	add.w	r4, sp, #7
 80088e6:	46a4      	mov	ip, r4
 80088e8:	270a      	movs	r7, #10
 80088ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80088ee:	460a      	mov	r2, r1
 80088f0:	46a6      	mov	lr, r4
 80088f2:	fb07 1516 	mls	r5, r7, r6, r1
 80088f6:	2a63      	cmp	r2, #99	; 0x63
 80088f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80088fc:	4631      	mov	r1, r6
 80088fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008906:	dcf0      	bgt.n	80088ea <__exponent+0x20>
 8008908:	3130      	adds	r1, #48	; 0x30
 800890a:	f1ae 0502 	sub.w	r5, lr, #2
 800890e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008912:	4629      	mov	r1, r5
 8008914:	1c44      	adds	r4, r0, #1
 8008916:	4561      	cmp	r1, ip
 8008918:	d30a      	bcc.n	8008930 <__exponent+0x66>
 800891a:	f10d 0209 	add.w	r2, sp, #9
 800891e:	eba2 020e 	sub.w	r2, r2, lr
 8008922:	4565      	cmp	r5, ip
 8008924:	bf88      	it	hi
 8008926:	2200      	movhi	r2, #0
 8008928:	4413      	add	r3, r2
 800892a:	1a18      	subs	r0, r3, r0
 800892c:	b003      	add	sp, #12
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008934:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008938:	e7ed      	b.n	8008916 <__exponent+0x4c>
 800893a:	2330      	movs	r3, #48	; 0x30
 800893c:	3130      	adds	r1, #48	; 0x30
 800893e:	7083      	strb	r3, [r0, #2]
 8008940:	70c1      	strb	r1, [r0, #3]
 8008942:	1d03      	adds	r3, r0, #4
 8008944:	e7f1      	b.n	800892a <__exponent+0x60>
	...

08008948 <_printf_float>:
 8008948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	b091      	sub	sp, #68	; 0x44
 800894e:	460c      	mov	r4, r1
 8008950:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008954:	4616      	mov	r6, r2
 8008956:	461f      	mov	r7, r3
 8008958:	4605      	mov	r5, r0
 800895a:	f001 fb27 	bl	8009fac <_localeconv_r>
 800895e:	6803      	ldr	r3, [r0, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	9309      	str	r3, [sp, #36]	; 0x24
 8008964:	f7f7 fbfe 	bl	8000164 <strlen>
 8008968:	2300      	movs	r3, #0
 800896a:	930e      	str	r3, [sp, #56]	; 0x38
 800896c:	f8d8 3000 	ldr.w	r3, [r8]
 8008970:	900a      	str	r0, [sp, #40]	; 0x28
 8008972:	3307      	adds	r3, #7
 8008974:	f023 0307 	bic.w	r3, r3, #7
 8008978:	f103 0208 	add.w	r2, r3, #8
 800897c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008980:	f8d4 b000 	ldr.w	fp, [r4]
 8008984:	f8c8 2000 	str.w	r2, [r8]
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008990:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8008994:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008998:	930b      	str	r3, [sp, #44]	; 0x2c
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	4640      	mov	r0, r8
 80089a0:	4b9c      	ldr	r3, [pc, #624]	; (8008c14 <_printf_float+0x2cc>)
 80089a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089a4:	f7f8 f83c 	bl	8000a20 <__aeabi_dcmpun>
 80089a8:	bb70      	cbnz	r0, 8008a08 <_printf_float+0xc0>
 80089aa:	f04f 32ff 	mov.w	r2, #4294967295
 80089ae:	4640      	mov	r0, r8
 80089b0:	4b98      	ldr	r3, [pc, #608]	; (8008c14 <_printf_float+0x2cc>)
 80089b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80089b4:	f7f8 f816 	bl	80009e4 <__aeabi_dcmple>
 80089b8:	bb30      	cbnz	r0, 8008a08 <_printf_float+0xc0>
 80089ba:	2200      	movs	r2, #0
 80089bc:	2300      	movs	r3, #0
 80089be:	4640      	mov	r0, r8
 80089c0:	4651      	mov	r1, sl
 80089c2:	f7f8 f805 	bl	80009d0 <__aeabi_dcmplt>
 80089c6:	b110      	cbz	r0, 80089ce <_printf_float+0x86>
 80089c8:	232d      	movs	r3, #45	; 0x2d
 80089ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ce:	4b92      	ldr	r3, [pc, #584]	; (8008c18 <_printf_float+0x2d0>)
 80089d0:	4892      	ldr	r0, [pc, #584]	; (8008c1c <_printf_float+0x2d4>)
 80089d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80089d6:	bf94      	ite	ls
 80089d8:	4698      	movls	r8, r3
 80089da:	4680      	movhi	r8, r0
 80089dc:	2303      	movs	r3, #3
 80089de:	f04f 0a00 	mov.w	sl, #0
 80089e2:	6123      	str	r3, [r4, #16]
 80089e4:	f02b 0304 	bic.w	r3, fp, #4
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	4633      	mov	r3, r6
 80089ec:	4621      	mov	r1, r4
 80089ee:	4628      	mov	r0, r5
 80089f0:	9700      	str	r7, [sp, #0]
 80089f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80089f4:	f000 f9d4 	bl	8008da0 <_printf_common>
 80089f8:	3001      	adds	r0, #1
 80089fa:	f040 8090 	bne.w	8008b1e <_printf_float+0x1d6>
 80089fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008a02:	b011      	add	sp, #68	; 0x44
 8008a04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	4642      	mov	r2, r8
 8008a0a:	4653      	mov	r3, sl
 8008a0c:	4640      	mov	r0, r8
 8008a0e:	4651      	mov	r1, sl
 8008a10:	f7f8 f806 	bl	8000a20 <__aeabi_dcmpun>
 8008a14:	b148      	cbz	r0, 8008a2a <_printf_float+0xe2>
 8008a16:	f1ba 0f00 	cmp.w	sl, #0
 8008a1a:	bfb8      	it	lt
 8008a1c:	232d      	movlt	r3, #45	; 0x2d
 8008a1e:	4880      	ldr	r0, [pc, #512]	; (8008c20 <_printf_float+0x2d8>)
 8008a20:	bfb8      	it	lt
 8008a22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a26:	4b7f      	ldr	r3, [pc, #508]	; (8008c24 <_printf_float+0x2dc>)
 8008a28:	e7d3      	b.n	80089d2 <_printf_float+0x8a>
 8008a2a:	6863      	ldr	r3, [r4, #4]
 8008a2c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	d142      	bne.n	8008aba <_printf_float+0x172>
 8008a34:	2306      	movs	r3, #6
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	9206      	str	r2, [sp, #24]
 8008a3c:	aa0e      	add	r2, sp, #56	; 0x38
 8008a3e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008a42:	aa0d      	add	r2, sp, #52	; 0x34
 8008a44:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008a48:	9203      	str	r2, [sp, #12]
 8008a4a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008a4e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008a52:	6023      	str	r3, [r4, #0]
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	4642      	mov	r2, r8
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	4653      	mov	r3, sl
 8008a5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008a60:	f7ff fed4 	bl	800880c <__cvt>
 8008a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a66:	4680      	mov	r8, r0
 8008a68:	2947      	cmp	r1, #71	; 0x47
 8008a6a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008a6c:	d108      	bne.n	8008a80 <_printf_float+0x138>
 8008a6e:	1cc8      	adds	r0, r1, #3
 8008a70:	db02      	blt.n	8008a78 <_printf_float+0x130>
 8008a72:	6863      	ldr	r3, [r4, #4]
 8008a74:	4299      	cmp	r1, r3
 8008a76:	dd40      	ble.n	8008afa <_printf_float+0x1b2>
 8008a78:	f1a9 0902 	sub.w	r9, r9, #2
 8008a7c:	fa5f f989 	uxtb.w	r9, r9
 8008a80:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008a84:	d81f      	bhi.n	8008ac6 <_printf_float+0x17e>
 8008a86:	464a      	mov	r2, r9
 8008a88:	3901      	subs	r1, #1
 8008a8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a8e:	910d      	str	r1, [sp, #52]	; 0x34
 8008a90:	f7ff ff1b 	bl	80088ca <__exponent>
 8008a94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a96:	4682      	mov	sl, r0
 8008a98:	1813      	adds	r3, r2, r0
 8008a9a:	2a01      	cmp	r2, #1
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	dc02      	bgt.n	8008aa6 <_printf_float+0x15e>
 8008aa0:	6822      	ldr	r2, [r4, #0]
 8008aa2:	07d2      	lsls	r2, r2, #31
 8008aa4:	d501      	bpl.n	8008aaa <_printf_float+0x162>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d09b      	beq.n	80089ea <_printf_float+0xa2>
 8008ab2:	232d      	movs	r3, #45	; 0x2d
 8008ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab8:	e797      	b.n	80089ea <_printf_float+0xa2>
 8008aba:	2947      	cmp	r1, #71	; 0x47
 8008abc:	d1bc      	bne.n	8008a38 <_printf_float+0xf0>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1ba      	bne.n	8008a38 <_printf_float+0xf0>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7b7      	b.n	8008a36 <_printf_float+0xee>
 8008ac6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008aca:	d118      	bne.n	8008afe <_printf_float+0x1b6>
 8008acc:	2900      	cmp	r1, #0
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	dd0b      	ble.n	8008aea <_printf_float+0x1a2>
 8008ad2:	6121      	str	r1, [r4, #16]
 8008ad4:	b913      	cbnz	r3, 8008adc <_printf_float+0x194>
 8008ad6:	6822      	ldr	r2, [r4, #0]
 8008ad8:	07d0      	lsls	r0, r2, #31
 8008ada:	d502      	bpl.n	8008ae2 <_printf_float+0x19a>
 8008adc:	3301      	adds	r3, #1
 8008ade:	440b      	add	r3, r1
 8008ae0:	6123      	str	r3, [r4, #16]
 8008ae2:	f04f 0a00 	mov.w	sl, #0
 8008ae6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008ae8:	e7df      	b.n	8008aaa <_printf_float+0x162>
 8008aea:	b913      	cbnz	r3, 8008af2 <_printf_float+0x1aa>
 8008aec:	6822      	ldr	r2, [r4, #0]
 8008aee:	07d2      	lsls	r2, r2, #31
 8008af0:	d501      	bpl.n	8008af6 <_printf_float+0x1ae>
 8008af2:	3302      	adds	r3, #2
 8008af4:	e7f4      	b.n	8008ae0 <_printf_float+0x198>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7f2      	b.n	8008ae0 <_printf_float+0x198>
 8008afa:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b00:	4299      	cmp	r1, r3
 8008b02:	db05      	blt.n	8008b10 <_printf_float+0x1c8>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	6121      	str	r1, [r4, #16]
 8008b08:	07d8      	lsls	r0, r3, #31
 8008b0a:	d5ea      	bpl.n	8008ae2 <_printf_float+0x19a>
 8008b0c:	1c4b      	adds	r3, r1, #1
 8008b0e:	e7e7      	b.n	8008ae0 <_printf_float+0x198>
 8008b10:	2900      	cmp	r1, #0
 8008b12:	bfcc      	ite	gt
 8008b14:	2201      	movgt	r2, #1
 8008b16:	f1c1 0202 	rsble	r2, r1, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	e7e0      	b.n	8008ae0 <_printf_float+0x198>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	055a      	lsls	r2, r3, #21
 8008b22:	d407      	bmi.n	8008b34 <_printf_float+0x1ec>
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	4642      	mov	r2, r8
 8008b28:	4631      	mov	r1, r6
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	47b8      	blx	r7
 8008b2e:	3001      	adds	r0, #1
 8008b30:	d12b      	bne.n	8008b8a <_printf_float+0x242>
 8008b32:	e764      	b.n	80089fe <_printf_float+0xb6>
 8008b34:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b38:	f240 80dd 	bls.w	8008cf6 <_printf_float+0x3ae>
 8008b3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008b40:	2200      	movs	r2, #0
 8008b42:	2300      	movs	r3, #0
 8008b44:	f7f7 ff3a 	bl	80009bc <__aeabi_dcmpeq>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d033      	beq.n	8008bb4 <_printf_float+0x26c>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4631      	mov	r1, r6
 8008b50:	4628      	mov	r0, r5
 8008b52:	4a35      	ldr	r2, [pc, #212]	; (8008c28 <_printf_float+0x2e0>)
 8008b54:	47b8      	blx	r7
 8008b56:	3001      	adds	r0, #1
 8008b58:	f43f af51 	beq.w	80089fe <_printf_float+0xb6>
 8008b5c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008b60:	429a      	cmp	r2, r3
 8008b62:	db02      	blt.n	8008b6a <_printf_float+0x222>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07d8      	lsls	r0, r3, #31
 8008b68:	d50f      	bpl.n	8008b8a <_printf_float+0x242>
 8008b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b6e:	4631      	mov	r1, r6
 8008b70:	4628      	mov	r0, r5
 8008b72:	47b8      	blx	r7
 8008b74:	3001      	adds	r0, #1
 8008b76:	f43f af42 	beq.w	80089fe <_printf_float+0xb6>
 8008b7a:	f04f 0800 	mov.w	r8, #0
 8008b7e:	f104 091a 	add.w	r9, r4, #26
 8008b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b84:	3b01      	subs	r3, #1
 8008b86:	4543      	cmp	r3, r8
 8008b88:	dc09      	bgt.n	8008b9e <_printf_float+0x256>
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	079b      	lsls	r3, r3, #30
 8008b8e:	f100 8102 	bmi.w	8008d96 <_printf_float+0x44e>
 8008b92:	68e0      	ldr	r0, [r4, #12]
 8008b94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b96:	4298      	cmp	r0, r3
 8008b98:	bfb8      	it	lt
 8008b9a:	4618      	movlt	r0, r3
 8008b9c:	e731      	b.n	8008a02 <_printf_float+0xba>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	464a      	mov	r2, r9
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f af28 	beq.w	80089fe <_printf_float+0xb6>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	e7e6      	b.n	8008b82 <_printf_float+0x23a>
 8008bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc38      	bgt.n	8008c2c <_printf_float+0x2e4>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	4a19      	ldr	r2, [pc, #100]	; (8008c28 <_printf_float+0x2e0>)
 8008bc2:	47b8      	blx	r7
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	f43f af1a 	beq.w	80089fe <_printf_float+0xb6>
 8008bca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	d102      	bne.n	8008bd8 <_printf_float+0x290>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07d9      	lsls	r1, r3, #31
 8008bd6:	d5d8      	bpl.n	8008b8a <_printf_float+0x242>
 8008bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b8      	blx	r7
 8008be2:	3001      	adds	r0, #1
 8008be4:	f43f af0b 	beq.w	80089fe <_printf_float+0xb6>
 8008be8:	f04f 0900 	mov.w	r9, #0
 8008bec:	f104 0a1a 	add.w	sl, r4, #26
 8008bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	454b      	cmp	r3, r9
 8008bf6:	dc01      	bgt.n	8008bfc <_printf_float+0x2b4>
 8008bf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bfa:	e794      	b.n	8008b26 <_printf_float+0x1de>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f aef9 	beq.w	80089fe <_printf_float+0xb6>
 8008c0c:	f109 0901 	add.w	r9, r9, #1
 8008c10:	e7ee      	b.n	8008bf0 <_printf_float+0x2a8>
 8008c12:	bf00      	nop
 8008c14:	7fefffff 	.word	0x7fefffff
 8008c18:	0800bf44 	.word	0x0800bf44
 8008c1c:	0800bf48 	.word	0x0800bf48
 8008c20:	0800bf50 	.word	0x0800bf50
 8008c24:	0800bf4c 	.word	0x0800bf4c
 8008c28:	0800bf54 	.word	0x0800bf54
 8008c2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bfa8      	it	ge
 8008c34:	461a      	movge	r2, r3
 8008c36:	2a00      	cmp	r2, #0
 8008c38:	4691      	mov	r9, r2
 8008c3a:	dc37      	bgt.n	8008cac <_printf_float+0x364>
 8008c3c:	f04f 0b00 	mov.w	fp, #0
 8008c40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c44:	f104 021a 	add.w	r2, r4, #26
 8008c48:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c4c:	ebaa 0309 	sub.w	r3, sl, r9
 8008c50:	455b      	cmp	r3, fp
 8008c52:	dc33      	bgt.n	8008cbc <_printf_float+0x374>
 8008c54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	db3b      	blt.n	8008cd4 <_printf_float+0x38c>
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	07da      	lsls	r2, r3, #31
 8008c60:	d438      	bmi.n	8008cd4 <_printf_float+0x38c>
 8008c62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c64:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c66:	eba2 030a 	sub.w	r3, r2, sl
 8008c6a:	eba2 0901 	sub.w	r9, r2, r1
 8008c6e:	4599      	cmp	r9, r3
 8008c70:	bfa8      	it	ge
 8008c72:	4699      	movge	r9, r3
 8008c74:	f1b9 0f00 	cmp.w	r9, #0
 8008c78:	dc34      	bgt.n	8008ce4 <_printf_float+0x39c>
 8008c7a:	f04f 0800 	mov.w	r8, #0
 8008c7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c82:	f104 0a1a 	add.w	sl, r4, #26
 8008c86:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008c8a:	1a9b      	subs	r3, r3, r2
 8008c8c:	eba3 0309 	sub.w	r3, r3, r9
 8008c90:	4543      	cmp	r3, r8
 8008c92:	f77f af7a 	ble.w	8008b8a <_printf_float+0x242>
 8008c96:	2301      	movs	r3, #1
 8008c98:	4652      	mov	r2, sl
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	47b8      	blx	r7
 8008ca0:	3001      	adds	r0, #1
 8008ca2:	f43f aeac 	beq.w	80089fe <_printf_float+0xb6>
 8008ca6:	f108 0801 	add.w	r8, r8, #1
 8008caa:	e7ec      	b.n	8008c86 <_printf_float+0x33e>
 8008cac:	4613      	mov	r3, r2
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	47b8      	blx	r7
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	d1c0      	bne.n	8008c3c <_printf_float+0x2f4>
 8008cba:	e6a0      	b.n	80089fe <_printf_float+0xb6>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f ae99 	beq.w	80089fe <_printf_float+0xb6>
 8008ccc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cce:	f10b 0b01 	add.w	fp, fp, #1
 8008cd2:	e7b9      	b.n	8008c48 <_printf_float+0x300>
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	d1bf      	bne.n	8008c62 <_printf_float+0x31a>
 8008ce2:	e68c      	b.n	80089fe <_printf_float+0xb6>
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	4628      	mov	r0, r5
 8008cea:	eb08 020a 	add.w	r2, r8, sl
 8008cee:	47b8      	blx	r7
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d1c2      	bne.n	8008c7a <_printf_float+0x332>
 8008cf4:	e683      	b.n	80089fe <_printf_float+0xb6>
 8008cf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cf8:	2a01      	cmp	r2, #1
 8008cfa:	dc01      	bgt.n	8008d00 <_printf_float+0x3b8>
 8008cfc:	07db      	lsls	r3, r3, #31
 8008cfe:	d537      	bpl.n	8008d70 <_printf_float+0x428>
 8008d00:	2301      	movs	r3, #1
 8008d02:	4642      	mov	r2, r8
 8008d04:	4631      	mov	r1, r6
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b8      	blx	r7
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	f43f ae77 	beq.w	80089fe <_printf_float+0xb6>
 8008d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d14:	4631      	mov	r1, r6
 8008d16:	4628      	mov	r0, r5
 8008d18:	47b8      	blx	r7
 8008d1a:	3001      	adds	r0, #1
 8008d1c:	f43f ae6f 	beq.w	80089fe <_printf_float+0xb6>
 8008d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d24:	2200      	movs	r2, #0
 8008d26:	2300      	movs	r3, #0
 8008d28:	f7f7 fe48 	bl	80009bc <__aeabi_dcmpeq>
 8008d2c:	b9d8      	cbnz	r0, 8008d66 <_printf_float+0x41e>
 8008d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d30:	f108 0201 	add.w	r2, r8, #1
 8008d34:	3b01      	subs	r3, #1
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d10e      	bne.n	8008d5e <_printf_float+0x416>
 8008d40:	e65d      	b.n	80089fe <_printf_float+0xb6>
 8008d42:	2301      	movs	r3, #1
 8008d44:	464a      	mov	r2, r9
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f ae56 	beq.w	80089fe <_printf_float+0xb6>
 8008d52:	f108 0801 	add.w	r8, r8, #1
 8008d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	4543      	cmp	r3, r8
 8008d5c:	dcf1      	bgt.n	8008d42 <_printf_float+0x3fa>
 8008d5e:	4653      	mov	r3, sl
 8008d60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d64:	e6e0      	b.n	8008b28 <_printf_float+0x1e0>
 8008d66:	f04f 0800 	mov.w	r8, #0
 8008d6a:	f104 091a 	add.w	r9, r4, #26
 8008d6e:	e7f2      	b.n	8008d56 <_printf_float+0x40e>
 8008d70:	2301      	movs	r3, #1
 8008d72:	4642      	mov	r2, r8
 8008d74:	e7df      	b.n	8008d36 <_printf_float+0x3ee>
 8008d76:	2301      	movs	r3, #1
 8008d78:	464a      	mov	r2, r9
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	f43f ae3c 	beq.w	80089fe <_printf_float+0xb6>
 8008d86:	f108 0801 	add.w	r8, r8, #1
 8008d8a:	68e3      	ldr	r3, [r4, #12]
 8008d8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008d8e:	1a5b      	subs	r3, r3, r1
 8008d90:	4543      	cmp	r3, r8
 8008d92:	dcf0      	bgt.n	8008d76 <_printf_float+0x42e>
 8008d94:	e6fd      	b.n	8008b92 <_printf_float+0x24a>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f104 0919 	add.w	r9, r4, #25
 8008d9e:	e7f4      	b.n	8008d8a <_printf_float+0x442>

08008da0 <_printf_common>:
 8008da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008da4:	4616      	mov	r6, r2
 8008da6:	4699      	mov	r9, r3
 8008da8:	688a      	ldr	r2, [r1, #8]
 8008daa:	690b      	ldr	r3, [r1, #16]
 8008dac:	4607      	mov	r7, r0
 8008dae:	4293      	cmp	r3, r2
 8008db0:	bfb8      	it	lt
 8008db2:	4613      	movlt	r3, r2
 8008db4:	6033      	str	r3, [r6, #0]
 8008db6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dc0:	b10a      	cbz	r2, 8008dc6 <_printf_common+0x26>
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	6033      	str	r3, [r6, #0]
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	0699      	lsls	r1, r3, #26
 8008dca:	bf42      	ittt	mi
 8008dcc:	6833      	ldrmi	r3, [r6, #0]
 8008dce:	3302      	addmi	r3, #2
 8008dd0:	6033      	strmi	r3, [r6, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	f015 0506 	ands.w	r5, r5, #6
 8008dd8:	d106      	bne.n	8008de8 <_printf_common+0x48>
 8008dda:	f104 0a19 	add.w	sl, r4, #25
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	6832      	ldr	r2, [r6, #0]
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	42ab      	cmp	r3, r5
 8008de6:	dc28      	bgt.n	8008e3a <_printf_common+0x9a>
 8008de8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008dec:	1e13      	subs	r3, r2, #0
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	bf18      	it	ne
 8008df2:	2301      	movne	r3, #1
 8008df4:	0692      	lsls	r2, r2, #26
 8008df6:	d42d      	bmi.n	8008e54 <_printf_common+0xb4>
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e00:	47c0      	blx	r8
 8008e02:	3001      	adds	r0, #1
 8008e04:	d020      	beq.n	8008e48 <_printf_common+0xa8>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	68e5      	ldr	r5, [r4, #12]
 8008e0a:	f003 0306 	and.w	r3, r3, #6
 8008e0e:	2b04      	cmp	r3, #4
 8008e10:	bf18      	it	ne
 8008e12:	2500      	movne	r5, #0
 8008e14:	6832      	ldr	r2, [r6, #0]
 8008e16:	f04f 0600 	mov.w	r6, #0
 8008e1a:	68a3      	ldr	r3, [r4, #8]
 8008e1c:	bf08      	it	eq
 8008e1e:	1aad      	subeq	r5, r5, r2
 8008e20:	6922      	ldr	r2, [r4, #16]
 8008e22:	bf08      	it	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	bfc4      	itt	gt
 8008e2c:	1a9b      	subgt	r3, r3, r2
 8008e2e:	18ed      	addgt	r5, r5, r3
 8008e30:	341a      	adds	r4, #26
 8008e32:	42b5      	cmp	r5, r6
 8008e34:	d11a      	bne.n	8008e6c <_printf_common+0xcc>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e008      	b.n	8008e4c <_printf_common+0xac>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4652      	mov	r2, sl
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4638      	mov	r0, r7
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d103      	bne.n	8008e50 <_printf_common+0xb0>
 8008e48:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	3501      	adds	r5, #1
 8008e52:	e7c4      	b.n	8008dde <_printf_common+0x3e>
 8008e54:	2030      	movs	r0, #48	; 0x30
 8008e56:	18e1      	adds	r1, r4, r3
 8008e58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e5c:	1c5a      	adds	r2, r3, #1
 8008e5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e62:	4422      	add	r2, r4
 8008e64:	3302      	adds	r3, #2
 8008e66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e6a:	e7c5      	b.n	8008df8 <_printf_common+0x58>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4649      	mov	r1, r9
 8008e72:	4638      	mov	r0, r7
 8008e74:	47c0      	blx	r8
 8008e76:	3001      	adds	r0, #1
 8008e78:	d0e6      	beq.n	8008e48 <_printf_common+0xa8>
 8008e7a:	3601      	adds	r6, #1
 8008e7c:	e7d9      	b.n	8008e32 <_printf_common+0x92>
	...

08008e80 <_printf_i>:
 8008e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e84:	460c      	mov	r4, r1
 8008e86:	7e27      	ldrb	r7, [r4, #24]
 8008e88:	4691      	mov	r9, r2
 8008e8a:	2f78      	cmp	r7, #120	; 0x78
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	469a      	mov	sl, r3
 8008e90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008e92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e96:	d807      	bhi.n	8008ea8 <_printf_i+0x28>
 8008e98:	2f62      	cmp	r7, #98	; 0x62
 8008e9a:	d80a      	bhi.n	8008eb2 <_printf_i+0x32>
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f000 80d9 	beq.w	8009054 <_printf_i+0x1d4>
 8008ea2:	2f58      	cmp	r7, #88	; 0x58
 8008ea4:	f000 80a4 	beq.w	8008ff0 <_printf_i+0x170>
 8008ea8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008eb0:	e03a      	b.n	8008f28 <_printf_i+0xa8>
 8008eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008eb6:	2b15      	cmp	r3, #21
 8008eb8:	d8f6      	bhi.n	8008ea8 <_printf_i+0x28>
 8008eba:	a001      	add	r0, pc, #4	; (adr r0, 8008ec0 <_printf_i+0x40>)
 8008ebc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ec0:	08008f19 	.word	0x08008f19
 8008ec4:	08008f2d 	.word	0x08008f2d
 8008ec8:	08008ea9 	.word	0x08008ea9
 8008ecc:	08008ea9 	.word	0x08008ea9
 8008ed0:	08008ea9 	.word	0x08008ea9
 8008ed4:	08008ea9 	.word	0x08008ea9
 8008ed8:	08008f2d 	.word	0x08008f2d
 8008edc:	08008ea9 	.word	0x08008ea9
 8008ee0:	08008ea9 	.word	0x08008ea9
 8008ee4:	08008ea9 	.word	0x08008ea9
 8008ee8:	08008ea9 	.word	0x08008ea9
 8008eec:	0800903b 	.word	0x0800903b
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	0800901d 	.word	0x0800901d
 8008ef8:	08008ea9 	.word	0x08008ea9
 8008efc:	08008ea9 	.word	0x08008ea9
 8008f00:	0800905d 	.word	0x0800905d
 8008f04:	08008ea9 	.word	0x08008ea9
 8008f08:	08008f5d 	.word	0x08008f5d
 8008f0c:	08008ea9 	.word	0x08008ea9
 8008f10:	08008ea9 	.word	0x08008ea9
 8008f14:	08009025 	.word	0x08009025
 8008f18:	680b      	ldr	r3, [r1, #0]
 8008f1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	600a      	str	r2, [r1, #0]
 8008f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e0a4      	b.n	8009076 <_printf_i+0x1f6>
 8008f2c:	6825      	ldr	r5, [r4, #0]
 8008f2e:	6808      	ldr	r0, [r1, #0]
 8008f30:	062e      	lsls	r6, r5, #24
 8008f32:	f100 0304 	add.w	r3, r0, #4
 8008f36:	d50a      	bpl.n	8008f4e <_printf_i+0xce>
 8008f38:	6805      	ldr	r5, [r0, #0]
 8008f3a:	600b      	str	r3, [r1, #0]
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	da03      	bge.n	8008f48 <_printf_i+0xc8>
 8008f40:	232d      	movs	r3, #45	; 0x2d
 8008f42:	426d      	negs	r5, r5
 8008f44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f48:	230a      	movs	r3, #10
 8008f4a:	485e      	ldr	r0, [pc, #376]	; (80090c4 <_printf_i+0x244>)
 8008f4c:	e019      	b.n	8008f82 <_printf_i+0x102>
 8008f4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008f52:	6805      	ldr	r5, [r0, #0]
 8008f54:	600b      	str	r3, [r1, #0]
 8008f56:	bf18      	it	ne
 8008f58:	b22d      	sxthne	r5, r5
 8008f5a:	e7ef      	b.n	8008f3c <_printf_i+0xbc>
 8008f5c:	680b      	ldr	r3, [r1, #0]
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	1d18      	adds	r0, r3, #4
 8008f62:	6008      	str	r0, [r1, #0]
 8008f64:	0628      	lsls	r0, r5, #24
 8008f66:	d501      	bpl.n	8008f6c <_printf_i+0xec>
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	e002      	b.n	8008f72 <_printf_i+0xf2>
 8008f6c:	0669      	lsls	r1, r5, #25
 8008f6e:	d5fb      	bpl.n	8008f68 <_printf_i+0xe8>
 8008f70:	881d      	ldrh	r5, [r3, #0]
 8008f72:	2f6f      	cmp	r7, #111	; 0x6f
 8008f74:	bf0c      	ite	eq
 8008f76:	2308      	moveq	r3, #8
 8008f78:	230a      	movne	r3, #10
 8008f7a:	4852      	ldr	r0, [pc, #328]	; (80090c4 <_printf_i+0x244>)
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f82:	6866      	ldr	r6, [r4, #4]
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	bfa8      	it	ge
 8008f88:	6821      	ldrge	r1, [r4, #0]
 8008f8a:	60a6      	str	r6, [r4, #8]
 8008f8c:	bfa4      	itt	ge
 8008f8e:	f021 0104 	bicge.w	r1, r1, #4
 8008f92:	6021      	strge	r1, [r4, #0]
 8008f94:	b90d      	cbnz	r5, 8008f9a <_printf_i+0x11a>
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	d04d      	beq.n	8009036 <_printf_i+0x1b6>
 8008f9a:	4616      	mov	r6, r2
 8008f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8008fa4:	5dc7      	ldrb	r7, [r0, r7]
 8008fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008faa:	462f      	mov	r7, r5
 8008fac:	42bb      	cmp	r3, r7
 8008fae:	460d      	mov	r5, r1
 8008fb0:	d9f4      	bls.n	8008f9c <_printf_i+0x11c>
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d10b      	bne.n	8008fce <_printf_i+0x14e>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	07df      	lsls	r7, r3, #31
 8008fba:	d508      	bpl.n	8008fce <_printf_i+0x14e>
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	6861      	ldr	r1, [r4, #4]
 8008fc0:	4299      	cmp	r1, r3
 8008fc2:	bfde      	ittt	le
 8008fc4:	2330      	movle	r3, #48	; 0x30
 8008fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fce:	1b92      	subs	r2, r2, r6
 8008fd0:	6122      	str	r2, [r4, #16]
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4640      	mov	r0, r8
 8008fd8:	f8cd a000 	str.w	sl, [sp]
 8008fdc:	aa03      	add	r2, sp, #12
 8008fde:	f7ff fedf 	bl	8008da0 <_printf_common>
 8008fe2:	3001      	adds	r0, #1
 8008fe4:	d14c      	bne.n	8009080 <_printf_i+0x200>
 8008fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fea:	b004      	add	sp, #16
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	4834      	ldr	r0, [pc, #208]	; (80090c4 <_printf_i+0x244>)
 8008ff2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ff6:	680e      	ldr	r6, [r1, #0]
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ffe:	061f      	lsls	r7, r3, #24
 8009000:	600e      	str	r6, [r1, #0]
 8009002:	d514      	bpl.n	800902e <_printf_i+0x1ae>
 8009004:	07d9      	lsls	r1, r3, #31
 8009006:	bf44      	itt	mi
 8009008:	f043 0320 	orrmi.w	r3, r3, #32
 800900c:	6023      	strmi	r3, [r4, #0]
 800900e:	b91d      	cbnz	r5, 8009018 <_printf_i+0x198>
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	f023 0320 	bic.w	r3, r3, #32
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	2310      	movs	r3, #16
 800901a:	e7af      	b.n	8008f7c <_printf_i+0xfc>
 800901c:	6823      	ldr	r3, [r4, #0]
 800901e:	f043 0320 	orr.w	r3, r3, #32
 8009022:	6023      	str	r3, [r4, #0]
 8009024:	2378      	movs	r3, #120	; 0x78
 8009026:	4828      	ldr	r0, [pc, #160]	; (80090c8 <_printf_i+0x248>)
 8009028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800902c:	e7e3      	b.n	8008ff6 <_printf_i+0x176>
 800902e:	065e      	lsls	r6, r3, #25
 8009030:	bf48      	it	mi
 8009032:	b2ad      	uxthmi	r5, r5
 8009034:	e7e6      	b.n	8009004 <_printf_i+0x184>
 8009036:	4616      	mov	r6, r2
 8009038:	e7bb      	b.n	8008fb2 <_printf_i+0x132>
 800903a:	680b      	ldr	r3, [r1, #0]
 800903c:	6826      	ldr	r6, [r4, #0]
 800903e:	1d1d      	adds	r5, r3, #4
 8009040:	6960      	ldr	r0, [r4, #20]
 8009042:	600d      	str	r5, [r1, #0]
 8009044:	0635      	lsls	r5, r6, #24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	d501      	bpl.n	800904e <_printf_i+0x1ce>
 800904a:	6018      	str	r0, [r3, #0]
 800904c:	e002      	b.n	8009054 <_printf_i+0x1d4>
 800904e:	0671      	lsls	r1, r6, #25
 8009050:	d5fb      	bpl.n	800904a <_printf_i+0x1ca>
 8009052:	8018      	strh	r0, [r3, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	4616      	mov	r6, r2
 8009058:	6123      	str	r3, [r4, #16]
 800905a:	e7ba      	b.n	8008fd2 <_printf_i+0x152>
 800905c:	680b      	ldr	r3, [r1, #0]
 800905e:	1d1a      	adds	r2, r3, #4
 8009060:	600a      	str	r2, [r1, #0]
 8009062:	681e      	ldr	r6, [r3, #0]
 8009064:	2100      	movs	r1, #0
 8009066:	4630      	mov	r0, r6
 8009068:	6862      	ldr	r2, [r4, #4]
 800906a:	f000 ffab 	bl	8009fc4 <memchr>
 800906e:	b108      	cbz	r0, 8009074 <_printf_i+0x1f4>
 8009070:	1b80      	subs	r0, r0, r6
 8009072:	6060      	str	r0, [r4, #4]
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	6123      	str	r3, [r4, #16]
 8009078:	2300      	movs	r3, #0
 800907a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800907e:	e7a8      	b.n	8008fd2 <_printf_i+0x152>
 8009080:	4632      	mov	r2, r6
 8009082:	4649      	mov	r1, r9
 8009084:	4640      	mov	r0, r8
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	47d0      	blx	sl
 800908a:	3001      	adds	r0, #1
 800908c:	d0ab      	beq.n	8008fe6 <_printf_i+0x166>
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	079b      	lsls	r3, r3, #30
 8009092:	d413      	bmi.n	80090bc <_printf_i+0x23c>
 8009094:	68e0      	ldr	r0, [r4, #12]
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	4298      	cmp	r0, r3
 800909a:	bfb8      	it	lt
 800909c:	4618      	movlt	r0, r3
 800909e:	e7a4      	b.n	8008fea <_printf_i+0x16a>
 80090a0:	2301      	movs	r3, #1
 80090a2:	4632      	mov	r2, r6
 80090a4:	4649      	mov	r1, r9
 80090a6:	4640      	mov	r0, r8
 80090a8:	47d0      	blx	sl
 80090aa:	3001      	adds	r0, #1
 80090ac:	d09b      	beq.n	8008fe6 <_printf_i+0x166>
 80090ae:	3501      	adds	r5, #1
 80090b0:	68e3      	ldr	r3, [r4, #12]
 80090b2:	9903      	ldr	r1, [sp, #12]
 80090b4:	1a5b      	subs	r3, r3, r1
 80090b6:	42ab      	cmp	r3, r5
 80090b8:	dcf2      	bgt.n	80090a0 <_printf_i+0x220>
 80090ba:	e7eb      	b.n	8009094 <_printf_i+0x214>
 80090bc:	2500      	movs	r5, #0
 80090be:	f104 0619 	add.w	r6, r4, #25
 80090c2:	e7f5      	b.n	80090b0 <_printf_i+0x230>
 80090c4:	0800bf56 	.word	0x0800bf56
 80090c8:	0800bf67 	.word	0x0800bf67

080090cc <siprintf>:
 80090cc:	b40e      	push	{r1, r2, r3}
 80090ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090d2:	b500      	push	{lr}
 80090d4:	b09c      	sub	sp, #112	; 0x70
 80090d6:	ab1d      	add	r3, sp, #116	; 0x74
 80090d8:	9002      	str	r0, [sp, #8]
 80090da:	9006      	str	r0, [sp, #24]
 80090dc:	9107      	str	r1, [sp, #28]
 80090de:	9104      	str	r1, [sp, #16]
 80090e0:	4808      	ldr	r0, [pc, #32]	; (8009104 <siprintf+0x38>)
 80090e2:	4909      	ldr	r1, [pc, #36]	; (8009108 <siprintf+0x3c>)
 80090e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	a902      	add	r1, sp, #8
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	f001 fc16 	bl	800a920 <_svfiprintf_r>
 80090f4:	2200      	movs	r2, #0
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	b01c      	add	sp, #112	; 0x70
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	2000000c 	.word	0x2000000c
 8009108:	ffff0208 	.word	0xffff0208

0800910c <_strtol_l.isra.0>:
 800910c:	2b01      	cmp	r3, #1
 800910e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009112:	4686      	mov	lr, r0
 8009114:	d001      	beq.n	800911a <_strtol_l.isra.0+0xe>
 8009116:	2b24      	cmp	r3, #36	; 0x24
 8009118:	d906      	bls.n	8009128 <_strtol_l.isra.0+0x1c>
 800911a:	f7ff fb2b 	bl	8008774 <__errno>
 800911e:	2316      	movs	r3, #22
 8009120:	6003      	str	r3, [r0, #0]
 8009122:	2000      	movs	r0, #0
 8009124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009128:	468c      	mov	ip, r1
 800912a:	4e3a      	ldr	r6, [pc, #232]	; (8009214 <_strtol_l.isra.0+0x108>)
 800912c:	4660      	mov	r0, ip
 800912e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009132:	5da5      	ldrb	r5, [r4, r6]
 8009134:	f015 0508 	ands.w	r5, r5, #8
 8009138:	d1f8      	bne.n	800912c <_strtol_l.isra.0+0x20>
 800913a:	2c2d      	cmp	r4, #45	; 0x2d
 800913c:	d133      	bne.n	80091a6 <_strtol_l.isra.0+0x9a>
 800913e:	f04f 0801 	mov.w	r8, #1
 8009142:	f89c 4000 	ldrb.w	r4, [ip]
 8009146:	f100 0c02 	add.w	ip, r0, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d05d      	beq.n	800920a <_strtol_l.isra.0+0xfe>
 800914e:	2b10      	cmp	r3, #16
 8009150:	d10c      	bne.n	800916c <_strtol_l.isra.0+0x60>
 8009152:	2c30      	cmp	r4, #48	; 0x30
 8009154:	d10a      	bne.n	800916c <_strtol_l.isra.0+0x60>
 8009156:	f89c 0000 	ldrb.w	r0, [ip]
 800915a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800915e:	2858      	cmp	r0, #88	; 0x58
 8009160:	d14e      	bne.n	8009200 <_strtol_l.isra.0+0xf4>
 8009162:	2310      	movs	r3, #16
 8009164:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009168:	f10c 0c02 	add.w	ip, ip, #2
 800916c:	2500      	movs	r5, #0
 800916e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8009172:	3f01      	subs	r7, #1
 8009174:	fbb7 f9f3 	udiv	r9, r7, r3
 8009178:	4628      	mov	r0, r5
 800917a:	fb03 7a19 	mls	sl, r3, r9, r7
 800917e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009182:	2e09      	cmp	r6, #9
 8009184:	d818      	bhi.n	80091b8 <_strtol_l.isra.0+0xac>
 8009186:	4634      	mov	r4, r6
 8009188:	42a3      	cmp	r3, r4
 800918a:	dd24      	ble.n	80091d6 <_strtol_l.isra.0+0xca>
 800918c:	2d00      	cmp	r5, #0
 800918e:	db1f      	blt.n	80091d0 <_strtol_l.isra.0+0xc4>
 8009190:	4581      	cmp	r9, r0
 8009192:	d31d      	bcc.n	80091d0 <_strtol_l.isra.0+0xc4>
 8009194:	d101      	bne.n	800919a <_strtol_l.isra.0+0x8e>
 8009196:	45a2      	cmp	sl, r4
 8009198:	db1a      	blt.n	80091d0 <_strtol_l.isra.0+0xc4>
 800919a:	2501      	movs	r5, #1
 800919c:	fb00 4003 	mla	r0, r0, r3, r4
 80091a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80091a4:	e7eb      	b.n	800917e <_strtol_l.isra.0+0x72>
 80091a6:	2c2b      	cmp	r4, #43	; 0x2b
 80091a8:	bf08      	it	eq
 80091aa:	f89c 4000 	ldrbeq.w	r4, [ip]
 80091ae:	46a8      	mov	r8, r5
 80091b0:	bf08      	it	eq
 80091b2:	f100 0c02 	addeq.w	ip, r0, #2
 80091b6:	e7c8      	b.n	800914a <_strtol_l.isra.0+0x3e>
 80091b8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80091bc:	2e19      	cmp	r6, #25
 80091be:	d801      	bhi.n	80091c4 <_strtol_l.isra.0+0xb8>
 80091c0:	3c37      	subs	r4, #55	; 0x37
 80091c2:	e7e1      	b.n	8009188 <_strtol_l.isra.0+0x7c>
 80091c4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80091c8:	2e19      	cmp	r6, #25
 80091ca:	d804      	bhi.n	80091d6 <_strtol_l.isra.0+0xca>
 80091cc:	3c57      	subs	r4, #87	; 0x57
 80091ce:	e7db      	b.n	8009188 <_strtol_l.isra.0+0x7c>
 80091d0:	f04f 35ff 	mov.w	r5, #4294967295
 80091d4:	e7e4      	b.n	80091a0 <_strtol_l.isra.0+0x94>
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	da08      	bge.n	80091ec <_strtol_l.isra.0+0xe0>
 80091da:	2322      	movs	r3, #34	; 0x22
 80091dc:	4638      	mov	r0, r7
 80091de:	f8ce 3000 	str.w	r3, [lr]
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d09e      	beq.n	8009124 <_strtol_l.isra.0+0x18>
 80091e6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80091ea:	e007      	b.n	80091fc <_strtol_l.isra.0+0xf0>
 80091ec:	f1b8 0f00 	cmp.w	r8, #0
 80091f0:	d000      	beq.n	80091f4 <_strtol_l.isra.0+0xe8>
 80091f2:	4240      	negs	r0, r0
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	d095      	beq.n	8009124 <_strtol_l.isra.0+0x18>
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	d1f4      	bne.n	80091e6 <_strtol_l.isra.0+0xda>
 80091fc:	6011      	str	r1, [r2, #0]
 80091fe:	e791      	b.n	8009124 <_strtol_l.isra.0+0x18>
 8009200:	2430      	movs	r4, #48	; 0x30
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1b2      	bne.n	800916c <_strtol_l.isra.0+0x60>
 8009206:	2308      	movs	r3, #8
 8009208:	e7b0      	b.n	800916c <_strtol_l.isra.0+0x60>
 800920a:	2c30      	cmp	r4, #48	; 0x30
 800920c:	d0a3      	beq.n	8009156 <_strtol_l.isra.0+0x4a>
 800920e:	230a      	movs	r3, #10
 8009210:	e7ac      	b.n	800916c <_strtol_l.isra.0+0x60>
 8009212:	bf00      	nop
 8009214:	0800bf9e 	.word	0x0800bf9e

08009218 <strtol>:
 8009218:	4613      	mov	r3, r2
 800921a:	460a      	mov	r2, r1
 800921c:	4601      	mov	r1, r0
 800921e:	4802      	ldr	r0, [pc, #8]	; (8009228 <strtol+0x10>)
 8009220:	6800      	ldr	r0, [r0, #0]
 8009222:	f7ff bf73 	b.w	800910c <_strtol_l.isra.0>
 8009226:	bf00      	nop
 8009228:	2000000c 	.word	0x2000000c

0800922c <__utoa>:
 800922c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922e:	b08b      	sub	sp, #44	; 0x2c
 8009230:	4605      	mov	r5, r0
 8009232:	460b      	mov	r3, r1
 8009234:	466e      	mov	r6, sp
 8009236:	4c1d      	ldr	r4, [pc, #116]	; (80092ac <__utoa+0x80>)
 8009238:	f104 0c20 	add.w	ip, r4, #32
 800923c:	4637      	mov	r7, r6
 800923e:	6820      	ldr	r0, [r4, #0]
 8009240:	6861      	ldr	r1, [r4, #4]
 8009242:	3408      	adds	r4, #8
 8009244:	c703      	stmia	r7!, {r0, r1}
 8009246:	4564      	cmp	r4, ip
 8009248:	463e      	mov	r6, r7
 800924a:	d1f7      	bne.n	800923c <__utoa+0x10>
 800924c:	7921      	ldrb	r1, [r4, #4]
 800924e:	6820      	ldr	r0, [r4, #0]
 8009250:	7139      	strb	r1, [r7, #4]
 8009252:	1e91      	subs	r1, r2, #2
 8009254:	2922      	cmp	r1, #34	; 0x22
 8009256:	6038      	str	r0, [r7, #0]
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	d904      	bls.n	8009268 <__utoa+0x3c>
 800925e:	7019      	strb	r1, [r3, #0]
 8009260:	460b      	mov	r3, r1
 8009262:	4618      	mov	r0, r3
 8009264:	b00b      	add	sp, #44	; 0x2c
 8009266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009268:	1e58      	subs	r0, r3, #1
 800926a:	4684      	mov	ip, r0
 800926c:	fbb5 f7f2 	udiv	r7, r5, r2
 8009270:	fb02 5617 	mls	r6, r2, r7, r5
 8009274:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8009278:	4476      	add	r6, lr
 800927a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800927e:	460c      	mov	r4, r1
 8009280:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8009284:	462e      	mov	r6, r5
 8009286:	42b2      	cmp	r2, r6
 8009288:	463d      	mov	r5, r7
 800928a:	f101 0101 	add.w	r1, r1, #1
 800928e:	d9ed      	bls.n	800926c <__utoa+0x40>
 8009290:	2200      	movs	r2, #0
 8009292:	545a      	strb	r2, [r3, r1]
 8009294:	1919      	adds	r1, r3, r4
 8009296:	1aa5      	subs	r5, r4, r2
 8009298:	42aa      	cmp	r2, r5
 800929a:	dae2      	bge.n	8009262 <__utoa+0x36>
 800929c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80092a0:	780e      	ldrb	r6, [r1, #0]
 80092a2:	3201      	adds	r2, #1
 80092a4:	7006      	strb	r6, [r0, #0]
 80092a6:	f801 5901 	strb.w	r5, [r1], #-1
 80092aa:	e7f4      	b.n	8009296 <__utoa+0x6a>
 80092ac:	0800bf78 	.word	0x0800bf78

080092b0 <quorem>:
 80092b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	6903      	ldr	r3, [r0, #16]
 80092b6:	690c      	ldr	r4, [r1, #16]
 80092b8:	4607      	mov	r7, r0
 80092ba:	42a3      	cmp	r3, r4
 80092bc:	f2c0 8083 	blt.w	80093c6 <quorem+0x116>
 80092c0:	3c01      	subs	r4, #1
 80092c2:	f100 0514 	add.w	r5, r0, #20
 80092c6:	f101 0814 	add.w	r8, r1, #20
 80092ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80092d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092d8:	3301      	adds	r3, #1
 80092da:	429a      	cmp	r2, r3
 80092dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80092e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80092e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092e8:	d332      	bcc.n	8009350 <quorem+0xa0>
 80092ea:	f04f 0e00 	mov.w	lr, #0
 80092ee:	4640      	mov	r0, r8
 80092f0:	46ac      	mov	ip, r5
 80092f2:	46f2      	mov	sl, lr
 80092f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80092f8:	b293      	uxth	r3, r2
 80092fa:	fb06 e303 	mla	r3, r6, r3, lr
 80092fe:	0c12      	lsrs	r2, r2, #16
 8009300:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009304:	fb06 e202 	mla	r2, r6, r2, lr
 8009308:	b29b      	uxth	r3, r3
 800930a:	ebaa 0303 	sub.w	r3, sl, r3
 800930e:	f8dc a000 	ldr.w	sl, [ip]
 8009312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009316:	fa1f fa8a 	uxth.w	sl, sl
 800931a:	4453      	add	r3, sl
 800931c:	fa1f fa82 	uxth.w	sl, r2
 8009320:	f8dc 2000 	ldr.w	r2, [ip]
 8009324:	4581      	cmp	r9, r0
 8009326:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800932a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800932e:	b29b      	uxth	r3, r3
 8009330:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009334:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009338:	f84c 3b04 	str.w	r3, [ip], #4
 800933c:	d2da      	bcs.n	80092f4 <quorem+0x44>
 800933e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009342:	b92b      	cbnz	r3, 8009350 <quorem+0xa0>
 8009344:	9b01      	ldr	r3, [sp, #4]
 8009346:	3b04      	subs	r3, #4
 8009348:	429d      	cmp	r5, r3
 800934a:	461a      	mov	r2, r3
 800934c:	d32f      	bcc.n	80093ae <quorem+0xfe>
 800934e:	613c      	str	r4, [r7, #16]
 8009350:	4638      	mov	r0, r7
 8009352:	f001 f8cd 	bl	800a4f0 <__mcmp>
 8009356:	2800      	cmp	r0, #0
 8009358:	db25      	blt.n	80093a6 <quorem+0xf6>
 800935a:	4628      	mov	r0, r5
 800935c:	f04f 0c00 	mov.w	ip, #0
 8009360:	3601      	adds	r6, #1
 8009362:	f858 1b04 	ldr.w	r1, [r8], #4
 8009366:	f8d0 e000 	ldr.w	lr, [r0]
 800936a:	b28b      	uxth	r3, r1
 800936c:	ebac 0303 	sub.w	r3, ip, r3
 8009370:	fa1f f28e 	uxth.w	r2, lr
 8009374:	4413      	add	r3, r2
 8009376:	0c0a      	lsrs	r2, r1, #16
 8009378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800937c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009380:	b29b      	uxth	r3, r3
 8009382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009386:	45c1      	cmp	r9, r8
 8009388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800938c:	f840 3b04 	str.w	r3, [r0], #4
 8009390:	d2e7      	bcs.n	8009362 <quorem+0xb2>
 8009392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800939a:	b922      	cbnz	r2, 80093a6 <quorem+0xf6>
 800939c:	3b04      	subs	r3, #4
 800939e:	429d      	cmp	r5, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	d30a      	bcc.n	80093ba <quorem+0x10a>
 80093a4:	613c      	str	r4, [r7, #16]
 80093a6:	4630      	mov	r0, r6
 80093a8:	b003      	add	sp, #12
 80093aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ae:	6812      	ldr	r2, [r2, #0]
 80093b0:	3b04      	subs	r3, #4
 80093b2:	2a00      	cmp	r2, #0
 80093b4:	d1cb      	bne.n	800934e <quorem+0x9e>
 80093b6:	3c01      	subs	r4, #1
 80093b8:	e7c6      	b.n	8009348 <quorem+0x98>
 80093ba:	6812      	ldr	r2, [r2, #0]
 80093bc:	3b04      	subs	r3, #4
 80093be:	2a00      	cmp	r2, #0
 80093c0:	d1f0      	bne.n	80093a4 <quorem+0xf4>
 80093c2:	3c01      	subs	r4, #1
 80093c4:	e7eb      	b.n	800939e <quorem+0xee>
 80093c6:	2000      	movs	r0, #0
 80093c8:	e7ee      	b.n	80093a8 <quorem+0xf8>
 80093ca:	0000      	movs	r0, r0
 80093cc:	0000      	movs	r0, r0
	...

080093d0 <_dtoa_r>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	4616      	mov	r6, r2
 80093d6:	461f      	mov	r7, r3
 80093d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80093da:	b099      	sub	sp, #100	; 0x64
 80093dc:	4605      	mov	r5, r0
 80093de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80093e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80093e6:	b974      	cbnz	r4, 8009406 <_dtoa_r+0x36>
 80093e8:	2010      	movs	r0, #16
 80093ea:	f000 fde3 	bl	8009fb4 <malloc>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6268      	str	r0, [r5, #36]	; 0x24
 80093f2:	b920      	cbnz	r0, 80093fe <_dtoa_r+0x2e>
 80093f4:	21ea      	movs	r1, #234	; 0xea
 80093f6:	4bae      	ldr	r3, [pc, #696]	; (80096b0 <_dtoa_r+0x2e0>)
 80093f8:	48ae      	ldr	r0, [pc, #696]	; (80096b4 <_dtoa_r+0x2e4>)
 80093fa:	f001 fba1 	bl	800ab40 <__assert_func>
 80093fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009402:	6004      	str	r4, [r0, #0]
 8009404:	60c4      	str	r4, [r0, #12]
 8009406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009408:	6819      	ldr	r1, [r3, #0]
 800940a:	b151      	cbz	r1, 8009422 <_dtoa_r+0x52>
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	2301      	movs	r3, #1
 8009410:	4093      	lsls	r3, r2
 8009412:	604a      	str	r2, [r1, #4]
 8009414:	608b      	str	r3, [r1, #8]
 8009416:	4628      	mov	r0, r5
 8009418:	f000 fe30 	bl	800a07c <_Bfree>
 800941c:	2200      	movs	r2, #0
 800941e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	1e3b      	subs	r3, r7, #0
 8009424:	bfaf      	iteee	ge
 8009426:	2300      	movge	r3, #0
 8009428:	2201      	movlt	r2, #1
 800942a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800942e:	9305      	strlt	r3, [sp, #20]
 8009430:	bfa8      	it	ge
 8009432:	f8c8 3000 	strge.w	r3, [r8]
 8009436:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800943a:	4b9f      	ldr	r3, [pc, #636]	; (80096b8 <_dtoa_r+0x2e8>)
 800943c:	bfb8      	it	lt
 800943e:	f8c8 2000 	strlt.w	r2, [r8]
 8009442:	ea33 0309 	bics.w	r3, r3, r9
 8009446:	d119      	bne.n	800947c <_dtoa_r+0xac>
 8009448:	f242 730f 	movw	r3, #9999	; 0x270f
 800944c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800944e:	6013      	str	r3, [r2, #0]
 8009450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009454:	4333      	orrs	r3, r6
 8009456:	f000 8580 	beq.w	8009f5a <_dtoa_r+0xb8a>
 800945a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800945c:	b953      	cbnz	r3, 8009474 <_dtoa_r+0xa4>
 800945e:	4b97      	ldr	r3, [pc, #604]	; (80096bc <_dtoa_r+0x2ec>)
 8009460:	e022      	b.n	80094a8 <_dtoa_r+0xd8>
 8009462:	4b97      	ldr	r3, [pc, #604]	; (80096c0 <_dtoa_r+0x2f0>)
 8009464:	9308      	str	r3, [sp, #32]
 8009466:	3308      	adds	r3, #8
 8009468:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	9808      	ldr	r0, [sp, #32]
 800946e:	b019      	add	sp, #100	; 0x64
 8009470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009474:	4b91      	ldr	r3, [pc, #580]	; (80096bc <_dtoa_r+0x2ec>)
 8009476:	9308      	str	r3, [sp, #32]
 8009478:	3303      	adds	r3, #3
 800947a:	e7f5      	b.n	8009468 <_dtoa_r+0x98>
 800947c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009480:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009484:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	f7f7 fa96 	bl	80009bc <__aeabi_dcmpeq>
 8009490:	4680      	mov	r8, r0
 8009492:	b158      	cbz	r0, 80094ac <_dtoa_r+0xdc>
 8009494:	2301      	movs	r3, #1
 8009496:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 8559 	beq.w	8009f54 <_dtoa_r+0xb84>
 80094a2:	4888      	ldr	r0, [pc, #544]	; (80096c4 <_dtoa_r+0x2f4>)
 80094a4:	6018      	str	r0, [r3, #0]
 80094a6:	1e43      	subs	r3, r0, #1
 80094a8:	9308      	str	r3, [sp, #32]
 80094aa:	e7df      	b.n	800946c <_dtoa_r+0x9c>
 80094ac:	ab16      	add	r3, sp, #88	; 0x58
 80094ae:	9301      	str	r3, [sp, #4]
 80094b0:	ab17      	add	r3, sp, #92	; 0x5c
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	4628      	mov	r0, r5
 80094b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80094ba:	f001 f8c5 	bl	800a648 <__d2b>
 80094be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80094c2:	4682      	mov	sl, r0
 80094c4:	2c00      	cmp	r4, #0
 80094c6:	d07e      	beq.n	80095c6 <_dtoa_r+0x1f6>
 80094c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80094d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80094da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80094de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80094e2:	2200      	movs	r2, #0
 80094e4:	4b78      	ldr	r3, [pc, #480]	; (80096c8 <_dtoa_r+0x2f8>)
 80094e6:	f7f6 fe49 	bl	800017c <__aeabi_dsub>
 80094ea:	a36b      	add	r3, pc, #428	; (adr r3, 8009698 <_dtoa_r+0x2c8>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f6 fffc 	bl	80004ec <__aeabi_dmul>
 80094f4:	a36a      	add	r3, pc, #424	; (adr r3, 80096a0 <_dtoa_r+0x2d0>)
 80094f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fa:	f7f6 fe41 	bl	8000180 <__adddf3>
 80094fe:	4606      	mov	r6, r0
 8009500:	4620      	mov	r0, r4
 8009502:	460f      	mov	r7, r1
 8009504:	f7f6 ff88 	bl	8000418 <__aeabi_i2d>
 8009508:	a367      	add	r3, pc, #412	; (adr r3, 80096a8 <_dtoa_r+0x2d8>)
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f7f6 ffed 	bl	80004ec <__aeabi_dmul>
 8009512:	4602      	mov	r2, r0
 8009514:	460b      	mov	r3, r1
 8009516:	4630      	mov	r0, r6
 8009518:	4639      	mov	r1, r7
 800951a:	f7f6 fe31 	bl	8000180 <__adddf3>
 800951e:	4606      	mov	r6, r0
 8009520:	460f      	mov	r7, r1
 8009522:	f7f7 fa93 	bl	8000a4c <__aeabi_d2iz>
 8009526:	2200      	movs	r2, #0
 8009528:	4681      	mov	r9, r0
 800952a:	2300      	movs	r3, #0
 800952c:	4630      	mov	r0, r6
 800952e:	4639      	mov	r1, r7
 8009530:	f7f7 fa4e 	bl	80009d0 <__aeabi_dcmplt>
 8009534:	b148      	cbz	r0, 800954a <_dtoa_r+0x17a>
 8009536:	4648      	mov	r0, r9
 8009538:	f7f6 ff6e 	bl	8000418 <__aeabi_i2d>
 800953c:	4632      	mov	r2, r6
 800953e:	463b      	mov	r3, r7
 8009540:	f7f7 fa3c 	bl	80009bc <__aeabi_dcmpeq>
 8009544:	b908      	cbnz	r0, 800954a <_dtoa_r+0x17a>
 8009546:	f109 39ff 	add.w	r9, r9, #4294967295
 800954a:	f1b9 0f16 	cmp.w	r9, #22
 800954e:	d857      	bhi.n	8009600 <_dtoa_r+0x230>
 8009550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009554:	4b5d      	ldr	r3, [pc, #372]	; (80096cc <_dtoa_r+0x2fc>)
 8009556:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800955a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955e:	f7f7 fa37 	bl	80009d0 <__aeabi_dcmplt>
 8009562:	2800      	cmp	r0, #0
 8009564:	d04e      	beq.n	8009604 <_dtoa_r+0x234>
 8009566:	2300      	movs	r3, #0
 8009568:	f109 39ff 	add.w	r9, r9, #4294967295
 800956c:	930f      	str	r3, [sp, #60]	; 0x3c
 800956e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009570:	1b1c      	subs	r4, r3, r4
 8009572:	1e63      	subs	r3, r4, #1
 8009574:	9309      	str	r3, [sp, #36]	; 0x24
 8009576:	bf49      	itett	mi
 8009578:	f1c4 0301 	rsbmi	r3, r4, #1
 800957c:	2300      	movpl	r3, #0
 800957e:	9306      	strmi	r3, [sp, #24]
 8009580:	2300      	movmi	r3, #0
 8009582:	bf54      	ite	pl
 8009584:	9306      	strpl	r3, [sp, #24]
 8009586:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009588:	f1b9 0f00 	cmp.w	r9, #0
 800958c:	db3c      	blt.n	8009608 <_dtoa_r+0x238>
 800958e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009590:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009594:	444b      	add	r3, r9
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	2300      	movs	r3, #0
 800959a:	930a      	str	r3, [sp, #40]	; 0x28
 800959c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800959e:	2b09      	cmp	r3, #9
 80095a0:	d86c      	bhi.n	800967c <_dtoa_r+0x2ac>
 80095a2:	2b05      	cmp	r3, #5
 80095a4:	bfc4      	itt	gt
 80095a6:	3b04      	subgt	r3, #4
 80095a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80095aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095ac:	bfc8      	it	gt
 80095ae:	2400      	movgt	r4, #0
 80095b0:	f1a3 0302 	sub.w	r3, r3, #2
 80095b4:	bfd8      	it	le
 80095b6:	2401      	movle	r4, #1
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	f200 808b 	bhi.w	80096d4 <_dtoa_r+0x304>
 80095be:	e8df f003 	tbb	[pc, r3]
 80095c2:	4f2d      	.short	0x4f2d
 80095c4:	5b4d      	.short	0x5b4d
 80095c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80095ca:	441c      	add	r4, r3
 80095cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80095d0:	2b20      	cmp	r3, #32
 80095d2:	bfc3      	ittte	gt
 80095d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80095d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80095dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80095e0:	f1c3 0320 	rsble	r3, r3, #32
 80095e4:	bfc6      	itte	gt
 80095e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80095ea:	4318      	orrgt	r0, r3
 80095ec:	fa06 f003 	lslle.w	r0, r6, r3
 80095f0:	f7f6 ff02 	bl	80003f8 <__aeabi_ui2d>
 80095f4:	2301      	movs	r3, #1
 80095f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80095fa:	3c01      	subs	r4, #1
 80095fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80095fe:	e770      	b.n	80094e2 <_dtoa_r+0x112>
 8009600:	2301      	movs	r3, #1
 8009602:	e7b3      	b.n	800956c <_dtoa_r+0x19c>
 8009604:	900f      	str	r0, [sp, #60]	; 0x3c
 8009606:	e7b2      	b.n	800956e <_dtoa_r+0x19e>
 8009608:	9b06      	ldr	r3, [sp, #24]
 800960a:	eba3 0309 	sub.w	r3, r3, r9
 800960e:	9306      	str	r3, [sp, #24]
 8009610:	f1c9 0300 	rsb	r3, r9, #0
 8009614:	930a      	str	r3, [sp, #40]	; 0x28
 8009616:	2300      	movs	r3, #0
 8009618:	930e      	str	r3, [sp, #56]	; 0x38
 800961a:	e7bf      	b.n	800959c <_dtoa_r+0x1cc>
 800961c:	2300      	movs	r3, #0
 800961e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009620:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009622:	2b00      	cmp	r3, #0
 8009624:	dc59      	bgt.n	80096da <_dtoa_r+0x30a>
 8009626:	f04f 0b01 	mov.w	fp, #1
 800962a:	465b      	mov	r3, fp
 800962c:	f8cd b008 	str.w	fp, [sp, #8]
 8009630:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8009634:	2200      	movs	r2, #0
 8009636:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009638:	6042      	str	r2, [r0, #4]
 800963a:	2204      	movs	r2, #4
 800963c:	f102 0614 	add.w	r6, r2, #20
 8009640:	429e      	cmp	r6, r3
 8009642:	6841      	ldr	r1, [r0, #4]
 8009644:	d94f      	bls.n	80096e6 <_dtoa_r+0x316>
 8009646:	4628      	mov	r0, r5
 8009648:	f000 fcd8 	bl	8009ffc <_Balloc>
 800964c:	9008      	str	r0, [sp, #32]
 800964e:	2800      	cmp	r0, #0
 8009650:	d14d      	bne.n	80096ee <_dtoa_r+0x31e>
 8009652:	4602      	mov	r2, r0
 8009654:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009658:	4b1d      	ldr	r3, [pc, #116]	; (80096d0 <_dtoa_r+0x300>)
 800965a:	e6cd      	b.n	80093f8 <_dtoa_r+0x28>
 800965c:	2301      	movs	r3, #1
 800965e:	e7de      	b.n	800961e <_dtoa_r+0x24e>
 8009660:	2300      	movs	r3, #0
 8009662:	930b      	str	r3, [sp, #44]	; 0x2c
 8009664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009666:	eb09 0b03 	add.w	fp, r9, r3
 800966a:	f10b 0301 	add.w	r3, fp, #1
 800966e:	2b01      	cmp	r3, #1
 8009670:	9302      	str	r3, [sp, #8]
 8009672:	bfb8      	it	lt
 8009674:	2301      	movlt	r3, #1
 8009676:	e7dd      	b.n	8009634 <_dtoa_r+0x264>
 8009678:	2301      	movs	r3, #1
 800967a:	e7f2      	b.n	8009662 <_dtoa_r+0x292>
 800967c:	2401      	movs	r4, #1
 800967e:	2300      	movs	r3, #0
 8009680:	940b      	str	r4, [sp, #44]	; 0x2c
 8009682:	9322      	str	r3, [sp, #136]	; 0x88
 8009684:	f04f 3bff 	mov.w	fp, #4294967295
 8009688:	2200      	movs	r2, #0
 800968a:	2312      	movs	r3, #18
 800968c:	f8cd b008 	str.w	fp, [sp, #8]
 8009690:	9223      	str	r2, [sp, #140]	; 0x8c
 8009692:	e7cf      	b.n	8009634 <_dtoa_r+0x264>
 8009694:	f3af 8000 	nop.w
 8009698:	636f4361 	.word	0x636f4361
 800969c:	3fd287a7 	.word	0x3fd287a7
 80096a0:	8b60c8b3 	.word	0x8b60c8b3
 80096a4:	3fc68a28 	.word	0x3fc68a28
 80096a8:	509f79fb 	.word	0x509f79fb
 80096ac:	3fd34413 	.word	0x3fd34413
 80096b0:	0800c0ab 	.word	0x0800c0ab
 80096b4:	0800c0c2 	.word	0x0800c0c2
 80096b8:	7ff00000 	.word	0x7ff00000
 80096bc:	0800c0a7 	.word	0x0800c0a7
 80096c0:	0800c09e 	.word	0x0800c09e
 80096c4:	0800bf55 	.word	0x0800bf55
 80096c8:	3ff80000 	.word	0x3ff80000
 80096cc:	0800c1c0 	.word	0x0800c1c0
 80096d0:	0800c121 	.word	0x0800c121
 80096d4:	2301      	movs	r3, #1
 80096d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80096d8:	e7d4      	b.n	8009684 <_dtoa_r+0x2b4>
 80096da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80096de:	465b      	mov	r3, fp
 80096e0:	f8cd b008 	str.w	fp, [sp, #8]
 80096e4:	e7a6      	b.n	8009634 <_dtoa_r+0x264>
 80096e6:	3101      	adds	r1, #1
 80096e8:	6041      	str	r1, [r0, #4]
 80096ea:	0052      	lsls	r2, r2, #1
 80096ec:	e7a6      	b.n	800963c <_dtoa_r+0x26c>
 80096ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096f0:	9a08      	ldr	r2, [sp, #32]
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	2b0e      	cmp	r3, #14
 80096f8:	f200 80a8 	bhi.w	800984c <_dtoa_r+0x47c>
 80096fc:	2c00      	cmp	r4, #0
 80096fe:	f000 80a5 	beq.w	800984c <_dtoa_r+0x47c>
 8009702:	f1b9 0f00 	cmp.w	r9, #0
 8009706:	dd34      	ble.n	8009772 <_dtoa_r+0x3a2>
 8009708:	4a9a      	ldr	r2, [pc, #616]	; (8009974 <_dtoa_r+0x5a4>)
 800970a:	f009 030f 	and.w	r3, r9, #15
 800970e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009712:	f419 7f80 	tst.w	r9, #256	; 0x100
 8009716:	e9d3 3400 	ldrd	r3, r4, [r3]
 800971a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800971e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8009722:	d016      	beq.n	8009752 <_dtoa_r+0x382>
 8009724:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009728:	4b93      	ldr	r3, [pc, #588]	; (8009978 <_dtoa_r+0x5a8>)
 800972a:	2703      	movs	r7, #3
 800972c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009730:	f7f7 f806 	bl	8000740 <__aeabi_ddiv>
 8009734:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009738:	f004 040f 	and.w	r4, r4, #15
 800973c:	4e8e      	ldr	r6, [pc, #568]	; (8009978 <_dtoa_r+0x5a8>)
 800973e:	b954      	cbnz	r4, 8009756 <_dtoa_r+0x386>
 8009740:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009744:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009748:	f7f6 fffa 	bl	8000740 <__aeabi_ddiv>
 800974c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009750:	e029      	b.n	80097a6 <_dtoa_r+0x3d6>
 8009752:	2702      	movs	r7, #2
 8009754:	e7f2      	b.n	800973c <_dtoa_r+0x36c>
 8009756:	07e1      	lsls	r1, r4, #31
 8009758:	d508      	bpl.n	800976c <_dtoa_r+0x39c>
 800975a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800975e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009762:	f7f6 fec3 	bl	80004ec <__aeabi_dmul>
 8009766:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800976a:	3701      	adds	r7, #1
 800976c:	1064      	asrs	r4, r4, #1
 800976e:	3608      	adds	r6, #8
 8009770:	e7e5      	b.n	800973e <_dtoa_r+0x36e>
 8009772:	f000 80a5 	beq.w	80098c0 <_dtoa_r+0x4f0>
 8009776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800977a:	f1c9 0400 	rsb	r4, r9, #0
 800977e:	4b7d      	ldr	r3, [pc, #500]	; (8009974 <_dtoa_r+0x5a4>)
 8009780:	f004 020f 	and.w	r2, r4, #15
 8009784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f6 feae 	bl	80004ec <__aeabi_dmul>
 8009790:	2702      	movs	r7, #2
 8009792:	2300      	movs	r3, #0
 8009794:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009798:	4e77      	ldr	r6, [pc, #476]	; (8009978 <_dtoa_r+0x5a8>)
 800979a:	1124      	asrs	r4, r4, #4
 800979c:	2c00      	cmp	r4, #0
 800979e:	f040 8084 	bne.w	80098aa <_dtoa_r+0x4da>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1d2      	bne.n	800974c <_dtoa_r+0x37c>
 80097a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 808b 	beq.w	80098c4 <_dtoa_r+0x4f4>
 80097ae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80097b2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80097b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097ba:	2200      	movs	r2, #0
 80097bc:	4b6f      	ldr	r3, [pc, #444]	; (800997c <_dtoa_r+0x5ac>)
 80097be:	f7f7 f907 	bl	80009d0 <__aeabi_dcmplt>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d07e      	beq.n	80098c4 <_dtoa_r+0x4f4>
 80097c6:	9b02      	ldr	r3, [sp, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d07b      	beq.n	80098c4 <_dtoa_r+0x4f4>
 80097cc:	f1bb 0f00 	cmp.w	fp, #0
 80097d0:	dd38      	ble.n	8009844 <_dtoa_r+0x474>
 80097d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80097d6:	2200      	movs	r2, #0
 80097d8:	4b69      	ldr	r3, [pc, #420]	; (8009980 <_dtoa_r+0x5b0>)
 80097da:	f7f6 fe87 	bl	80004ec <__aeabi_dmul>
 80097de:	465c      	mov	r4, fp
 80097e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097e4:	f109 38ff 	add.w	r8, r9, #4294967295
 80097e8:	3701      	adds	r7, #1
 80097ea:	4638      	mov	r0, r7
 80097ec:	f7f6 fe14 	bl	8000418 <__aeabi_i2d>
 80097f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f4:	f7f6 fe7a 	bl	80004ec <__aeabi_dmul>
 80097f8:	2200      	movs	r2, #0
 80097fa:	4b62      	ldr	r3, [pc, #392]	; (8009984 <_dtoa_r+0x5b4>)
 80097fc:	f7f6 fcc0 	bl	8000180 <__adddf3>
 8009800:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009804:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009808:	9611      	str	r6, [sp, #68]	; 0x44
 800980a:	2c00      	cmp	r4, #0
 800980c:	d15d      	bne.n	80098ca <_dtoa_r+0x4fa>
 800980e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009812:	2200      	movs	r2, #0
 8009814:	4b5c      	ldr	r3, [pc, #368]	; (8009988 <_dtoa_r+0x5b8>)
 8009816:	f7f6 fcb1 	bl	800017c <__aeabi_dsub>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009822:	4633      	mov	r3, r6
 8009824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009826:	f7f7 f8f1 	bl	8000a0c <__aeabi_dcmpgt>
 800982a:	2800      	cmp	r0, #0
 800982c:	f040 829e 	bne.w	8009d6c <_dtoa_r+0x99c>
 8009830:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009836:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800983a:	f7f7 f8c9 	bl	80009d0 <__aeabi_dcmplt>
 800983e:	2800      	cmp	r0, #0
 8009840:	f040 8292 	bne.w	8009d68 <_dtoa_r+0x998>
 8009844:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009848:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800984c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800984e:	2b00      	cmp	r3, #0
 8009850:	f2c0 8153 	blt.w	8009afa <_dtoa_r+0x72a>
 8009854:	f1b9 0f0e 	cmp.w	r9, #14
 8009858:	f300 814f 	bgt.w	8009afa <_dtoa_r+0x72a>
 800985c:	4b45      	ldr	r3, [pc, #276]	; (8009974 <_dtoa_r+0x5a4>)
 800985e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009866:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800986a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800986c:	2b00      	cmp	r3, #0
 800986e:	f280 80db 	bge.w	8009a28 <_dtoa_r+0x658>
 8009872:	9b02      	ldr	r3, [sp, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f300 80d7 	bgt.w	8009a28 <_dtoa_r+0x658>
 800987a:	f040 8274 	bne.w	8009d66 <_dtoa_r+0x996>
 800987e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009882:	2200      	movs	r2, #0
 8009884:	4b40      	ldr	r3, [pc, #256]	; (8009988 <_dtoa_r+0x5b8>)
 8009886:	f7f6 fe31 	bl	80004ec <__aeabi_dmul>
 800988a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800988e:	f7f7 f8b3 	bl	80009f8 <__aeabi_dcmpge>
 8009892:	9c02      	ldr	r4, [sp, #8]
 8009894:	4626      	mov	r6, r4
 8009896:	2800      	cmp	r0, #0
 8009898:	f040 824a 	bne.w	8009d30 <_dtoa_r+0x960>
 800989c:	2331      	movs	r3, #49	; 0x31
 800989e:	9f08      	ldr	r7, [sp, #32]
 80098a0:	f109 0901 	add.w	r9, r9, #1
 80098a4:	f807 3b01 	strb.w	r3, [r7], #1
 80098a8:	e246      	b.n	8009d38 <_dtoa_r+0x968>
 80098aa:	07e2      	lsls	r2, r4, #31
 80098ac:	d505      	bpl.n	80098ba <_dtoa_r+0x4ea>
 80098ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098b2:	f7f6 fe1b 	bl	80004ec <__aeabi_dmul>
 80098b6:	2301      	movs	r3, #1
 80098b8:	3701      	adds	r7, #1
 80098ba:	1064      	asrs	r4, r4, #1
 80098bc:	3608      	adds	r6, #8
 80098be:	e76d      	b.n	800979c <_dtoa_r+0x3cc>
 80098c0:	2702      	movs	r7, #2
 80098c2:	e770      	b.n	80097a6 <_dtoa_r+0x3d6>
 80098c4:	46c8      	mov	r8, r9
 80098c6:	9c02      	ldr	r4, [sp, #8]
 80098c8:	e78f      	b.n	80097ea <_dtoa_r+0x41a>
 80098ca:	9908      	ldr	r1, [sp, #32]
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <_dtoa_r+0x5a4>)
 80098ce:	4421      	add	r1, r4
 80098d0:	9112      	str	r1, [sp, #72]	; 0x48
 80098d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098d8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80098dc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098e0:	2900      	cmp	r1, #0
 80098e2:	d055      	beq.n	8009990 <_dtoa_r+0x5c0>
 80098e4:	2000      	movs	r0, #0
 80098e6:	4929      	ldr	r1, [pc, #164]	; (800998c <_dtoa_r+0x5bc>)
 80098e8:	f7f6 ff2a 	bl	8000740 <__aeabi_ddiv>
 80098ec:	463b      	mov	r3, r7
 80098ee:	4632      	mov	r2, r6
 80098f0:	f7f6 fc44 	bl	800017c <__aeabi_dsub>
 80098f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80098f8:	9f08      	ldr	r7, [sp, #32]
 80098fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098fe:	f7f7 f8a5 	bl	8000a4c <__aeabi_d2iz>
 8009902:	4604      	mov	r4, r0
 8009904:	f7f6 fd88 	bl	8000418 <__aeabi_i2d>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009910:	f7f6 fc34 	bl	800017c <__aeabi_dsub>
 8009914:	4602      	mov	r2, r0
 8009916:	460b      	mov	r3, r1
 8009918:	3430      	adds	r4, #48	; 0x30
 800991a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800991e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009922:	f807 4b01 	strb.w	r4, [r7], #1
 8009926:	f7f7 f853 	bl	80009d0 <__aeabi_dcmplt>
 800992a:	2800      	cmp	r0, #0
 800992c:	d174      	bne.n	8009a18 <_dtoa_r+0x648>
 800992e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009932:	2000      	movs	r0, #0
 8009934:	4911      	ldr	r1, [pc, #68]	; (800997c <_dtoa_r+0x5ac>)
 8009936:	f7f6 fc21 	bl	800017c <__aeabi_dsub>
 800993a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800993e:	f7f7 f847 	bl	80009d0 <__aeabi_dcmplt>
 8009942:	2800      	cmp	r0, #0
 8009944:	f040 80b6 	bne.w	8009ab4 <_dtoa_r+0x6e4>
 8009948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800994a:	429f      	cmp	r7, r3
 800994c:	f43f af7a 	beq.w	8009844 <_dtoa_r+0x474>
 8009950:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009954:	2200      	movs	r2, #0
 8009956:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <_dtoa_r+0x5b0>)
 8009958:	f7f6 fdc8 	bl	80004ec <__aeabi_dmul>
 800995c:	2200      	movs	r2, #0
 800995e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009966:	4b06      	ldr	r3, [pc, #24]	; (8009980 <_dtoa_r+0x5b0>)
 8009968:	f7f6 fdc0 	bl	80004ec <__aeabi_dmul>
 800996c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009970:	e7c3      	b.n	80098fa <_dtoa_r+0x52a>
 8009972:	bf00      	nop
 8009974:	0800c1c0 	.word	0x0800c1c0
 8009978:	0800c198 	.word	0x0800c198
 800997c:	3ff00000 	.word	0x3ff00000
 8009980:	40240000 	.word	0x40240000
 8009984:	401c0000 	.word	0x401c0000
 8009988:	40140000 	.word	0x40140000
 800998c:	3fe00000 	.word	0x3fe00000
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f6 fdaa 	bl	80004ec <__aeabi_dmul>
 8009998:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800999a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800999e:	9c08      	ldr	r4, [sp, #32]
 80099a0:	9314      	str	r3, [sp, #80]	; 0x50
 80099a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099a6:	f7f7 f851 	bl	8000a4c <__aeabi_d2iz>
 80099aa:	9015      	str	r0, [sp, #84]	; 0x54
 80099ac:	f7f6 fd34 	bl	8000418 <__aeabi_i2d>
 80099b0:	4602      	mov	r2, r0
 80099b2:	460b      	mov	r3, r1
 80099b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099b8:	f7f6 fbe0 	bl	800017c <__aeabi_dsub>
 80099bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099be:	4606      	mov	r6, r0
 80099c0:	3330      	adds	r3, #48	; 0x30
 80099c2:	f804 3b01 	strb.w	r3, [r4], #1
 80099c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099c8:	460f      	mov	r7, r1
 80099ca:	429c      	cmp	r4, r3
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	d124      	bne.n	8009a1c <_dtoa_r+0x64c>
 80099d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80099d6:	4bb3      	ldr	r3, [pc, #716]	; (8009ca4 <_dtoa_r+0x8d4>)
 80099d8:	f7f6 fbd2 	bl	8000180 <__adddf3>
 80099dc:	4602      	mov	r2, r0
 80099de:	460b      	mov	r3, r1
 80099e0:	4630      	mov	r0, r6
 80099e2:	4639      	mov	r1, r7
 80099e4:	f7f7 f812 	bl	8000a0c <__aeabi_dcmpgt>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d162      	bne.n	8009ab2 <_dtoa_r+0x6e2>
 80099ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80099f0:	2000      	movs	r0, #0
 80099f2:	49ac      	ldr	r1, [pc, #688]	; (8009ca4 <_dtoa_r+0x8d4>)
 80099f4:	f7f6 fbc2 	bl	800017c <__aeabi_dsub>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4630      	mov	r0, r6
 80099fe:	4639      	mov	r1, r7
 8009a00:	f7f6 ffe6 	bl	80009d0 <__aeabi_dcmplt>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f43f af1d 	beq.w	8009844 <_dtoa_r+0x474>
 8009a0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009a0c:	1e7b      	subs	r3, r7, #1
 8009a0e:	9314      	str	r3, [sp, #80]	; 0x50
 8009a10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009a14:	2b30      	cmp	r3, #48	; 0x30
 8009a16:	d0f8      	beq.n	8009a0a <_dtoa_r+0x63a>
 8009a18:	46c1      	mov	r9, r8
 8009a1a:	e03a      	b.n	8009a92 <_dtoa_r+0x6c2>
 8009a1c:	4ba2      	ldr	r3, [pc, #648]	; (8009ca8 <_dtoa_r+0x8d8>)
 8009a1e:	f7f6 fd65 	bl	80004ec <__aeabi_dmul>
 8009a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a26:	e7bc      	b.n	80099a2 <_dtoa_r+0x5d2>
 8009a28:	9f08      	ldr	r7, [sp, #32]
 8009a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a32:	f7f6 fe85 	bl	8000740 <__aeabi_ddiv>
 8009a36:	f7f7 f809 	bl	8000a4c <__aeabi_d2iz>
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	f7f6 fcec 	bl	8000418 <__aeabi_i2d>
 8009a40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a44:	f7f6 fd52 	bl	80004ec <__aeabi_dmul>
 8009a48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4602      	mov	r2, r0
 8009a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a54:	f7f6 fb92 	bl	800017c <__aeabi_dsub>
 8009a58:	f807 6b01 	strb.w	r6, [r7], #1
 8009a5c:	9e08      	ldr	r6, [sp, #32]
 8009a5e:	9b02      	ldr	r3, [sp, #8]
 8009a60:	1bbe      	subs	r6, r7, r6
 8009a62:	42b3      	cmp	r3, r6
 8009a64:	d13a      	bne.n	8009adc <_dtoa_r+0x70c>
 8009a66:	4602      	mov	r2, r0
 8009a68:	460b      	mov	r3, r1
 8009a6a:	f7f6 fb89 	bl	8000180 <__adddf3>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a7a:	f7f6 ffc7 	bl	8000a0c <__aeabi_dcmpgt>
 8009a7e:	bb58      	cbnz	r0, 8009ad8 <_dtoa_r+0x708>
 8009a80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a88:	f7f6 ff98 	bl	80009bc <__aeabi_dcmpeq>
 8009a8c:	b108      	cbz	r0, 8009a92 <_dtoa_r+0x6c2>
 8009a8e:	07e1      	lsls	r1, r4, #31
 8009a90:	d422      	bmi.n	8009ad8 <_dtoa_r+0x708>
 8009a92:	4628      	mov	r0, r5
 8009a94:	4651      	mov	r1, sl
 8009a96:	f000 faf1 	bl	800a07c <_Bfree>
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	703b      	strb	r3, [r7, #0]
 8009a9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009aa0:	f109 0001 	add.w	r0, r9, #1
 8009aa4:	6018      	str	r0, [r3, #0]
 8009aa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f43f acdf 	beq.w	800946c <_dtoa_r+0x9c>
 8009aae:	601f      	str	r7, [r3, #0]
 8009ab0:	e4dc      	b.n	800946c <_dtoa_r+0x9c>
 8009ab2:	4627      	mov	r7, r4
 8009ab4:	463b      	mov	r3, r7
 8009ab6:	461f      	mov	r7, r3
 8009ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009abc:	2a39      	cmp	r2, #57	; 0x39
 8009abe:	d107      	bne.n	8009ad0 <_dtoa_r+0x700>
 8009ac0:	9a08      	ldr	r2, [sp, #32]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d1f7      	bne.n	8009ab6 <_dtoa_r+0x6e6>
 8009ac6:	2230      	movs	r2, #48	; 0x30
 8009ac8:	9908      	ldr	r1, [sp, #32]
 8009aca:	f108 0801 	add.w	r8, r8, #1
 8009ace:	700a      	strb	r2, [r1, #0]
 8009ad0:	781a      	ldrb	r2, [r3, #0]
 8009ad2:	3201      	adds	r2, #1
 8009ad4:	701a      	strb	r2, [r3, #0]
 8009ad6:	e79f      	b.n	8009a18 <_dtoa_r+0x648>
 8009ad8:	46c8      	mov	r8, r9
 8009ada:	e7eb      	b.n	8009ab4 <_dtoa_r+0x6e4>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4b72      	ldr	r3, [pc, #456]	; (8009ca8 <_dtoa_r+0x8d8>)
 8009ae0:	f7f6 fd04 	bl	80004ec <__aeabi_dmul>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009aec:	2200      	movs	r2, #0
 8009aee:	2300      	movs	r3, #0
 8009af0:	f7f6 ff64 	bl	80009bc <__aeabi_dcmpeq>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d098      	beq.n	8009a2a <_dtoa_r+0x65a>
 8009af8:	e7cb      	b.n	8009a92 <_dtoa_r+0x6c2>
 8009afa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009afc:	2a00      	cmp	r2, #0
 8009afe:	f000 80cd 	beq.w	8009c9c <_dtoa_r+0x8cc>
 8009b02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009b04:	2a01      	cmp	r2, #1
 8009b06:	f300 80af 	bgt.w	8009c68 <_dtoa_r+0x898>
 8009b0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009b0c:	2a00      	cmp	r2, #0
 8009b0e:	f000 80a7 	beq.w	8009c60 <_dtoa_r+0x890>
 8009b12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009b16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b18:	9f06      	ldr	r7, [sp, #24]
 8009b1a:	9a06      	ldr	r2, [sp, #24]
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	441a      	add	r2, r3
 8009b20:	9206      	str	r2, [sp, #24]
 8009b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b24:	4628      	mov	r0, r5
 8009b26:	441a      	add	r2, r3
 8009b28:	9209      	str	r2, [sp, #36]	; 0x24
 8009b2a:	f000 fb61 	bl	800a1f0 <__i2b>
 8009b2e:	4606      	mov	r6, r0
 8009b30:	2f00      	cmp	r7, #0
 8009b32:	dd0c      	ble.n	8009b4e <_dtoa_r+0x77e>
 8009b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	dd09      	ble.n	8009b4e <_dtoa_r+0x77e>
 8009b3a:	42bb      	cmp	r3, r7
 8009b3c:	bfa8      	it	ge
 8009b3e:	463b      	movge	r3, r7
 8009b40:	9a06      	ldr	r2, [sp, #24]
 8009b42:	1aff      	subs	r7, r7, r3
 8009b44:	1ad2      	subs	r2, r2, r3
 8009b46:	9206      	str	r2, [sp, #24]
 8009b48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	b1f3      	cbz	r3, 8009b90 <_dtoa_r+0x7c0>
 8009b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	f000 80a9 	beq.w	8009cac <_dtoa_r+0x8dc>
 8009b5a:	2c00      	cmp	r4, #0
 8009b5c:	dd10      	ble.n	8009b80 <_dtoa_r+0x7b0>
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4622      	mov	r2, r4
 8009b62:	4628      	mov	r0, r5
 8009b64:	f000 fbfe 	bl	800a364 <__pow5mult>
 8009b68:	4652      	mov	r2, sl
 8009b6a:	4601      	mov	r1, r0
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 fb54 	bl	800a21c <__multiply>
 8009b74:	4680      	mov	r8, r0
 8009b76:	4651      	mov	r1, sl
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 fa7f 	bl	800a07c <_Bfree>
 8009b7e:	46c2      	mov	sl, r8
 8009b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b82:	1b1a      	subs	r2, r3, r4
 8009b84:	d004      	beq.n	8009b90 <_dtoa_r+0x7c0>
 8009b86:	4651      	mov	r1, sl
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 fbeb 	bl	800a364 <__pow5mult>
 8009b8e:	4682      	mov	sl, r0
 8009b90:	2101      	movs	r1, #1
 8009b92:	4628      	mov	r0, r5
 8009b94:	f000 fb2c 	bl	800a1f0 <__i2b>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f340 8087 	ble.w	8009cb0 <_dtoa_r+0x8e0>
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	f000 fbdc 	bl	800a364 <__pow5mult>
 8009bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	f340 8080 	ble.w	8009cb6 <_dtoa_r+0x8e6>
 8009bb6:	f04f 0800 	mov.w	r8, #0
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bc0:	6918      	ldr	r0, [r3, #16]
 8009bc2:	f000 fac7 	bl	800a154 <__hi0bits>
 8009bc6:	f1c0 0020 	rsb	r0, r0, #32
 8009bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bcc:	4418      	add	r0, r3
 8009bce:	f010 001f 	ands.w	r0, r0, #31
 8009bd2:	f000 8092 	beq.w	8009cfa <_dtoa_r+0x92a>
 8009bd6:	f1c0 0320 	rsb	r3, r0, #32
 8009bda:	2b04      	cmp	r3, #4
 8009bdc:	f340 808a 	ble.w	8009cf4 <_dtoa_r+0x924>
 8009be0:	f1c0 001c 	rsb	r0, r0, #28
 8009be4:	9b06      	ldr	r3, [sp, #24]
 8009be6:	4407      	add	r7, r0
 8009be8:	4403      	add	r3, r0
 8009bea:	9306      	str	r3, [sp, #24]
 8009bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bee:	4403      	add	r3, r0
 8009bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dd05      	ble.n	8009c04 <_dtoa_r+0x834>
 8009bf8:	4651      	mov	r1, sl
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f000 fc0b 	bl	800a418 <__lshift>
 8009c02:	4682      	mov	sl, r0
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	dd05      	ble.n	8009c16 <_dtoa_r+0x846>
 8009c0a:	4621      	mov	r1, r4
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f000 fc02 	bl	800a418 <__lshift>
 8009c14:	4604      	mov	r4, r0
 8009c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d070      	beq.n	8009cfe <_dtoa_r+0x92e>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4650      	mov	r0, sl
 8009c20:	f000 fc66 	bl	800a4f0 <__mcmp>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	da6a      	bge.n	8009cfe <_dtoa_r+0x92e>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4651      	mov	r1, sl
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f000 fa46 	bl	800a0c0 <__multadd>
 8009c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c36:	4682      	mov	sl, r0
 8009c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8193 	beq.w	8009f68 <_dtoa_r+0xb98>
 8009c42:	4631      	mov	r1, r6
 8009c44:	2300      	movs	r3, #0
 8009c46:	220a      	movs	r2, #10
 8009c48:	4628      	mov	r0, r5
 8009c4a:	f000 fa39 	bl	800a0c0 <__multadd>
 8009c4e:	f1bb 0f00 	cmp.w	fp, #0
 8009c52:	4606      	mov	r6, r0
 8009c54:	f300 8093 	bgt.w	8009d7e <_dtoa_r+0x9ae>
 8009c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	dc57      	bgt.n	8009d0e <_dtoa_r+0x93e>
 8009c5e:	e08e      	b.n	8009d7e <_dtoa_r+0x9ae>
 8009c60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c66:	e756      	b.n	8009b16 <_dtoa_r+0x746>
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	1e5c      	subs	r4, r3, #1
 8009c6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c6e:	42a3      	cmp	r3, r4
 8009c70:	bfb7      	itett	lt
 8009c72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009c74:	1b1c      	subge	r4, r3, r4
 8009c76:	1ae2      	sublt	r2, r4, r3
 8009c78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009c7a:	bfbe      	ittt	lt
 8009c7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8009c7e:	189b      	addlt	r3, r3, r2
 8009c80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009c82:	9b02      	ldr	r3, [sp, #8]
 8009c84:	bfb8      	it	lt
 8009c86:	2400      	movlt	r4, #0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	bfbb      	ittet	lt
 8009c8c:	9b06      	ldrlt	r3, [sp, #24]
 8009c8e:	9a02      	ldrlt	r2, [sp, #8]
 8009c90:	9f06      	ldrge	r7, [sp, #24]
 8009c92:	1a9f      	sublt	r7, r3, r2
 8009c94:	bfac      	ite	ge
 8009c96:	9b02      	ldrge	r3, [sp, #8]
 8009c98:	2300      	movlt	r3, #0
 8009c9a:	e73e      	b.n	8009b1a <_dtoa_r+0x74a>
 8009c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009c9e:	9f06      	ldr	r7, [sp, #24]
 8009ca0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8009ca2:	e745      	b.n	8009b30 <_dtoa_r+0x760>
 8009ca4:	3fe00000 	.word	0x3fe00000
 8009ca8:	40240000 	.word	0x40240000
 8009cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cae:	e76a      	b.n	8009b86 <_dtoa_r+0x7b6>
 8009cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	dc19      	bgt.n	8009cea <_dtoa_r+0x91a>
 8009cb6:	9b04      	ldr	r3, [sp, #16]
 8009cb8:	b9bb      	cbnz	r3, 8009cea <_dtoa_r+0x91a>
 8009cba:	9b05      	ldr	r3, [sp, #20]
 8009cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009cc0:	b99b      	cbnz	r3, 8009cea <_dtoa_r+0x91a>
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009cc8:	0d1b      	lsrs	r3, r3, #20
 8009cca:	051b      	lsls	r3, r3, #20
 8009ccc:	b183      	cbz	r3, 8009cf0 <_dtoa_r+0x920>
 8009cce:	f04f 0801 	mov.w	r8, #1
 8009cd2:	9b06      	ldr	r3, [sp, #24]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	9306      	str	r3, [sp, #24]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cda:	3301      	adds	r3, #1
 8009cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009cde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f47f af6a 	bne.w	8009bba <_dtoa_r+0x7ea>
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e76f      	b.n	8009bca <_dtoa_r+0x7fa>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	e7f6      	b.n	8009cde <_dtoa_r+0x90e>
 8009cf0:	4698      	mov	r8, r3
 8009cf2:	e7f4      	b.n	8009cde <_dtoa_r+0x90e>
 8009cf4:	f43f af7d 	beq.w	8009bf2 <_dtoa_r+0x822>
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	301c      	adds	r0, #28
 8009cfc:	e772      	b.n	8009be4 <_dtoa_r+0x814>
 8009cfe:	9b02      	ldr	r3, [sp, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	dc36      	bgt.n	8009d72 <_dtoa_r+0x9a2>
 8009d04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	dd33      	ble.n	8009d72 <_dtoa_r+0x9a2>
 8009d0a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009d0e:	f1bb 0f00 	cmp.w	fp, #0
 8009d12:	d10d      	bne.n	8009d30 <_dtoa_r+0x960>
 8009d14:	4621      	mov	r1, r4
 8009d16:	465b      	mov	r3, fp
 8009d18:	2205      	movs	r2, #5
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 f9d0 	bl	800a0c0 <__multadd>
 8009d20:	4601      	mov	r1, r0
 8009d22:	4604      	mov	r4, r0
 8009d24:	4650      	mov	r0, sl
 8009d26:	f000 fbe3 	bl	800a4f0 <__mcmp>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	f73f adb6 	bgt.w	800989c <_dtoa_r+0x4cc>
 8009d30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d32:	9f08      	ldr	r7, [sp, #32]
 8009d34:	ea6f 0903 	mvn.w	r9, r3
 8009d38:	f04f 0800 	mov.w	r8, #0
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f99c 	bl	800a07c <_Bfree>
 8009d44:	2e00      	cmp	r6, #0
 8009d46:	f43f aea4 	beq.w	8009a92 <_dtoa_r+0x6c2>
 8009d4a:	f1b8 0f00 	cmp.w	r8, #0
 8009d4e:	d005      	beq.n	8009d5c <_dtoa_r+0x98c>
 8009d50:	45b0      	cmp	r8, r6
 8009d52:	d003      	beq.n	8009d5c <_dtoa_r+0x98c>
 8009d54:	4641      	mov	r1, r8
 8009d56:	4628      	mov	r0, r5
 8009d58:	f000 f990 	bl	800a07c <_Bfree>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f000 f98c 	bl	800a07c <_Bfree>
 8009d64:	e695      	b.n	8009a92 <_dtoa_r+0x6c2>
 8009d66:	2400      	movs	r4, #0
 8009d68:	4626      	mov	r6, r4
 8009d6a:	e7e1      	b.n	8009d30 <_dtoa_r+0x960>
 8009d6c:	46c1      	mov	r9, r8
 8009d6e:	4626      	mov	r6, r4
 8009d70:	e594      	b.n	800989c <_dtoa_r+0x4cc>
 8009d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d74:	f8dd b008 	ldr.w	fp, [sp, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80fc 	beq.w	8009f76 <_dtoa_r+0xba6>
 8009d7e:	2f00      	cmp	r7, #0
 8009d80:	dd05      	ble.n	8009d8e <_dtoa_r+0x9be>
 8009d82:	4631      	mov	r1, r6
 8009d84:	463a      	mov	r2, r7
 8009d86:	4628      	mov	r0, r5
 8009d88:	f000 fb46 	bl	800a418 <__lshift>
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	f1b8 0f00 	cmp.w	r8, #0
 8009d92:	d05c      	beq.n	8009e4e <_dtoa_r+0xa7e>
 8009d94:	4628      	mov	r0, r5
 8009d96:	6871      	ldr	r1, [r6, #4]
 8009d98:	f000 f930 	bl	8009ffc <_Balloc>
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	b928      	cbnz	r0, 8009dac <_dtoa_r+0x9dc>
 8009da0:	4602      	mov	r2, r0
 8009da2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009da6:	4b7e      	ldr	r3, [pc, #504]	; (8009fa0 <_dtoa_r+0xbd0>)
 8009da8:	f7ff bb26 	b.w	80093f8 <_dtoa_r+0x28>
 8009dac:	6932      	ldr	r2, [r6, #16]
 8009dae:	f106 010c 	add.w	r1, r6, #12
 8009db2:	3202      	adds	r2, #2
 8009db4:	0092      	lsls	r2, r2, #2
 8009db6:	300c      	adds	r0, #12
 8009db8:	f000 f912 	bl	8009fe0 <memcpy>
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f000 fb29 	bl	800a418 <__lshift>
 8009dc6:	46b0      	mov	r8, r6
 8009dc8:	4606      	mov	r6, r0
 8009dca:	9b08      	ldr	r3, [sp, #32]
 8009dcc:	3301      	adds	r3, #1
 8009dce:	9302      	str	r3, [sp, #8]
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	445b      	add	r3, fp
 8009dd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009dd6:	9b04      	ldr	r3, [sp, #16]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8009dde:	9b02      	ldr	r3, [sp, #8]
 8009de0:	4621      	mov	r1, r4
 8009de2:	4650      	mov	r0, sl
 8009de4:	f103 3bff 	add.w	fp, r3, #4294967295
 8009de8:	f7ff fa62 	bl	80092b0 <quorem>
 8009dec:	4603      	mov	r3, r0
 8009dee:	4641      	mov	r1, r8
 8009df0:	3330      	adds	r3, #48	; 0x30
 8009df2:	9004      	str	r0, [sp, #16]
 8009df4:	4650      	mov	r0, sl
 8009df6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009df8:	f000 fb7a 	bl	800a4f0 <__mcmp>
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	9006      	str	r0, [sp, #24]
 8009e00:	4621      	mov	r1, r4
 8009e02:	4628      	mov	r0, r5
 8009e04:	f000 fb90 	bl	800a528 <__mdiff>
 8009e08:	68c2      	ldr	r2, [r0, #12]
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e0e:	bb02      	cbnz	r2, 8009e52 <_dtoa_r+0xa82>
 8009e10:	4601      	mov	r1, r0
 8009e12:	4650      	mov	r0, sl
 8009e14:	f000 fb6c 	bl	800a4f0 <__mcmp>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4628      	mov	r0, r5
 8009e20:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8009e24:	f000 f92a 	bl	800a07c <_Bfree>
 8009e28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e2c:	9f02      	ldr	r7, [sp, #8]
 8009e2e:	ea43 0102 	orr.w	r1, r3, r2
 8009e32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e34:	430b      	orrs	r3, r1
 8009e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e38:	d10d      	bne.n	8009e56 <_dtoa_r+0xa86>
 8009e3a:	2b39      	cmp	r3, #57	; 0x39
 8009e3c:	d027      	beq.n	8009e8e <_dtoa_r+0xabe>
 8009e3e:	9a06      	ldr	r2, [sp, #24]
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	dd01      	ble.n	8009e48 <_dtoa_r+0xa78>
 8009e44:	9b04      	ldr	r3, [sp, #16]
 8009e46:	3331      	adds	r3, #49	; 0x31
 8009e48:	f88b 3000 	strb.w	r3, [fp]
 8009e4c:	e776      	b.n	8009d3c <_dtoa_r+0x96c>
 8009e4e:	4630      	mov	r0, r6
 8009e50:	e7b9      	b.n	8009dc6 <_dtoa_r+0x9f6>
 8009e52:	2201      	movs	r2, #1
 8009e54:	e7e2      	b.n	8009e1c <_dtoa_r+0xa4c>
 8009e56:	9906      	ldr	r1, [sp, #24]
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	db04      	blt.n	8009e66 <_dtoa_r+0xa96>
 8009e5c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8009e5e:	4301      	orrs	r1, r0
 8009e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e62:	4301      	orrs	r1, r0
 8009e64:	d120      	bne.n	8009ea8 <_dtoa_r+0xad8>
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	ddee      	ble.n	8009e48 <_dtoa_r+0xa78>
 8009e6a:	4651      	mov	r1, sl
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	4628      	mov	r0, r5
 8009e70:	9302      	str	r3, [sp, #8]
 8009e72:	f000 fad1 	bl	800a418 <__lshift>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4682      	mov	sl, r0
 8009e7a:	f000 fb39 	bl	800a4f0 <__mcmp>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	9b02      	ldr	r3, [sp, #8]
 8009e82:	dc02      	bgt.n	8009e8a <_dtoa_r+0xaba>
 8009e84:	d1e0      	bne.n	8009e48 <_dtoa_r+0xa78>
 8009e86:	07da      	lsls	r2, r3, #31
 8009e88:	d5de      	bpl.n	8009e48 <_dtoa_r+0xa78>
 8009e8a:	2b39      	cmp	r3, #57	; 0x39
 8009e8c:	d1da      	bne.n	8009e44 <_dtoa_r+0xa74>
 8009e8e:	2339      	movs	r3, #57	; 0x39
 8009e90:	f88b 3000 	strb.w	r3, [fp]
 8009e94:	463b      	mov	r3, r7
 8009e96:	461f      	mov	r7, r3
 8009e98:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	2a39      	cmp	r2, #57	; 0x39
 8009ea0:	d050      	beq.n	8009f44 <_dtoa_r+0xb74>
 8009ea2:	3201      	adds	r2, #1
 8009ea4:	701a      	strb	r2, [r3, #0]
 8009ea6:	e749      	b.n	8009d3c <_dtoa_r+0x96c>
 8009ea8:	2a00      	cmp	r2, #0
 8009eaa:	dd03      	ble.n	8009eb4 <_dtoa_r+0xae4>
 8009eac:	2b39      	cmp	r3, #57	; 0x39
 8009eae:	d0ee      	beq.n	8009e8e <_dtoa_r+0xabe>
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	e7c9      	b.n	8009e48 <_dtoa_r+0xa78>
 8009eb4:	9a02      	ldr	r2, [sp, #8]
 8009eb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009eb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ebc:	428a      	cmp	r2, r1
 8009ebe:	d02a      	beq.n	8009f16 <_dtoa_r+0xb46>
 8009ec0:	4651      	mov	r1, sl
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	220a      	movs	r2, #10
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	f000 f8fa 	bl	800a0c0 <__multadd>
 8009ecc:	45b0      	cmp	r8, r6
 8009ece:	4682      	mov	sl, r0
 8009ed0:	f04f 0300 	mov.w	r3, #0
 8009ed4:	f04f 020a 	mov.w	r2, #10
 8009ed8:	4641      	mov	r1, r8
 8009eda:	4628      	mov	r0, r5
 8009edc:	d107      	bne.n	8009eee <_dtoa_r+0xb1e>
 8009ede:	f000 f8ef 	bl	800a0c0 <__multadd>
 8009ee2:	4680      	mov	r8, r0
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	9b02      	ldr	r3, [sp, #8]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	9302      	str	r3, [sp, #8]
 8009eec:	e777      	b.n	8009dde <_dtoa_r+0xa0e>
 8009eee:	f000 f8e7 	bl	800a0c0 <__multadd>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4680      	mov	r8, r0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	220a      	movs	r2, #10
 8009efa:	4628      	mov	r0, r5
 8009efc:	f000 f8e0 	bl	800a0c0 <__multadd>
 8009f00:	4606      	mov	r6, r0
 8009f02:	e7f0      	b.n	8009ee6 <_dtoa_r+0xb16>
 8009f04:	f1bb 0f00 	cmp.w	fp, #0
 8009f08:	bfcc      	ite	gt
 8009f0a:	465f      	movgt	r7, fp
 8009f0c:	2701      	movle	r7, #1
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	9a08      	ldr	r2, [sp, #32]
 8009f14:	4417      	add	r7, r2
 8009f16:	4651      	mov	r1, sl
 8009f18:	2201      	movs	r2, #1
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	9302      	str	r3, [sp, #8]
 8009f1e:	f000 fa7b 	bl	800a418 <__lshift>
 8009f22:	4621      	mov	r1, r4
 8009f24:	4682      	mov	sl, r0
 8009f26:	f000 fae3 	bl	800a4f0 <__mcmp>
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	dcb2      	bgt.n	8009e94 <_dtoa_r+0xac4>
 8009f2e:	d102      	bne.n	8009f36 <_dtoa_r+0xb66>
 8009f30:	9b02      	ldr	r3, [sp, #8]
 8009f32:	07db      	lsls	r3, r3, #31
 8009f34:	d4ae      	bmi.n	8009e94 <_dtoa_r+0xac4>
 8009f36:	463b      	mov	r3, r7
 8009f38:	461f      	mov	r7, r3
 8009f3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f3e:	2a30      	cmp	r2, #48	; 0x30
 8009f40:	d0fa      	beq.n	8009f38 <_dtoa_r+0xb68>
 8009f42:	e6fb      	b.n	8009d3c <_dtoa_r+0x96c>
 8009f44:	9a08      	ldr	r2, [sp, #32]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d1a5      	bne.n	8009e96 <_dtoa_r+0xac6>
 8009f4a:	2331      	movs	r3, #49	; 0x31
 8009f4c:	f109 0901 	add.w	r9, r9, #1
 8009f50:	7013      	strb	r3, [r2, #0]
 8009f52:	e6f3      	b.n	8009d3c <_dtoa_r+0x96c>
 8009f54:	4b13      	ldr	r3, [pc, #76]	; (8009fa4 <_dtoa_r+0xbd4>)
 8009f56:	f7ff baa7 	b.w	80094a8 <_dtoa_r+0xd8>
 8009f5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f47f aa80 	bne.w	8009462 <_dtoa_r+0x92>
 8009f62:	4b11      	ldr	r3, [pc, #68]	; (8009fa8 <_dtoa_r+0xbd8>)
 8009f64:	f7ff baa0 	b.w	80094a8 <_dtoa_r+0xd8>
 8009f68:	f1bb 0f00 	cmp.w	fp, #0
 8009f6c:	dc03      	bgt.n	8009f76 <_dtoa_r+0xba6>
 8009f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	f73f aecc 	bgt.w	8009d0e <_dtoa_r+0x93e>
 8009f76:	9f08      	ldr	r7, [sp, #32]
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f7ff f998 	bl	80092b0 <quorem>
 8009f80:	9a08      	ldr	r2, [sp, #32]
 8009f82:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009f86:	f807 3b01 	strb.w	r3, [r7], #1
 8009f8a:	1aba      	subs	r2, r7, r2
 8009f8c:	4593      	cmp	fp, r2
 8009f8e:	ddb9      	ble.n	8009f04 <_dtoa_r+0xb34>
 8009f90:	4651      	mov	r1, sl
 8009f92:	2300      	movs	r3, #0
 8009f94:	220a      	movs	r2, #10
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f892 	bl	800a0c0 <__multadd>
 8009f9c:	4682      	mov	sl, r0
 8009f9e:	e7eb      	b.n	8009f78 <_dtoa_r+0xba8>
 8009fa0:	0800c121 	.word	0x0800c121
 8009fa4:	0800bf54 	.word	0x0800bf54
 8009fa8:	0800c09e 	.word	0x0800c09e

08009fac <_localeconv_r>:
 8009fac:	4800      	ldr	r0, [pc, #0]	; (8009fb0 <_localeconv_r+0x4>)
 8009fae:	4770      	bx	lr
 8009fb0:	20000160 	.word	0x20000160

08009fb4 <malloc>:
 8009fb4:	4b02      	ldr	r3, [pc, #8]	; (8009fc0 <malloc+0xc>)
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	f000 bbfb 	b.w	800a7b4 <_malloc_r>
 8009fbe:	bf00      	nop
 8009fc0:	2000000c 	.word	0x2000000c

08009fc4 <memchr>:
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	b2c9      	uxtb	r1, r1
 8009fca:	4402      	add	r2, r0
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	d101      	bne.n	8009fd6 <memchr+0x12>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e003      	b.n	8009fde <memchr+0x1a>
 8009fd6:	7804      	ldrb	r4, [r0, #0]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	428c      	cmp	r4, r1
 8009fdc:	d1f6      	bne.n	8009fcc <memchr+0x8>
 8009fde:	bd10      	pop	{r4, pc}

08009fe0 <memcpy>:
 8009fe0:	440a      	add	r2, r1
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe8:	d100      	bne.n	8009fec <memcpy+0xc>
 8009fea:	4770      	bx	lr
 8009fec:	b510      	push	{r4, lr}
 8009fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ff8:	d1f9      	bne.n	8009fee <memcpy+0xe>
 8009ffa:	bd10      	pop	{r4, pc}

08009ffc <_Balloc>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a000:	4604      	mov	r4, r0
 800a002:	460d      	mov	r5, r1
 800a004:	b976      	cbnz	r6, 800a024 <_Balloc+0x28>
 800a006:	2010      	movs	r0, #16
 800a008:	f7ff ffd4 	bl	8009fb4 <malloc>
 800a00c:	4602      	mov	r2, r0
 800a00e:	6260      	str	r0, [r4, #36]	; 0x24
 800a010:	b920      	cbnz	r0, 800a01c <_Balloc+0x20>
 800a012:	2166      	movs	r1, #102	; 0x66
 800a014:	4b17      	ldr	r3, [pc, #92]	; (800a074 <_Balloc+0x78>)
 800a016:	4818      	ldr	r0, [pc, #96]	; (800a078 <_Balloc+0x7c>)
 800a018:	f000 fd92 	bl	800ab40 <__assert_func>
 800a01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a020:	6006      	str	r6, [r0, #0]
 800a022:	60c6      	str	r6, [r0, #12]
 800a024:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a026:	68f3      	ldr	r3, [r6, #12]
 800a028:	b183      	cbz	r3, 800a04c <_Balloc+0x50>
 800a02a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a032:	b9b8      	cbnz	r0, 800a064 <_Balloc+0x68>
 800a034:	2101      	movs	r1, #1
 800a036:	fa01 f605 	lsl.w	r6, r1, r5
 800a03a:	1d72      	adds	r2, r6, #5
 800a03c:	4620      	mov	r0, r4
 800a03e:	0092      	lsls	r2, r2, #2
 800a040:	f000 fb5e 	bl	800a700 <_calloc_r>
 800a044:	b160      	cbz	r0, 800a060 <_Balloc+0x64>
 800a046:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a04a:	e00e      	b.n	800a06a <_Balloc+0x6e>
 800a04c:	2221      	movs	r2, #33	; 0x21
 800a04e:	2104      	movs	r1, #4
 800a050:	4620      	mov	r0, r4
 800a052:	f000 fb55 	bl	800a700 <_calloc_r>
 800a056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a058:	60f0      	str	r0, [r6, #12]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e4      	bne.n	800a02a <_Balloc+0x2e>
 800a060:	2000      	movs	r0, #0
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	6802      	ldr	r2, [r0, #0]
 800a066:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a06a:	2300      	movs	r3, #0
 800a06c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a070:	e7f7      	b.n	800a062 <_Balloc+0x66>
 800a072:	bf00      	nop
 800a074:	0800c0ab 	.word	0x0800c0ab
 800a078:	0800c132 	.word	0x0800c132

0800a07c <_Bfree>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a080:	4605      	mov	r5, r0
 800a082:	460c      	mov	r4, r1
 800a084:	b976      	cbnz	r6, 800a0a4 <_Bfree+0x28>
 800a086:	2010      	movs	r0, #16
 800a088:	f7ff ff94 	bl	8009fb4 <malloc>
 800a08c:	4602      	mov	r2, r0
 800a08e:	6268      	str	r0, [r5, #36]	; 0x24
 800a090:	b920      	cbnz	r0, 800a09c <_Bfree+0x20>
 800a092:	218a      	movs	r1, #138	; 0x8a
 800a094:	4b08      	ldr	r3, [pc, #32]	; (800a0b8 <_Bfree+0x3c>)
 800a096:	4809      	ldr	r0, [pc, #36]	; (800a0bc <_Bfree+0x40>)
 800a098:	f000 fd52 	bl	800ab40 <__assert_func>
 800a09c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0a0:	6006      	str	r6, [r0, #0]
 800a0a2:	60c6      	str	r6, [r0, #12]
 800a0a4:	b13c      	cbz	r4, 800a0b6 <_Bfree+0x3a>
 800a0a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0a8:	6862      	ldr	r2, [r4, #4]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0b0:	6021      	str	r1, [r4, #0]
 800a0b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0b6:	bd70      	pop	{r4, r5, r6, pc}
 800a0b8:	0800c0ab 	.word	0x0800c0ab
 800a0bc:	0800c132 	.word	0x0800c132

0800a0c0 <__multadd>:
 800a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c4:	4698      	mov	r8, r3
 800a0c6:	460c      	mov	r4, r1
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	690e      	ldr	r6, [r1, #16]
 800a0cc:	4607      	mov	r7, r0
 800a0ce:	f101 0014 	add.w	r0, r1, #20
 800a0d2:	6805      	ldr	r5, [r0, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	b2a9      	uxth	r1, r5
 800a0d8:	fb02 8101 	mla	r1, r2, r1, r8
 800a0dc:	0c2d      	lsrs	r5, r5, #16
 800a0de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a0e2:	fb02 c505 	mla	r5, r2, r5, ip
 800a0e6:	b289      	uxth	r1, r1
 800a0e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0ec:	429e      	cmp	r6, r3
 800a0ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a0f2:	f840 1b04 	str.w	r1, [r0], #4
 800a0f6:	dcec      	bgt.n	800a0d2 <__multadd+0x12>
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	d022      	beq.n	800a144 <__multadd+0x84>
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	42b3      	cmp	r3, r6
 800a102:	dc19      	bgt.n	800a138 <__multadd+0x78>
 800a104:	6861      	ldr	r1, [r4, #4]
 800a106:	4638      	mov	r0, r7
 800a108:	3101      	adds	r1, #1
 800a10a:	f7ff ff77 	bl	8009ffc <_Balloc>
 800a10e:	4605      	mov	r5, r0
 800a110:	b928      	cbnz	r0, 800a11e <__multadd+0x5e>
 800a112:	4602      	mov	r2, r0
 800a114:	21b5      	movs	r1, #181	; 0xb5
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <__multadd+0x8c>)
 800a118:	480d      	ldr	r0, [pc, #52]	; (800a150 <__multadd+0x90>)
 800a11a:	f000 fd11 	bl	800ab40 <__assert_func>
 800a11e:	6922      	ldr	r2, [r4, #16]
 800a120:	f104 010c 	add.w	r1, r4, #12
 800a124:	3202      	adds	r2, #2
 800a126:	0092      	lsls	r2, r2, #2
 800a128:	300c      	adds	r0, #12
 800a12a:	f7ff ff59 	bl	8009fe0 <memcpy>
 800a12e:	4621      	mov	r1, r4
 800a130:	4638      	mov	r0, r7
 800a132:	f7ff ffa3 	bl	800a07c <_Bfree>
 800a136:	462c      	mov	r4, r5
 800a138:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a13c:	3601      	adds	r6, #1
 800a13e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a142:	6126      	str	r6, [r4, #16]
 800a144:	4620      	mov	r0, r4
 800a146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a14a:	bf00      	nop
 800a14c:	0800c121 	.word	0x0800c121
 800a150:	0800c132 	.word	0x0800c132

0800a154 <__hi0bits>:
 800a154:	0c02      	lsrs	r2, r0, #16
 800a156:	0412      	lsls	r2, r2, #16
 800a158:	4603      	mov	r3, r0
 800a15a:	b9ca      	cbnz	r2, 800a190 <__hi0bits+0x3c>
 800a15c:	0403      	lsls	r3, r0, #16
 800a15e:	2010      	movs	r0, #16
 800a160:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a164:	bf04      	itt	eq
 800a166:	021b      	lsleq	r3, r3, #8
 800a168:	3008      	addeq	r0, #8
 800a16a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a16e:	bf04      	itt	eq
 800a170:	011b      	lsleq	r3, r3, #4
 800a172:	3004      	addeq	r0, #4
 800a174:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a178:	bf04      	itt	eq
 800a17a:	009b      	lsleq	r3, r3, #2
 800a17c:	3002      	addeq	r0, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	db05      	blt.n	800a18e <__hi0bits+0x3a>
 800a182:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a186:	f100 0001 	add.w	r0, r0, #1
 800a18a:	bf08      	it	eq
 800a18c:	2020      	moveq	r0, #32
 800a18e:	4770      	bx	lr
 800a190:	2000      	movs	r0, #0
 800a192:	e7e5      	b.n	800a160 <__hi0bits+0xc>

0800a194 <__lo0bits>:
 800a194:	6803      	ldr	r3, [r0, #0]
 800a196:	4602      	mov	r2, r0
 800a198:	f013 0007 	ands.w	r0, r3, #7
 800a19c:	d00b      	beq.n	800a1b6 <__lo0bits+0x22>
 800a19e:	07d9      	lsls	r1, r3, #31
 800a1a0:	d422      	bmi.n	800a1e8 <__lo0bits+0x54>
 800a1a2:	0798      	lsls	r0, r3, #30
 800a1a4:	bf49      	itett	mi
 800a1a6:	085b      	lsrmi	r3, r3, #1
 800a1a8:	089b      	lsrpl	r3, r3, #2
 800a1aa:	2001      	movmi	r0, #1
 800a1ac:	6013      	strmi	r3, [r2, #0]
 800a1ae:	bf5c      	itt	pl
 800a1b0:	2002      	movpl	r0, #2
 800a1b2:	6013      	strpl	r3, [r2, #0]
 800a1b4:	4770      	bx	lr
 800a1b6:	b299      	uxth	r1, r3
 800a1b8:	b909      	cbnz	r1, 800a1be <__lo0bits+0x2a>
 800a1ba:	2010      	movs	r0, #16
 800a1bc:	0c1b      	lsrs	r3, r3, #16
 800a1be:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1c2:	bf04      	itt	eq
 800a1c4:	0a1b      	lsreq	r3, r3, #8
 800a1c6:	3008      	addeq	r0, #8
 800a1c8:	0719      	lsls	r1, r3, #28
 800a1ca:	bf04      	itt	eq
 800a1cc:	091b      	lsreq	r3, r3, #4
 800a1ce:	3004      	addeq	r0, #4
 800a1d0:	0799      	lsls	r1, r3, #30
 800a1d2:	bf04      	itt	eq
 800a1d4:	089b      	lsreq	r3, r3, #2
 800a1d6:	3002      	addeq	r0, #2
 800a1d8:	07d9      	lsls	r1, r3, #31
 800a1da:	d403      	bmi.n	800a1e4 <__lo0bits+0x50>
 800a1dc:	085b      	lsrs	r3, r3, #1
 800a1de:	f100 0001 	add.w	r0, r0, #1
 800a1e2:	d003      	beq.n	800a1ec <__lo0bits+0x58>
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	4770      	bx	lr
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	4770      	bx	lr
 800a1ec:	2020      	movs	r0, #32
 800a1ee:	4770      	bx	lr

0800a1f0 <__i2b>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	2101      	movs	r1, #1
 800a1f6:	f7ff ff01 	bl	8009ffc <_Balloc>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	b928      	cbnz	r0, 800a20a <__i2b+0x1a>
 800a1fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a202:	4b04      	ldr	r3, [pc, #16]	; (800a214 <__i2b+0x24>)
 800a204:	4804      	ldr	r0, [pc, #16]	; (800a218 <__i2b+0x28>)
 800a206:	f000 fc9b 	bl	800ab40 <__assert_func>
 800a20a:	2301      	movs	r3, #1
 800a20c:	6144      	str	r4, [r0, #20]
 800a20e:	6103      	str	r3, [r0, #16]
 800a210:	bd10      	pop	{r4, pc}
 800a212:	bf00      	nop
 800a214:	0800c121 	.word	0x0800c121
 800a218:	0800c132 	.word	0x0800c132

0800a21c <__multiply>:
 800a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a220:	4614      	mov	r4, r2
 800a222:	690a      	ldr	r2, [r1, #16]
 800a224:	6923      	ldr	r3, [r4, #16]
 800a226:	460d      	mov	r5, r1
 800a228:	429a      	cmp	r2, r3
 800a22a:	bfbe      	ittt	lt
 800a22c:	460b      	movlt	r3, r1
 800a22e:	4625      	movlt	r5, r4
 800a230:	461c      	movlt	r4, r3
 800a232:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a236:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a23a:	68ab      	ldr	r3, [r5, #8]
 800a23c:	6869      	ldr	r1, [r5, #4]
 800a23e:	eb0a 0709 	add.w	r7, sl, r9
 800a242:	42bb      	cmp	r3, r7
 800a244:	b085      	sub	sp, #20
 800a246:	bfb8      	it	lt
 800a248:	3101      	addlt	r1, #1
 800a24a:	f7ff fed7 	bl	8009ffc <_Balloc>
 800a24e:	b930      	cbnz	r0, 800a25e <__multiply+0x42>
 800a250:	4602      	mov	r2, r0
 800a252:	f240 115d 	movw	r1, #349	; 0x15d
 800a256:	4b41      	ldr	r3, [pc, #260]	; (800a35c <__multiply+0x140>)
 800a258:	4841      	ldr	r0, [pc, #260]	; (800a360 <__multiply+0x144>)
 800a25a:	f000 fc71 	bl	800ab40 <__assert_func>
 800a25e:	f100 0614 	add.w	r6, r0, #20
 800a262:	4633      	mov	r3, r6
 800a264:	2200      	movs	r2, #0
 800a266:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a26a:	4543      	cmp	r3, r8
 800a26c:	d31e      	bcc.n	800a2ac <__multiply+0x90>
 800a26e:	f105 0c14 	add.w	ip, r5, #20
 800a272:	f104 0314 	add.w	r3, r4, #20
 800a276:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a27a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a27e:	9202      	str	r2, [sp, #8]
 800a280:	ebac 0205 	sub.w	r2, ip, r5
 800a284:	3a15      	subs	r2, #21
 800a286:	f022 0203 	bic.w	r2, r2, #3
 800a28a:	3204      	adds	r2, #4
 800a28c:	f105 0115 	add.w	r1, r5, #21
 800a290:	458c      	cmp	ip, r1
 800a292:	bf38      	it	cc
 800a294:	2204      	movcc	r2, #4
 800a296:	9201      	str	r2, [sp, #4]
 800a298:	9a02      	ldr	r2, [sp, #8]
 800a29a:	9303      	str	r3, [sp, #12]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d808      	bhi.n	800a2b2 <__multiply+0x96>
 800a2a0:	2f00      	cmp	r7, #0
 800a2a2:	dc55      	bgt.n	800a350 <__multiply+0x134>
 800a2a4:	6107      	str	r7, [r0, #16]
 800a2a6:	b005      	add	sp, #20
 800a2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ac:	f843 2b04 	str.w	r2, [r3], #4
 800a2b0:	e7db      	b.n	800a26a <__multiply+0x4e>
 800a2b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a2b6:	f1ba 0f00 	cmp.w	sl, #0
 800a2ba:	d020      	beq.n	800a2fe <__multiply+0xe2>
 800a2bc:	46b1      	mov	r9, r6
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f105 0e14 	add.w	lr, r5, #20
 800a2c4:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a2c8:	f8d9 b000 	ldr.w	fp, [r9]
 800a2cc:	b2a1      	uxth	r1, r4
 800a2ce:	fa1f fb8b 	uxth.w	fp, fp
 800a2d2:	fb0a b101 	mla	r1, sl, r1, fp
 800a2d6:	4411      	add	r1, r2
 800a2d8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2dc:	0c24      	lsrs	r4, r4, #16
 800a2de:	0c12      	lsrs	r2, r2, #16
 800a2e0:	fb0a 2404 	mla	r4, sl, r4, r2
 800a2e4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a2e8:	b289      	uxth	r1, r1
 800a2ea:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a2ee:	45f4      	cmp	ip, lr
 800a2f0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a2f4:	f849 1b04 	str.w	r1, [r9], #4
 800a2f8:	d8e4      	bhi.n	800a2c4 <__multiply+0xa8>
 800a2fa:	9901      	ldr	r1, [sp, #4]
 800a2fc:	5072      	str	r2, [r6, r1]
 800a2fe:	9a03      	ldr	r2, [sp, #12]
 800a300:	3304      	adds	r3, #4
 800a302:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a306:	f1b9 0f00 	cmp.w	r9, #0
 800a30a:	d01f      	beq.n	800a34c <__multiply+0x130>
 800a30c:	46b6      	mov	lr, r6
 800a30e:	f04f 0a00 	mov.w	sl, #0
 800a312:	6834      	ldr	r4, [r6, #0]
 800a314:	f105 0114 	add.w	r1, r5, #20
 800a318:	880a      	ldrh	r2, [r1, #0]
 800a31a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a31e:	b2a4      	uxth	r4, r4
 800a320:	fb09 b202 	mla	r2, r9, r2, fp
 800a324:	4492      	add	sl, r2
 800a326:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a32a:	f84e 4b04 	str.w	r4, [lr], #4
 800a32e:	f851 4b04 	ldr.w	r4, [r1], #4
 800a332:	f8be 2000 	ldrh.w	r2, [lr]
 800a336:	0c24      	lsrs	r4, r4, #16
 800a338:	fb09 2404 	mla	r4, r9, r4, r2
 800a33c:	458c      	cmp	ip, r1
 800a33e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a342:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a346:	d8e7      	bhi.n	800a318 <__multiply+0xfc>
 800a348:	9a01      	ldr	r2, [sp, #4]
 800a34a:	50b4      	str	r4, [r6, r2]
 800a34c:	3604      	adds	r6, #4
 800a34e:	e7a3      	b.n	800a298 <__multiply+0x7c>
 800a350:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a354:	2b00      	cmp	r3, #0
 800a356:	d1a5      	bne.n	800a2a4 <__multiply+0x88>
 800a358:	3f01      	subs	r7, #1
 800a35a:	e7a1      	b.n	800a2a0 <__multiply+0x84>
 800a35c:	0800c121 	.word	0x0800c121
 800a360:	0800c132 	.word	0x0800c132

0800a364 <__pow5mult>:
 800a364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a368:	4615      	mov	r5, r2
 800a36a:	f012 0203 	ands.w	r2, r2, #3
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	d007      	beq.n	800a384 <__pow5mult+0x20>
 800a374:	4c25      	ldr	r4, [pc, #148]	; (800a40c <__pow5mult+0xa8>)
 800a376:	3a01      	subs	r2, #1
 800a378:	2300      	movs	r3, #0
 800a37a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a37e:	f7ff fe9f 	bl	800a0c0 <__multadd>
 800a382:	4607      	mov	r7, r0
 800a384:	10ad      	asrs	r5, r5, #2
 800a386:	d03d      	beq.n	800a404 <__pow5mult+0xa0>
 800a388:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a38a:	b97c      	cbnz	r4, 800a3ac <__pow5mult+0x48>
 800a38c:	2010      	movs	r0, #16
 800a38e:	f7ff fe11 	bl	8009fb4 <malloc>
 800a392:	4602      	mov	r2, r0
 800a394:	6270      	str	r0, [r6, #36]	; 0x24
 800a396:	b928      	cbnz	r0, 800a3a4 <__pow5mult+0x40>
 800a398:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a39c:	4b1c      	ldr	r3, [pc, #112]	; (800a410 <__pow5mult+0xac>)
 800a39e:	481d      	ldr	r0, [pc, #116]	; (800a414 <__pow5mult+0xb0>)
 800a3a0:	f000 fbce 	bl	800ab40 <__assert_func>
 800a3a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a3a8:	6004      	str	r4, [r0, #0]
 800a3aa:	60c4      	str	r4, [r0, #12]
 800a3ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a3b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a3b4:	b94c      	cbnz	r4, 800a3ca <__pow5mult+0x66>
 800a3b6:	f240 2171 	movw	r1, #625	; 0x271
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	f7ff ff18 	bl	800a1f0 <__i2b>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3c8:	6003      	str	r3, [r0, #0]
 800a3ca:	f04f 0900 	mov.w	r9, #0
 800a3ce:	07eb      	lsls	r3, r5, #31
 800a3d0:	d50a      	bpl.n	800a3e8 <__pow5mult+0x84>
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	4622      	mov	r2, r4
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f7ff ff20 	bl	800a21c <__multiply>
 800a3dc:	4680      	mov	r8, r0
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff fe4b 	bl	800a07c <_Bfree>
 800a3e6:	4647      	mov	r7, r8
 800a3e8:	106d      	asrs	r5, r5, #1
 800a3ea:	d00b      	beq.n	800a404 <__pow5mult+0xa0>
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	b938      	cbnz	r0, 800a400 <__pow5mult+0x9c>
 800a3f0:	4622      	mov	r2, r4
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4630      	mov	r0, r6
 800a3f6:	f7ff ff11 	bl	800a21c <__multiply>
 800a3fa:	6020      	str	r0, [r4, #0]
 800a3fc:	f8c0 9000 	str.w	r9, [r0]
 800a400:	4604      	mov	r4, r0
 800a402:	e7e4      	b.n	800a3ce <__pow5mult+0x6a>
 800a404:	4638      	mov	r0, r7
 800a406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a40a:	bf00      	nop
 800a40c:	0800c288 	.word	0x0800c288
 800a410:	0800c0ab 	.word	0x0800c0ab
 800a414:	0800c132 	.word	0x0800c132

0800a418 <__lshift>:
 800a418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	460c      	mov	r4, r1
 800a41e:	4607      	mov	r7, r0
 800a420:	4691      	mov	r9, r2
 800a422:	6923      	ldr	r3, [r4, #16]
 800a424:	6849      	ldr	r1, [r1, #4]
 800a426:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a42a:	68a3      	ldr	r3, [r4, #8]
 800a42c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a430:	f108 0601 	add.w	r6, r8, #1
 800a434:	42b3      	cmp	r3, r6
 800a436:	db0b      	blt.n	800a450 <__lshift+0x38>
 800a438:	4638      	mov	r0, r7
 800a43a:	f7ff fddf 	bl	8009ffc <_Balloc>
 800a43e:	4605      	mov	r5, r0
 800a440:	b948      	cbnz	r0, 800a456 <__lshift+0x3e>
 800a442:	4602      	mov	r2, r0
 800a444:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a448:	4b27      	ldr	r3, [pc, #156]	; (800a4e8 <__lshift+0xd0>)
 800a44a:	4828      	ldr	r0, [pc, #160]	; (800a4ec <__lshift+0xd4>)
 800a44c:	f000 fb78 	bl	800ab40 <__assert_func>
 800a450:	3101      	adds	r1, #1
 800a452:	005b      	lsls	r3, r3, #1
 800a454:	e7ee      	b.n	800a434 <__lshift+0x1c>
 800a456:	2300      	movs	r3, #0
 800a458:	f100 0114 	add.w	r1, r0, #20
 800a45c:	f100 0210 	add.w	r2, r0, #16
 800a460:	4618      	mov	r0, r3
 800a462:	4553      	cmp	r3, sl
 800a464:	db33      	blt.n	800a4ce <__lshift+0xb6>
 800a466:	6920      	ldr	r0, [r4, #16]
 800a468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a46c:	f104 0314 	add.w	r3, r4, #20
 800a470:	f019 091f 	ands.w	r9, r9, #31
 800a474:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a478:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a47c:	d02b      	beq.n	800a4d6 <__lshift+0xbe>
 800a47e:	468a      	mov	sl, r1
 800a480:	2200      	movs	r2, #0
 800a482:	f1c9 0e20 	rsb	lr, r9, #32
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	fa00 f009 	lsl.w	r0, r0, r9
 800a48c:	4302      	orrs	r2, r0
 800a48e:	f84a 2b04 	str.w	r2, [sl], #4
 800a492:	f853 2b04 	ldr.w	r2, [r3], #4
 800a496:	459c      	cmp	ip, r3
 800a498:	fa22 f20e 	lsr.w	r2, r2, lr
 800a49c:	d8f3      	bhi.n	800a486 <__lshift+0x6e>
 800a49e:	ebac 0304 	sub.w	r3, ip, r4
 800a4a2:	3b15      	subs	r3, #21
 800a4a4:	f023 0303 	bic.w	r3, r3, #3
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	f104 0015 	add.w	r0, r4, #21
 800a4ae:	4584      	cmp	ip, r0
 800a4b0:	bf38      	it	cc
 800a4b2:	2304      	movcc	r3, #4
 800a4b4:	50ca      	str	r2, [r1, r3]
 800a4b6:	b10a      	cbz	r2, 800a4bc <__lshift+0xa4>
 800a4b8:	f108 0602 	add.w	r6, r8, #2
 800a4bc:	3e01      	subs	r6, #1
 800a4be:	4638      	mov	r0, r7
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	612e      	str	r6, [r5, #16]
 800a4c4:	f7ff fdda 	bl	800a07c <_Bfree>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	e7c5      	b.n	800a462 <__lshift+0x4a>
 800a4d6:	3904      	subs	r1, #4
 800a4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4dc:	459c      	cmp	ip, r3
 800a4de:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4e2:	d8f9      	bhi.n	800a4d8 <__lshift+0xc0>
 800a4e4:	e7ea      	b.n	800a4bc <__lshift+0xa4>
 800a4e6:	bf00      	nop
 800a4e8:	0800c121 	.word	0x0800c121
 800a4ec:	0800c132 	.word	0x0800c132

0800a4f0 <__mcmp>:
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	690a      	ldr	r2, [r1, #16]
 800a4f4:	6900      	ldr	r0, [r0, #16]
 800a4f6:	b530      	push	{r4, r5, lr}
 800a4f8:	1a80      	subs	r0, r0, r2
 800a4fa:	d10d      	bne.n	800a518 <__mcmp+0x28>
 800a4fc:	3314      	adds	r3, #20
 800a4fe:	3114      	adds	r1, #20
 800a500:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a504:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a508:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a50c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a510:	4295      	cmp	r5, r2
 800a512:	d002      	beq.n	800a51a <__mcmp+0x2a>
 800a514:	d304      	bcc.n	800a520 <__mcmp+0x30>
 800a516:	2001      	movs	r0, #1
 800a518:	bd30      	pop	{r4, r5, pc}
 800a51a:	42a3      	cmp	r3, r4
 800a51c:	d3f4      	bcc.n	800a508 <__mcmp+0x18>
 800a51e:	e7fb      	b.n	800a518 <__mcmp+0x28>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e7f8      	b.n	800a518 <__mcmp+0x28>
	...

0800a528 <__mdiff>:
 800a528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	4606      	mov	r6, r0
 800a530:	4611      	mov	r1, r2
 800a532:	4620      	mov	r0, r4
 800a534:	4692      	mov	sl, r2
 800a536:	f7ff ffdb 	bl	800a4f0 <__mcmp>
 800a53a:	1e05      	subs	r5, r0, #0
 800a53c:	d111      	bne.n	800a562 <__mdiff+0x3a>
 800a53e:	4629      	mov	r1, r5
 800a540:	4630      	mov	r0, r6
 800a542:	f7ff fd5b 	bl	8009ffc <_Balloc>
 800a546:	4602      	mov	r2, r0
 800a548:	b928      	cbnz	r0, 800a556 <__mdiff+0x2e>
 800a54a:	f240 2132 	movw	r1, #562	; 0x232
 800a54e:	4b3c      	ldr	r3, [pc, #240]	; (800a640 <__mdiff+0x118>)
 800a550:	483c      	ldr	r0, [pc, #240]	; (800a644 <__mdiff+0x11c>)
 800a552:	f000 faf5 	bl	800ab40 <__assert_func>
 800a556:	2301      	movs	r3, #1
 800a558:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a55c:	4610      	mov	r0, r2
 800a55e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a562:	bfa4      	itt	ge
 800a564:	4653      	movge	r3, sl
 800a566:	46a2      	movge	sl, r4
 800a568:	4630      	mov	r0, r6
 800a56a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800a56e:	bfa6      	itte	ge
 800a570:	461c      	movge	r4, r3
 800a572:	2500      	movge	r5, #0
 800a574:	2501      	movlt	r5, #1
 800a576:	f7ff fd41 	bl	8009ffc <_Balloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	b918      	cbnz	r0, 800a586 <__mdiff+0x5e>
 800a57e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a582:	4b2f      	ldr	r3, [pc, #188]	; (800a640 <__mdiff+0x118>)
 800a584:	e7e4      	b.n	800a550 <__mdiff+0x28>
 800a586:	f100 0814 	add.w	r8, r0, #20
 800a58a:	f8da 7010 	ldr.w	r7, [sl, #16]
 800a58e:	60c5      	str	r5, [r0, #12]
 800a590:	f04f 0c00 	mov.w	ip, #0
 800a594:	f10a 0514 	add.w	r5, sl, #20
 800a598:	f10a 0010 	add.w	r0, sl, #16
 800a59c:	46c2      	mov	sl, r8
 800a59e:	6926      	ldr	r6, [r4, #16]
 800a5a0:	f104 0914 	add.w	r9, r4, #20
 800a5a4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800a5a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a5ac:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800a5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a5b4:	fa1f f18b 	uxth.w	r1, fp
 800a5b8:	4461      	add	r1, ip
 800a5ba:	fa1f fc83 	uxth.w	ip, r3
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	eba1 010c 	sub.w	r1, r1, ip
 800a5c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5c8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a5cc:	b289      	uxth	r1, r1
 800a5ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a5d2:	454e      	cmp	r6, r9
 800a5d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a5d8:	f84a 3b04 	str.w	r3, [sl], #4
 800a5dc:	d8e6      	bhi.n	800a5ac <__mdiff+0x84>
 800a5de:	1b33      	subs	r3, r6, r4
 800a5e0:	3b15      	subs	r3, #21
 800a5e2:	f023 0303 	bic.w	r3, r3, #3
 800a5e6:	3415      	adds	r4, #21
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	42a6      	cmp	r6, r4
 800a5ec:	bf38      	it	cc
 800a5ee:	2304      	movcc	r3, #4
 800a5f0:	441d      	add	r5, r3
 800a5f2:	4443      	add	r3, r8
 800a5f4:	461e      	mov	r6, r3
 800a5f6:	462c      	mov	r4, r5
 800a5f8:	4574      	cmp	r4, lr
 800a5fa:	d30e      	bcc.n	800a61a <__mdiff+0xf2>
 800a5fc:	f10e 0103 	add.w	r1, lr, #3
 800a600:	1b49      	subs	r1, r1, r5
 800a602:	f021 0103 	bic.w	r1, r1, #3
 800a606:	3d03      	subs	r5, #3
 800a608:	45ae      	cmp	lr, r5
 800a60a:	bf38      	it	cc
 800a60c:	2100      	movcc	r1, #0
 800a60e:	4419      	add	r1, r3
 800a610:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a614:	b18b      	cbz	r3, 800a63a <__mdiff+0x112>
 800a616:	6117      	str	r7, [r2, #16]
 800a618:	e7a0      	b.n	800a55c <__mdiff+0x34>
 800a61a:	f854 8b04 	ldr.w	r8, [r4], #4
 800a61e:	fa1f f188 	uxth.w	r1, r8
 800a622:	4461      	add	r1, ip
 800a624:	1408      	asrs	r0, r1, #16
 800a626:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800a62a:	b289      	uxth	r1, r1
 800a62c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a630:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a634:	f846 1b04 	str.w	r1, [r6], #4
 800a638:	e7de      	b.n	800a5f8 <__mdiff+0xd0>
 800a63a:	3f01      	subs	r7, #1
 800a63c:	e7e8      	b.n	800a610 <__mdiff+0xe8>
 800a63e:	bf00      	nop
 800a640:	0800c121 	.word	0x0800c121
 800a644:	0800c132 	.word	0x0800c132

0800a648 <__d2b>:
 800a648:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a64c:	2101      	movs	r1, #1
 800a64e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a652:	4690      	mov	r8, r2
 800a654:	461d      	mov	r5, r3
 800a656:	f7ff fcd1 	bl	8009ffc <_Balloc>
 800a65a:	4604      	mov	r4, r0
 800a65c:	b930      	cbnz	r0, 800a66c <__d2b+0x24>
 800a65e:	4602      	mov	r2, r0
 800a660:	f240 310a 	movw	r1, #778	; 0x30a
 800a664:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <__d2b+0xb0>)
 800a666:	4825      	ldr	r0, [pc, #148]	; (800a6fc <__d2b+0xb4>)
 800a668:	f000 fa6a 	bl	800ab40 <__assert_func>
 800a66c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a670:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a674:	bb2d      	cbnz	r5, 800a6c2 <__d2b+0x7a>
 800a676:	9301      	str	r3, [sp, #4]
 800a678:	f1b8 0300 	subs.w	r3, r8, #0
 800a67c:	d026      	beq.n	800a6cc <__d2b+0x84>
 800a67e:	4668      	mov	r0, sp
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	f7ff fd87 	bl	800a194 <__lo0bits>
 800a686:	9900      	ldr	r1, [sp, #0]
 800a688:	b1f0      	cbz	r0, 800a6c8 <__d2b+0x80>
 800a68a:	9a01      	ldr	r2, [sp, #4]
 800a68c:	f1c0 0320 	rsb	r3, r0, #32
 800a690:	fa02 f303 	lsl.w	r3, r2, r3
 800a694:	430b      	orrs	r3, r1
 800a696:	40c2      	lsrs	r2, r0
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9201      	str	r2, [sp, #4]
 800a69c:	9b01      	ldr	r3, [sp, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	bf14      	ite	ne
 800a6a2:	2102      	movne	r1, #2
 800a6a4:	2101      	moveq	r1, #1
 800a6a6:	61a3      	str	r3, [r4, #24]
 800a6a8:	6121      	str	r1, [r4, #16]
 800a6aa:	b1c5      	cbz	r5, 800a6de <__d2b+0x96>
 800a6ac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6b0:	4405      	add	r5, r0
 800a6b2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6b6:	603d      	str	r5, [r7, #0]
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	b002      	add	sp, #8
 800a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6c6:	e7d6      	b.n	800a676 <__d2b+0x2e>
 800a6c8:	6161      	str	r1, [r4, #20]
 800a6ca:	e7e7      	b.n	800a69c <__d2b+0x54>
 800a6cc:	a801      	add	r0, sp, #4
 800a6ce:	f7ff fd61 	bl	800a194 <__lo0bits>
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	6121      	str	r1, [r4, #16]
 800a6d8:	6163      	str	r3, [r4, #20]
 800a6da:	3020      	adds	r0, #32
 800a6dc:	e7e5      	b.n	800a6aa <__d2b+0x62>
 800a6de:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a6e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6e6:	6038      	str	r0, [r7, #0]
 800a6e8:	6918      	ldr	r0, [r3, #16]
 800a6ea:	f7ff fd33 	bl	800a154 <__hi0bits>
 800a6ee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a6f2:	6031      	str	r1, [r6, #0]
 800a6f4:	e7e1      	b.n	800a6ba <__d2b+0x72>
 800a6f6:	bf00      	nop
 800a6f8:	0800c121 	.word	0x0800c121
 800a6fc:	0800c132 	.word	0x0800c132

0800a700 <_calloc_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	fb02 f501 	mul.w	r5, r2, r1
 800a706:	4629      	mov	r1, r5
 800a708:	f000 f854 	bl	800a7b4 <_malloc_r>
 800a70c:	4604      	mov	r4, r0
 800a70e:	b118      	cbz	r0, 800a718 <_calloc_r+0x18>
 800a710:	462a      	mov	r2, r5
 800a712:	2100      	movs	r1, #0
 800a714:	f7fe f872 	bl	80087fc <memset>
 800a718:	4620      	mov	r0, r4
 800a71a:	bd38      	pop	{r3, r4, r5, pc}

0800a71c <_free_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4605      	mov	r5, r0
 800a720:	2900      	cmp	r1, #0
 800a722:	d043      	beq.n	800a7ac <_free_r+0x90>
 800a724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a728:	1f0c      	subs	r4, r1, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfb8      	it	lt
 800a72e:	18e4      	addlt	r4, r4, r3
 800a730:	f000 fa62 	bl	800abf8 <__malloc_lock>
 800a734:	4a1e      	ldr	r2, [pc, #120]	; (800a7b0 <_free_r+0x94>)
 800a736:	6813      	ldr	r3, [r2, #0]
 800a738:	4610      	mov	r0, r2
 800a73a:	b933      	cbnz	r3, 800a74a <_free_r+0x2e>
 800a73c:	6063      	str	r3, [r4, #4]
 800a73e:	6014      	str	r4, [r2, #0]
 800a740:	4628      	mov	r0, r5
 800a742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a746:	f000 ba5d 	b.w	800ac04 <__malloc_unlock>
 800a74a:	42a3      	cmp	r3, r4
 800a74c:	d90a      	bls.n	800a764 <_free_r+0x48>
 800a74e:	6821      	ldr	r1, [r4, #0]
 800a750:	1862      	adds	r2, r4, r1
 800a752:	4293      	cmp	r3, r2
 800a754:	bf01      	itttt	eq
 800a756:	681a      	ldreq	r2, [r3, #0]
 800a758:	685b      	ldreq	r3, [r3, #4]
 800a75a:	1852      	addeq	r2, r2, r1
 800a75c:	6022      	streq	r2, [r4, #0]
 800a75e:	6063      	str	r3, [r4, #4]
 800a760:	6004      	str	r4, [r0, #0]
 800a762:	e7ed      	b.n	800a740 <_free_r+0x24>
 800a764:	461a      	mov	r2, r3
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	b10b      	cbz	r3, 800a76e <_free_r+0x52>
 800a76a:	42a3      	cmp	r3, r4
 800a76c:	d9fa      	bls.n	800a764 <_free_r+0x48>
 800a76e:	6811      	ldr	r1, [r2, #0]
 800a770:	1850      	adds	r0, r2, r1
 800a772:	42a0      	cmp	r0, r4
 800a774:	d10b      	bne.n	800a78e <_free_r+0x72>
 800a776:	6820      	ldr	r0, [r4, #0]
 800a778:	4401      	add	r1, r0
 800a77a:	1850      	adds	r0, r2, r1
 800a77c:	4283      	cmp	r3, r0
 800a77e:	6011      	str	r1, [r2, #0]
 800a780:	d1de      	bne.n	800a740 <_free_r+0x24>
 800a782:	6818      	ldr	r0, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	4401      	add	r1, r0
 800a788:	6011      	str	r1, [r2, #0]
 800a78a:	6053      	str	r3, [r2, #4]
 800a78c:	e7d8      	b.n	800a740 <_free_r+0x24>
 800a78e:	d902      	bls.n	800a796 <_free_r+0x7a>
 800a790:	230c      	movs	r3, #12
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	e7d4      	b.n	800a740 <_free_r+0x24>
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	1821      	adds	r1, r4, r0
 800a79a:	428b      	cmp	r3, r1
 800a79c:	bf01      	itttt	eq
 800a79e:	6819      	ldreq	r1, [r3, #0]
 800a7a0:	685b      	ldreq	r3, [r3, #4]
 800a7a2:	1809      	addeq	r1, r1, r0
 800a7a4:	6021      	streq	r1, [r4, #0]
 800a7a6:	6063      	str	r3, [r4, #4]
 800a7a8:	6054      	str	r4, [r2, #4]
 800a7aa:	e7c9      	b.n	800a740 <_free_r+0x24>
 800a7ac:	bd38      	pop	{r3, r4, r5, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000334 	.word	0x20000334

0800a7b4 <_malloc_r>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	1ccd      	adds	r5, r1, #3
 800a7b8:	f025 0503 	bic.w	r5, r5, #3
 800a7bc:	3508      	adds	r5, #8
 800a7be:	2d0c      	cmp	r5, #12
 800a7c0:	bf38      	it	cc
 800a7c2:	250c      	movcc	r5, #12
 800a7c4:	2d00      	cmp	r5, #0
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	db01      	blt.n	800a7ce <_malloc_r+0x1a>
 800a7ca:	42a9      	cmp	r1, r5
 800a7cc:	d903      	bls.n	800a7d6 <_malloc_r+0x22>
 800a7ce:	230c      	movs	r3, #12
 800a7d0:	6033      	str	r3, [r6, #0]
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d6:	f000 fa0f 	bl	800abf8 <__malloc_lock>
 800a7da:	4921      	ldr	r1, [pc, #132]	; (800a860 <_malloc_r+0xac>)
 800a7dc:	680a      	ldr	r2, [r1, #0]
 800a7de:	4614      	mov	r4, r2
 800a7e0:	b99c      	cbnz	r4, 800a80a <_malloc_r+0x56>
 800a7e2:	4f20      	ldr	r7, [pc, #128]	; (800a864 <_malloc_r+0xb0>)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	b923      	cbnz	r3, 800a7f2 <_malloc_r+0x3e>
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	f000 f998 	bl	800ab20 <_sbrk_r>
 800a7f0:	6038      	str	r0, [r7, #0]
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 f993 	bl	800ab20 <_sbrk_r>
 800a7fa:	1c43      	adds	r3, r0, #1
 800a7fc:	d123      	bne.n	800a846 <_malloc_r+0x92>
 800a7fe:	230c      	movs	r3, #12
 800a800:	4630      	mov	r0, r6
 800a802:	6033      	str	r3, [r6, #0]
 800a804:	f000 f9fe 	bl	800ac04 <__malloc_unlock>
 800a808:	e7e3      	b.n	800a7d2 <_malloc_r+0x1e>
 800a80a:	6823      	ldr	r3, [r4, #0]
 800a80c:	1b5b      	subs	r3, r3, r5
 800a80e:	d417      	bmi.n	800a840 <_malloc_r+0x8c>
 800a810:	2b0b      	cmp	r3, #11
 800a812:	d903      	bls.n	800a81c <_malloc_r+0x68>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	441c      	add	r4, r3
 800a818:	6025      	str	r5, [r4, #0]
 800a81a:	e004      	b.n	800a826 <_malloc_r+0x72>
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	42a2      	cmp	r2, r4
 800a820:	bf0c      	ite	eq
 800a822:	600b      	streq	r3, [r1, #0]
 800a824:	6053      	strne	r3, [r2, #4]
 800a826:	4630      	mov	r0, r6
 800a828:	f000 f9ec 	bl	800ac04 <__malloc_unlock>
 800a82c:	f104 000b 	add.w	r0, r4, #11
 800a830:	1d23      	adds	r3, r4, #4
 800a832:	f020 0007 	bic.w	r0, r0, #7
 800a836:	1ac2      	subs	r2, r0, r3
 800a838:	d0cc      	beq.n	800a7d4 <_malloc_r+0x20>
 800a83a:	1a1b      	subs	r3, r3, r0
 800a83c:	50a3      	str	r3, [r4, r2]
 800a83e:	e7c9      	b.n	800a7d4 <_malloc_r+0x20>
 800a840:	4622      	mov	r2, r4
 800a842:	6864      	ldr	r4, [r4, #4]
 800a844:	e7cc      	b.n	800a7e0 <_malloc_r+0x2c>
 800a846:	1cc4      	adds	r4, r0, #3
 800a848:	f024 0403 	bic.w	r4, r4, #3
 800a84c:	42a0      	cmp	r0, r4
 800a84e:	d0e3      	beq.n	800a818 <_malloc_r+0x64>
 800a850:	1a21      	subs	r1, r4, r0
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f964 	bl	800ab20 <_sbrk_r>
 800a858:	3001      	adds	r0, #1
 800a85a:	d1dd      	bne.n	800a818 <_malloc_r+0x64>
 800a85c:	e7cf      	b.n	800a7fe <_malloc_r+0x4a>
 800a85e:	bf00      	nop
 800a860:	20000334 	.word	0x20000334
 800a864:	20000338 	.word	0x20000338

0800a868 <__ssputs_r>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	688e      	ldr	r6, [r1, #8]
 800a86e:	4682      	mov	sl, r0
 800a870:	429e      	cmp	r6, r3
 800a872:	460c      	mov	r4, r1
 800a874:	4690      	mov	r8, r2
 800a876:	461f      	mov	r7, r3
 800a878:	d838      	bhi.n	800a8ec <__ssputs_r+0x84>
 800a87a:	898a      	ldrh	r2, [r1, #12]
 800a87c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a880:	d032      	beq.n	800a8e8 <__ssputs_r+0x80>
 800a882:	6825      	ldr	r5, [r4, #0]
 800a884:	6909      	ldr	r1, [r1, #16]
 800a886:	3301      	adds	r3, #1
 800a888:	eba5 0901 	sub.w	r9, r5, r1
 800a88c:	6965      	ldr	r5, [r4, #20]
 800a88e:	444b      	add	r3, r9
 800a890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a898:	106d      	asrs	r5, r5, #1
 800a89a:	429d      	cmp	r5, r3
 800a89c:	bf38      	it	cc
 800a89e:	461d      	movcc	r5, r3
 800a8a0:	0553      	lsls	r3, r2, #21
 800a8a2:	d531      	bpl.n	800a908 <__ssputs_r+0xa0>
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	f7ff ff85 	bl	800a7b4 <_malloc_r>
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	b950      	cbnz	r0, 800a8c4 <__ssputs_r+0x5c>
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b4:	f8ca 3000 	str.w	r3, [sl]
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8be:	81a3      	strh	r3, [r4, #12]
 800a8c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c4:	464a      	mov	r2, r9
 800a8c6:	6921      	ldr	r1, [r4, #16]
 800a8c8:	f7ff fb8a 	bl	8009fe0 <memcpy>
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a8d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d6:	81a3      	strh	r3, [r4, #12]
 800a8d8:	6126      	str	r6, [r4, #16]
 800a8da:	444e      	add	r6, r9
 800a8dc:	6026      	str	r6, [r4, #0]
 800a8de:	463e      	mov	r6, r7
 800a8e0:	6165      	str	r5, [r4, #20]
 800a8e2:	eba5 0509 	sub.w	r5, r5, r9
 800a8e6:	60a5      	str	r5, [r4, #8]
 800a8e8:	42be      	cmp	r6, r7
 800a8ea:	d900      	bls.n	800a8ee <__ssputs_r+0x86>
 800a8ec:	463e      	mov	r6, r7
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	6820      	ldr	r0, [r4, #0]
 800a8f4:	f000 f966 	bl	800abc4 <memmove>
 800a8f8:	68a3      	ldr	r3, [r4, #8]
 800a8fa:	6822      	ldr	r2, [r4, #0]
 800a8fc:	1b9b      	subs	r3, r3, r6
 800a8fe:	4432      	add	r2, r6
 800a900:	2000      	movs	r0, #0
 800a902:	60a3      	str	r3, [r4, #8]
 800a904:	6022      	str	r2, [r4, #0]
 800a906:	e7db      	b.n	800a8c0 <__ssputs_r+0x58>
 800a908:	462a      	mov	r2, r5
 800a90a:	f000 f981 	bl	800ac10 <_realloc_r>
 800a90e:	4606      	mov	r6, r0
 800a910:	2800      	cmp	r0, #0
 800a912:	d1e1      	bne.n	800a8d8 <__ssputs_r+0x70>
 800a914:	4650      	mov	r0, sl
 800a916:	6921      	ldr	r1, [r4, #16]
 800a918:	f7ff ff00 	bl	800a71c <_free_r>
 800a91c:	e7c7      	b.n	800a8ae <__ssputs_r+0x46>
	...

0800a920 <_svfiprintf_r>:
 800a920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	4698      	mov	r8, r3
 800a926:	898b      	ldrh	r3, [r1, #12]
 800a928:	4607      	mov	r7, r0
 800a92a:	061b      	lsls	r3, r3, #24
 800a92c:	460d      	mov	r5, r1
 800a92e:	4614      	mov	r4, r2
 800a930:	b09d      	sub	sp, #116	; 0x74
 800a932:	d50e      	bpl.n	800a952 <_svfiprintf_r+0x32>
 800a934:	690b      	ldr	r3, [r1, #16]
 800a936:	b963      	cbnz	r3, 800a952 <_svfiprintf_r+0x32>
 800a938:	2140      	movs	r1, #64	; 0x40
 800a93a:	f7ff ff3b 	bl	800a7b4 <_malloc_r>
 800a93e:	6028      	str	r0, [r5, #0]
 800a940:	6128      	str	r0, [r5, #16]
 800a942:	b920      	cbnz	r0, 800a94e <_svfiprintf_r+0x2e>
 800a944:	230c      	movs	r3, #12
 800a946:	603b      	str	r3, [r7, #0]
 800a948:	f04f 30ff 	mov.w	r0, #4294967295
 800a94c:	e0d1      	b.n	800aaf2 <_svfiprintf_r+0x1d2>
 800a94e:	2340      	movs	r3, #64	; 0x40
 800a950:	616b      	str	r3, [r5, #20]
 800a952:	2300      	movs	r3, #0
 800a954:	9309      	str	r3, [sp, #36]	; 0x24
 800a956:	2320      	movs	r3, #32
 800a958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a95c:	2330      	movs	r3, #48	; 0x30
 800a95e:	f04f 0901 	mov.w	r9, #1
 800a962:	f8cd 800c 	str.w	r8, [sp, #12]
 800a966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ab0c <_svfiprintf_r+0x1ec>
 800a96a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a96e:	4623      	mov	r3, r4
 800a970:	469a      	mov	sl, r3
 800a972:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a976:	b10a      	cbz	r2, 800a97c <_svfiprintf_r+0x5c>
 800a978:	2a25      	cmp	r2, #37	; 0x25
 800a97a:	d1f9      	bne.n	800a970 <_svfiprintf_r+0x50>
 800a97c:	ebba 0b04 	subs.w	fp, sl, r4
 800a980:	d00b      	beq.n	800a99a <_svfiprintf_r+0x7a>
 800a982:	465b      	mov	r3, fp
 800a984:	4622      	mov	r2, r4
 800a986:	4629      	mov	r1, r5
 800a988:	4638      	mov	r0, r7
 800a98a:	f7ff ff6d 	bl	800a868 <__ssputs_r>
 800a98e:	3001      	adds	r0, #1
 800a990:	f000 80aa 	beq.w	800aae8 <_svfiprintf_r+0x1c8>
 800a994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a996:	445a      	add	r2, fp
 800a998:	9209      	str	r2, [sp, #36]	; 0x24
 800a99a:	f89a 3000 	ldrb.w	r3, [sl]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80a2 	beq.w	800aae8 <_svfiprintf_r+0x1c8>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ae:	f10a 0a01 	add.w	sl, sl, #1
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	9307      	str	r3, [sp, #28]
 800a9b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a9bc:	4654      	mov	r4, sl
 800a9be:	2205      	movs	r2, #5
 800a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c4:	4851      	ldr	r0, [pc, #324]	; (800ab0c <_svfiprintf_r+0x1ec>)
 800a9c6:	f7ff fafd 	bl	8009fc4 <memchr>
 800a9ca:	9a04      	ldr	r2, [sp, #16]
 800a9cc:	b9d8      	cbnz	r0, 800aa06 <_svfiprintf_r+0xe6>
 800a9ce:	06d0      	lsls	r0, r2, #27
 800a9d0:	bf44      	itt	mi
 800a9d2:	2320      	movmi	r3, #32
 800a9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9d8:	0711      	lsls	r1, r2, #28
 800a9da:	bf44      	itt	mi
 800a9dc:	232b      	movmi	r3, #43	; 0x2b
 800a9de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a9e8:	d015      	beq.n	800aa16 <_svfiprintf_r+0xf6>
 800a9ea:	4654      	mov	r4, sl
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	f04f 0c0a 	mov.w	ip, #10
 800a9f2:	9a07      	ldr	r2, [sp, #28]
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9fa:	3b30      	subs	r3, #48	; 0x30
 800a9fc:	2b09      	cmp	r3, #9
 800a9fe:	d94e      	bls.n	800aa9e <_svfiprintf_r+0x17e>
 800aa00:	b1b0      	cbz	r0, 800aa30 <_svfiprintf_r+0x110>
 800aa02:	9207      	str	r2, [sp, #28]
 800aa04:	e014      	b.n	800aa30 <_svfiprintf_r+0x110>
 800aa06:	eba0 0308 	sub.w	r3, r0, r8
 800aa0a:	fa09 f303 	lsl.w	r3, r9, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	46a2      	mov	sl, r4
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	e7d2      	b.n	800a9bc <_svfiprintf_r+0x9c>
 800aa16:	9b03      	ldr	r3, [sp, #12]
 800aa18:	1d19      	adds	r1, r3, #4
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	9103      	str	r1, [sp, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfbb      	ittet	lt
 800aa22:	425b      	neglt	r3, r3
 800aa24:	f042 0202 	orrlt.w	r2, r2, #2
 800aa28:	9307      	strge	r3, [sp, #28]
 800aa2a:	9307      	strlt	r3, [sp, #28]
 800aa2c:	bfb8      	it	lt
 800aa2e:	9204      	strlt	r2, [sp, #16]
 800aa30:	7823      	ldrb	r3, [r4, #0]
 800aa32:	2b2e      	cmp	r3, #46	; 0x2e
 800aa34:	d10c      	bne.n	800aa50 <_svfiprintf_r+0x130>
 800aa36:	7863      	ldrb	r3, [r4, #1]
 800aa38:	2b2a      	cmp	r3, #42	; 0x2a
 800aa3a:	d135      	bne.n	800aaa8 <_svfiprintf_r+0x188>
 800aa3c:	9b03      	ldr	r3, [sp, #12]
 800aa3e:	3402      	adds	r4, #2
 800aa40:	1d1a      	adds	r2, r3, #4
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	9203      	str	r2, [sp, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bfb8      	it	lt
 800aa4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa4e:	9305      	str	r3, [sp, #20]
 800aa50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ab1c <_svfiprintf_r+0x1fc>
 800aa54:	2203      	movs	r2, #3
 800aa56:	4650      	mov	r0, sl
 800aa58:	7821      	ldrb	r1, [r4, #0]
 800aa5a:	f7ff fab3 	bl	8009fc4 <memchr>
 800aa5e:	b140      	cbz	r0, 800aa72 <_svfiprintf_r+0x152>
 800aa60:	2340      	movs	r3, #64	; 0x40
 800aa62:	eba0 000a 	sub.w	r0, r0, sl
 800aa66:	fa03 f000 	lsl.w	r0, r3, r0
 800aa6a:	9b04      	ldr	r3, [sp, #16]
 800aa6c:	3401      	adds	r4, #1
 800aa6e:	4303      	orrs	r3, r0
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa76:	2206      	movs	r2, #6
 800aa78:	4825      	ldr	r0, [pc, #148]	; (800ab10 <_svfiprintf_r+0x1f0>)
 800aa7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa7e:	f7ff faa1 	bl	8009fc4 <memchr>
 800aa82:	2800      	cmp	r0, #0
 800aa84:	d038      	beq.n	800aaf8 <_svfiprintf_r+0x1d8>
 800aa86:	4b23      	ldr	r3, [pc, #140]	; (800ab14 <_svfiprintf_r+0x1f4>)
 800aa88:	bb1b      	cbnz	r3, 800aad2 <_svfiprintf_r+0x1b2>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	3307      	adds	r3, #7
 800aa8e:	f023 0307 	bic.w	r3, r3, #7
 800aa92:	3308      	adds	r3, #8
 800aa94:	9303      	str	r3, [sp, #12]
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	4433      	add	r3, r6
 800aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9c:	e767      	b.n	800a96e <_svfiprintf_r+0x4e>
 800aa9e:	460c      	mov	r4, r1
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aaa6:	e7a5      	b.n	800a9f4 <_svfiprintf_r+0xd4>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f04f 0c0a 	mov.w	ip, #10
 800aaae:	4619      	mov	r1, r3
 800aab0:	3401      	adds	r4, #1
 800aab2:	9305      	str	r3, [sp, #20]
 800aab4:	4620      	mov	r0, r4
 800aab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaba:	3a30      	subs	r2, #48	; 0x30
 800aabc:	2a09      	cmp	r2, #9
 800aabe:	d903      	bls.n	800aac8 <_svfiprintf_r+0x1a8>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d0c5      	beq.n	800aa50 <_svfiprintf_r+0x130>
 800aac4:	9105      	str	r1, [sp, #20]
 800aac6:	e7c3      	b.n	800aa50 <_svfiprintf_r+0x130>
 800aac8:	4604      	mov	r4, r0
 800aaca:	2301      	movs	r3, #1
 800aacc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aad0:	e7f0      	b.n	800aab4 <_svfiprintf_r+0x194>
 800aad2:	ab03      	add	r3, sp, #12
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	462a      	mov	r2, r5
 800aad8:	4638      	mov	r0, r7
 800aada:	4b0f      	ldr	r3, [pc, #60]	; (800ab18 <_svfiprintf_r+0x1f8>)
 800aadc:	a904      	add	r1, sp, #16
 800aade:	f7fd ff33 	bl	8008948 <_printf_float>
 800aae2:	1c42      	adds	r2, r0, #1
 800aae4:	4606      	mov	r6, r0
 800aae6:	d1d6      	bne.n	800aa96 <_svfiprintf_r+0x176>
 800aae8:	89ab      	ldrh	r3, [r5, #12]
 800aaea:	065b      	lsls	r3, r3, #25
 800aaec:	f53f af2c 	bmi.w	800a948 <_svfiprintf_r+0x28>
 800aaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf2:	b01d      	add	sp, #116	; 0x74
 800aaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	ab03      	add	r3, sp, #12
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	462a      	mov	r2, r5
 800aafe:	4638      	mov	r0, r7
 800ab00:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <_svfiprintf_r+0x1f8>)
 800ab02:	a904      	add	r1, sp, #16
 800ab04:	f7fe f9bc 	bl	8008e80 <_printf_i>
 800ab08:	e7eb      	b.n	800aae2 <_svfiprintf_r+0x1c2>
 800ab0a:	bf00      	nop
 800ab0c:	0800c294 	.word	0x0800c294
 800ab10:	0800c29e 	.word	0x0800c29e
 800ab14:	08008949 	.word	0x08008949
 800ab18:	0800a869 	.word	0x0800a869
 800ab1c:	0800c29a 	.word	0x0800c29a

0800ab20 <_sbrk_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	2300      	movs	r3, #0
 800ab24:	4d05      	ldr	r5, [pc, #20]	; (800ab3c <_sbrk_r+0x1c>)
 800ab26:	4604      	mov	r4, r0
 800ab28:	4608      	mov	r0, r1
 800ab2a:	602b      	str	r3, [r5, #0]
 800ab2c:	f7f9 fde2 	bl	80046f4 <_sbrk>
 800ab30:	1c43      	adds	r3, r0, #1
 800ab32:	d102      	bne.n	800ab3a <_sbrk_r+0x1a>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b103      	cbz	r3, 800ab3a <_sbrk_r+0x1a>
 800ab38:	6023      	str	r3, [r4, #0]
 800ab3a:	bd38      	pop	{r3, r4, r5, pc}
 800ab3c:	20000800 	.word	0x20000800

0800ab40 <__assert_func>:
 800ab40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab42:	4614      	mov	r4, r2
 800ab44:	461a      	mov	r2, r3
 800ab46:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <__assert_func+0x2c>)
 800ab48:	4605      	mov	r5, r0
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68d8      	ldr	r0, [r3, #12]
 800ab4e:	b14c      	cbz	r4, 800ab64 <__assert_func+0x24>
 800ab50:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <__assert_func+0x30>)
 800ab52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab56:	9100      	str	r1, [sp, #0]
 800ab58:	462b      	mov	r3, r5
 800ab5a:	4906      	ldr	r1, [pc, #24]	; (800ab74 <__assert_func+0x34>)
 800ab5c:	f000 f80e 	bl	800ab7c <fiprintf>
 800ab60:	f000 faa2 	bl	800b0a8 <abort>
 800ab64:	4b04      	ldr	r3, [pc, #16]	; (800ab78 <__assert_func+0x38>)
 800ab66:	461c      	mov	r4, r3
 800ab68:	e7f3      	b.n	800ab52 <__assert_func+0x12>
 800ab6a:	bf00      	nop
 800ab6c:	2000000c 	.word	0x2000000c
 800ab70:	0800c2a5 	.word	0x0800c2a5
 800ab74:	0800c2b2 	.word	0x0800c2b2
 800ab78:	0800c2e0 	.word	0x0800c2e0

0800ab7c <fiprintf>:
 800ab7c:	b40e      	push	{r1, r2, r3}
 800ab7e:	b503      	push	{r0, r1, lr}
 800ab80:	4601      	mov	r1, r0
 800ab82:	ab03      	add	r3, sp, #12
 800ab84:	4805      	ldr	r0, [pc, #20]	; (800ab9c <fiprintf+0x20>)
 800ab86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8a:	6800      	ldr	r0, [r0, #0]
 800ab8c:	9301      	str	r3, [sp, #4]
 800ab8e:	f000 f88d 	bl	800acac <_vfiprintf_r>
 800ab92:	b002      	add	sp, #8
 800ab94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab98:	b003      	add	sp, #12
 800ab9a:	4770      	bx	lr
 800ab9c:	2000000c 	.word	0x2000000c

0800aba0 <__ascii_mbtowc>:
 800aba0:	b082      	sub	sp, #8
 800aba2:	b901      	cbnz	r1, 800aba6 <__ascii_mbtowc+0x6>
 800aba4:	a901      	add	r1, sp, #4
 800aba6:	b142      	cbz	r2, 800abba <__ascii_mbtowc+0x1a>
 800aba8:	b14b      	cbz	r3, 800abbe <__ascii_mbtowc+0x1e>
 800abaa:	7813      	ldrb	r3, [r2, #0]
 800abac:	600b      	str	r3, [r1, #0]
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	1e10      	subs	r0, r2, #0
 800abb2:	bf18      	it	ne
 800abb4:	2001      	movne	r0, #1
 800abb6:	b002      	add	sp, #8
 800abb8:	4770      	bx	lr
 800abba:	4610      	mov	r0, r2
 800abbc:	e7fb      	b.n	800abb6 <__ascii_mbtowc+0x16>
 800abbe:	f06f 0001 	mvn.w	r0, #1
 800abc2:	e7f8      	b.n	800abb6 <__ascii_mbtowc+0x16>

0800abc4 <memmove>:
 800abc4:	4288      	cmp	r0, r1
 800abc6:	b510      	push	{r4, lr}
 800abc8:	eb01 0402 	add.w	r4, r1, r2
 800abcc:	d902      	bls.n	800abd4 <memmove+0x10>
 800abce:	4284      	cmp	r4, r0
 800abd0:	4623      	mov	r3, r4
 800abd2:	d807      	bhi.n	800abe4 <memmove+0x20>
 800abd4:	1e43      	subs	r3, r0, #1
 800abd6:	42a1      	cmp	r1, r4
 800abd8:	d008      	beq.n	800abec <memmove+0x28>
 800abda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abe2:	e7f8      	b.n	800abd6 <memmove+0x12>
 800abe4:	4601      	mov	r1, r0
 800abe6:	4402      	add	r2, r0
 800abe8:	428a      	cmp	r2, r1
 800abea:	d100      	bne.n	800abee <memmove+0x2a>
 800abec:	bd10      	pop	{r4, pc}
 800abee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abf6:	e7f7      	b.n	800abe8 <memmove+0x24>

0800abf8 <__malloc_lock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_lock+0x8>)
 800abfa:	f000 bc15 	b.w	800b428 <__retarget_lock_acquire_recursive>
 800abfe:	bf00      	nop
 800ac00:	20000808 	.word	0x20000808

0800ac04 <__malloc_unlock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_unlock+0x8>)
 800ac06:	f000 bc10 	b.w	800b42a <__retarget_lock_release_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	20000808 	.word	0x20000808

0800ac10 <_realloc_r>:
 800ac10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac12:	4607      	mov	r7, r0
 800ac14:	4614      	mov	r4, r2
 800ac16:	460e      	mov	r6, r1
 800ac18:	b921      	cbnz	r1, 800ac24 <_realloc_r+0x14>
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac20:	f7ff bdc8 	b.w	800a7b4 <_malloc_r>
 800ac24:	b922      	cbnz	r2, 800ac30 <_realloc_r+0x20>
 800ac26:	f7ff fd79 	bl	800a71c <_free_r>
 800ac2a:	4625      	mov	r5, r4
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac30:	f000 fc60 	bl	800b4f4 <_malloc_usable_size_r>
 800ac34:	42a0      	cmp	r0, r4
 800ac36:	d20f      	bcs.n	800ac58 <_realloc_r+0x48>
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4638      	mov	r0, r7
 800ac3c:	f7ff fdba 	bl	800a7b4 <_malloc_r>
 800ac40:	4605      	mov	r5, r0
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d0f2      	beq.n	800ac2c <_realloc_r+0x1c>
 800ac46:	4631      	mov	r1, r6
 800ac48:	4622      	mov	r2, r4
 800ac4a:	f7ff f9c9 	bl	8009fe0 <memcpy>
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4638      	mov	r0, r7
 800ac52:	f7ff fd63 	bl	800a71c <_free_r>
 800ac56:	e7e9      	b.n	800ac2c <_realloc_r+0x1c>
 800ac58:	4635      	mov	r5, r6
 800ac5a:	e7e7      	b.n	800ac2c <_realloc_r+0x1c>

0800ac5c <__sfputc_r>:
 800ac5c:	6893      	ldr	r3, [r2, #8]
 800ac5e:	b410      	push	{r4}
 800ac60:	3b01      	subs	r3, #1
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	6093      	str	r3, [r2, #8]
 800ac66:	da07      	bge.n	800ac78 <__sfputc_r+0x1c>
 800ac68:	6994      	ldr	r4, [r2, #24]
 800ac6a:	42a3      	cmp	r3, r4
 800ac6c:	db01      	blt.n	800ac72 <__sfputc_r+0x16>
 800ac6e:	290a      	cmp	r1, #10
 800ac70:	d102      	bne.n	800ac78 <__sfputc_r+0x1c>
 800ac72:	bc10      	pop	{r4}
 800ac74:	f000 b94a 	b.w	800af0c <__swbuf_r>
 800ac78:	6813      	ldr	r3, [r2, #0]
 800ac7a:	1c58      	adds	r0, r3, #1
 800ac7c:	6010      	str	r0, [r2, #0]
 800ac7e:	7019      	strb	r1, [r3, #0]
 800ac80:	4608      	mov	r0, r1
 800ac82:	bc10      	pop	{r4}
 800ac84:	4770      	bx	lr

0800ac86 <__sfputs_r>:
 800ac86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac88:	4606      	mov	r6, r0
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	4614      	mov	r4, r2
 800ac8e:	18d5      	adds	r5, r2, r3
 800ac90:	42ac      	cmp	r4, r5
 800ac92:	d101      	bne.n	800ac98 <__sfputs_r+0x12>
 800ac94:	2000      	movs	r0, #0
 800ac96:	e007      	b.n	800aca8 <__sfputs_r+0x22>
 800ac98:	463a      	mov	r2, r7
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca0:	f7ff ffdc 	bl	800ac5c <__sfputc_r>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	d1f3      	bne.n	800ac90 <__sfputs_r+0xa>
 800aca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800acac <_vfiprintf_r>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	460d      	mov	r5, r1
 800acb2:	4614      	mov	r4, r2
 800acb4:	4698      	mov	r8, r3
 800acb6:	4606      	mov	r6, r0
 800acb8:	b09d      	sub	sp, #116	; 0x74
 800acba:	b118      	cbz	r0, 800acc4 <_vfiprintf_r+0x18>
 800acbc:	6983      	ldr	r3, [r0, #24]
 800acbe:	b90b      	cbnz	r3, 800acc4 <_vfiprintf_r+0x18>
 800acc0:	f000 fb14 	bl	800b2ec <__sinit>
 800acc4:	4b89      	ldr	r3, [pc, #548]	; (800aeec <_vfiprintf_r+0x240>)
 800acc6:	429d      	cmp	r5, r3
 800acc8:	d11b      	bne.n	800ad02 <_vfiprintf_r+0x56>
 800acca:	6875      	ldr	r5, [r6, #4]
 800accc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acce:	07d9      	lsls	r1, r3, #31
 800acd0:	d405      	bmi.n	800acde <_vfiprintf_r+0x32>
 800acd2:	89ab      	ldrh	r3, [r5, #12]
 800acd4:	059a      	lsls	r2, r3, #22
 800acd6:	d402      	bmi.n	800acde <_vfiprintf_r+0x32>
 800acd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acda:	f000 fba5 	bl	800b428 <__retarget_lock_acquire_recursive>
 800acde:	89ab      	ldrh	r3, [r5, #12]
 800ace0:	071b      	lsls	r3, r3, #28
 800ace2:	d501      	bpl.n	800ace8 <_vfiprintf_r+0x3c>
 800ace4:	692b      	ldr	r3, [r5, #16]
 800ace6:	b9eb      	cbnz	r3, 800ad24 <_vfiprintf_r+0x78>
 800ace8:	4629      	mov	r1, r5
 800acea:	4630      	mov	r0, r6
 800acec:	f000 f96e 	bl	800afcc <__swsetup_r>
 800acf0:	b1c0      	cbz	r0, 800ad24 <_vfiprintf_r+0x78>
 800acf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800acf4:	07dc      	lsls	r4, r3, #31
 800acf6:	d50e      	bpl.n	800ad16 <_vfiprintf_r+0x6a>
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295
 800acfc:	b01d      	add	sp, #116	; 0x74
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	4b7b      	ldr	r3, [pc, #492]	; (800aef0 <_vfiprintf_r+0x244>)
 800ad04:	429d      	cmp	r5, r3
 800ad06:	d101      	bne.n	800ad0c <_vfiprintf_r+0x60>
 800ad08:	68b5      	ldr	r5, [r6, #8]
 800ad0a:	e7df      	b.n	800accc <_vfiprintf_r+0x20>
 800ad0c:	4b79      	ldr	r3, [pc, #484]	; (800aef4 <_vfiprintf_r+0x248>)
 800ad0e:	429d      	cmp	r5, r3
 800ad10:	bf08      	it	eq
 800ad12:	68f5      	ldreq	r5, [r6, #12]
 800ad14:	e7da      	b.n	800accc <_vfiprintf_r+0x20>
 800ad16:	89ab      	ldrh	r3, [r5, #12]
 800ad18:	0598      	lsls	r0, r3, #22
 800ad1a:	d4ed      	bmi.n	800acf8 <_vfiprintf_r+0x4c>
 800ad1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad1e:	f000 fb84 	bl	800b42a <__retarget_lock_release_recursive>
 800ad22:	e7e9      	b.n	800acf8 <_vfiprintf_r+0x4c>
 800ad24:	2300      	movs	r3, #0
 800ad26:	9309      	str	r3, [sp, #36]	; 0x24
 800ad28:	2320      	movs	r3, #32
 800ad2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad2e:	2330      	movs	r3, #48	; 0x30
 800ad30:	f04f 0901 	mov.w	r9, #1
 800ad34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800aef8 <_vfiprintf_r+0x24c>
 800ad3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad40:	4623      	mov	r3, r4
 800ad42:	469a      	mov	sl, r3
 800ad44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad48:	b10a      	cbz	r2, 800ad4e <_vfiprintf_r+0xa2>
 800ad4a:	2a25      	cmp	r2, #37	; 0x25
 800ad4c:	d1f9      	bne.n	800ad42 <_vfiprintf_r+0x96>
 800ad4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ad52:	d00b      	beq.n	800ad6c <_vfiprintf_r+0xc0>
 800ad54:	465b      	mov	r3, fp
 800ad56:	4622      	mov	r2, r4
 800ad58:	4629      	mov	r1, r5
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	f7ff ff93 	bl	800ac86 <__sfputs_r>
 800ad60:	3001      	adds	r0, #1
 800ad62:	f000 80aa 	beq.w	800aeba <_vfiprintf_r+0x20e>
 800ad66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad68:	445a      	add	r2, fp
 800ad6a:	9209      	str	r2, [sp, #36]	; 0x24
 800ad6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	f000 80a2 	beq.w	800aeba <_vfiprintf_r+0x20e>
 800ad76:	2300      	movs	r3, #0
 800ad78:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad80:	f10a 0a01 	add.w	sl, sl, #1
 800ad84:	9304      	str	r3, [sp, #16]
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad8c:	931a      	str	r3, [sp, #104]	; 0x68
 800ad8e:	4654      	mov	r4, sl
 800ad90:	2205      	movs	r2, #5
 800ad92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad96:	4858      	ldr	r0, [pc, #352]	; (800aef8 <_vfiprintf_r+0x24c>)
 800ad98:	f7ff f914 	bl	8009fc4 <memchr>
 800ad9c:	9a04      	ldr	r2, [sp, #16]
 800ad9e:	b9d8      	cbnz	r0, 800add8 <_vfiprintf_r+0x12c>
 800ada0:	06d1      	lsls	r1, r2, #27
 800ada2:	bf44      	itt	mi
 800ada4:	2320      	movmi	r3, #32
 800ada6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adaa:	0713      	lsls	r3, r2, #28
 800adac:	bf44      	itt	mi
 800adae:	232b      	movmi	r3, #43	; 0x2b
 800adb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adb4:	f89a 3000 	ldrb.w	r3, [sl]
 800adb8:	2b2a      	cmp	r3, #42	; 0x2a
 800adba:	d015      	beq.n	800ade8 <_vfiprintf_r+0x13c>
 800adbc:	4654      	mov	r4, sl
 800adbe:	2000      	movs	r0, #0
 800adc0:	f04f 0c0a 	mov.w	ip, #10
 800adc4:	9a07      	ldr	r2, [sp, #28]
 800adc6:	4621      	mov	r1, r4
 800adc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adcc:	3b30      	subs	r3, #48	; 0x30
 800adce:	2b09      	cmp	r3, #9
 800add0:	d94e      	bls.n	800ae70 <_vfiprintf_r+0x1c4>
 800add2:	b1b0      	cbz	r0, 800ae02 <_vfiprintf_r+0x156>
 800add4:	9207      	str	r2, [sp, #28]
 800add6:	e014      	b.n	800ae02 <_vfiprintf_r+0x156>
 800add8:	eba0 0308 	sub.w	r3, r0, r8
 800addc:	fa09 f303 	lsl.w	r3, r9, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	46a2      	mov	sl, r4
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	e7d2      	b.n	800ad8e <_vfiprintf_r+0xe2>
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	1d19      	adds	r1, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	9103      	str	r1, [sp, #12]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbb      	ittet	lt
 800adf4:	425b      	neglt	r3, r3
 800adf6:	f042 0202 	orrlt.w	r2, r2, #2
 800adfa:	9307      	strge	r3, [sp, #28]
 800adfc:	9307      	strlt	r3, [sp, #28]
 800adfe:	bfb8      	it	lt
 800ae00:	9204      	strlt	r2, [sp, #16]
 800ae02:	7823      	ldrb	r3, [r4, #0]
 800ae04:	2b2e      	cmp	r3, #46	; 0x2e
 800ae06:	d10c      	bne.n	800ae22 <_vfiprintf_r+0x176>
 800ae08:	7863      	ldrb	r3, [r4, #1]
 800ae0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae0c:	d135      	bne.n	800ae7a <_vfiprintf_r+0x1ce>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	3402      	adds	r4, #2
 800ae12:	1d1a      	adds	r2, r3, #4
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	9203      	str	r2, [sp, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bfb8      	it	lt
 800ae1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800af08 <_vfiprintf_r+0x25c>
 800ae26:	2203      	movs	r2, #3
 800ae28:	4650      	mov	r0, sl
 800ae2a:	7821      	ldrb	r1, [r4, #0]
 800ae2c:	f7ff f8ca 	bl	8009fc4 <memchr>
 800ae30:	b140      	cbz	r0, 800ae44 <_vfiprintf_r+0x198>
 800ae32:	2340      	movs	r3, #64	; 0x40
 800ae34:	eba0 000a 	sub.w	r0, r0, sl
 800ae38:	fa03 f000 	lsl.w	r0, r3, r0
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	3401      	adds	r4, #1
 800ae40:	4303      	orrs	r3, r0
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae48:	2206      	movs	r2, #6
 800ae4a:	482c      	ldr	r0, [pc, #176]	; (800aefc <_vfiprintf_r+0x250>)
 800ae4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae50:	f7ff f8b8 	bl	8009fc4 <memchr>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d03f      	beq.n	800aed8 <_vfiprintf_r+0x22c>
 800ae58:	4b29      	ldr	r3, [pc, #164]	; (800af00 <_vfiprintf_r+0x254>)
 800ae5a:	bb1b      	cbnz	r3, 800aea4 <_vfiprintf_r+0x1f8>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	3307      	adds	r3, #7
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	3308      	adds	r3, #8
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae6a:	443b      	add	r3, r7
 800ae6c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6e:	e767      	b.n	800ad40 <_vfiprintf_r+0x94>
 800ae70:	460c      	mov	r4, r1
 800ae72:	2001      	movs	r0, #1
 800ae74:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae78:	e7a5      	b.n	800adc6 <_vfiprintf_r+0x11a>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f04f 0c0a 	mov.w	ip, #10
 800ae80:	4619      	mov	r1, r3
 800ae82:	3401      	adds	r4, #1
 800ae84:	9305      	str	r3, [sp, #20]
 800ae86:	4620      	mov	r0, r4
 800ae88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8c:	3a30      	subs	r2, #48	; 0x30
 800ae8e:	2a09      	cmp	r2, #9
 800ae90:	d903      	bls.n	800ae9a <_vfiprintf_r+0x1ee>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c5      	beq.n	800ae22 <_vfiprintf_r+0x176>
 800ae96:	9105      	str	r1, [sp, #20]
 800ae98:	e7c3      	b.n	800ae22 <_vfiprintf_r+0x176>
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800aea2:	e7f0      	b.n	800ae86 <_vfiprintf_r+0x1da>
 800aea4:	ab03      	add	r3, sp, #12
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4630      	mov	r0, r6
 800aeac:	4b15      	ldr	r3, [pc, #84]	; (800af04 <_vfiprintf_r+0x258>)
 800aeae:	a904      	add	r1, sp, #16
 800aeb0:	f7fd fd4a 	bl	8008948 <_printf_float>
 800aeb4:	4607      	mov	r7, r0
 800aeb6:	1c78      	adds	r0, r7, #1
 800aeb8:	d1d6      	bne.n	800ae68 <_vfiprintf_r+0x1bc>
 800aeba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aebc:	07d9      	lsls	r1, r3, #31
 800aebe:	d405      	bmi.n	800aecc <_vfiprintf_r+0x220>
 800aec0:	89ab      	ldrh	r3, [r5, #12]
 800aec2:	059a      	lsls	r2, r3, #22
 800aec4:	d402      	bmi.n	800aecc <_vfiprintf_r+0x220>
 800aec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aec8:	f000 faaf 	bl	800b42a <__retarget_lock_release_recursive>
 800aecc:	89ab      	ldrh	r3, [r5, #12]
 800aece:	065b      	lsls	r3, r3, #25
 800aed0:	f53f af12 	bmi.w	800acf8 <_vfiprintf_r+0x4c>
 800aed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aed6:	e711      	b.n	800acfc <_vfiprintf_r+0x50>
 800aed8:	ab03      	add	r3, sp, #12
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	462a      	mov	r2, r5
 800aede:	4630      	mov	r0, r6
 800aee0:	4b08      	ldr	r3, [pc, #32]	; (800af04 <_vfiprintf_r+0x258>)
 800aee2:	a904      	add	r1, sp, #16
 800aee4:	f7fd ffcc 	bl	8008e80 <_printf_i>
 800aee8:	e7e4      	b.n	800aeb4 <_vfiprintf_r+0x208>
 800aeea:	bf00      	nop
 800aeec:	0800c30c 	.word	0x0800c30c
 800aef0:	0800c32c 	.word	0x0800c32c
 800aef4:	0800c2ec 	.word	0x0800c2ec
 800aef8:	0800c294 	.word	0x0800c294
 800aefc:	0800c29e 	.word	0x0800c29e
 800af00:	08008949 	.word	0x08008949
 800af04:	0800ac87 	.word	0x0800ac87
 800af08:	0800c29a 	.word	0x0800c29a

0800af0c <__swbuf_r>:
 800af0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af0e:	460e      	mov	r6, r1
 800af10:	4614      	mov	r4, r2
 800af12:	4605      	mov	r5, r0
 800af14:	b118      	cbz	r0, 800af1e <__swbuf_r+0x12>
 800af16:	6983      	ldr	r3, [r0, #24]
 800af18:	b90b      	cbnz	r3, 800af1e <__swbuf_r+0x12>
 800af1a:	f000 f9e7 	bl	800b2ec <__sinit>
 800af1e:	4b21      	ldr	r3, [pc, #132]	; (800afa4 <__swbuf_r+0x98>)
 800af20:	429c      	cmp	r4, r3
 800af22:	d12b      	bne.n	800af7c <__swbuf_r+0x70>
 800af24:	686c      	ldr	r4, [r5, #4]
 800af26:	69a3      	ldr	r3, [r4, #24]
 800af28:	60a3      	str	r3, [r4, #8]
 800af2a:	89a3      	ldrh	r3, [r4, #12]
 800af2c:	071a      	lsls	r2, r3, #28
 800af2e:	d52f      	bpl.n	800af90 <__swbuf_r+0x84>
 800af30:	6923      	ldr	r3, [r4, #16]
 800af32:	b36b      	cbz	r3, 800af90 <__swbuf_r+0x84>
 800af34:	6923      	ldr	r3, [r4, #16]
 800af36:	6820      	ldr	r0, [r4, #0]
 800af38:	b2f6      	uxtb	r6, r6
 800af3a:	1ac0      	subs	r0, r0, r3
 800af3c:	6963      	ldr	r3, [r4, #20]
 800af3e:	4637      	mov	r7, r6
 800af40:	4283      	cmp	r3, r0
 800af42:	dc04      	bgt.n	800af4e <__swbuf_r+0x42>
 800af44:	4621      	mov	r1, r4
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f93c 	bl	800b1c4 <_fflush_r>
 800af4c:	bb30      	cbnz	r0, 800af9c <__swbuf_r+0x90>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	3001      	adds	r0, #1
 800af52:	3b01      	subs	r3, #1
 800af54:	60a3      	str	r3, [r4, #8]
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	6022      	str	r2, [r4, #0]
 800af5c:	701e      	strb	r6, [r3, #0]
 800af5e:	6963      	ldr	r3, [r4, #20]
 800af60:	4283      	cmp	r3, r0
 800af62:	d004      	beq.n	800af6e <__swbuf_r+0x62>
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	07db      	lsls	r3, r3, #31
 800af68:	d506      	bpl.n	800af78 <__swbuf_r+0x6c>
 800af6a:	2e0a      	cmp	r6, #10
 800af6c:	d104      	bne.n	800af78 <__swbuf_r+0x6c>
 800af6e:	4621      	mov	r1, r4
 800af70:	4628      	mov	r0, r5
 800af72:	f000 f927 	bl	800b1c4 <_fflush_r>
 800af76:	b988      	cbnz	r0, 800af9c <__swbuf_r+0x90>
 800af78:	4638      	mov	r0, r7
 800af7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af7c:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <__swbuf_r+0x9c>)
 800af7e:	429c      	cmp	r4, r3
 800af80:	d101      	bne.n	800af86 <__swbuf_r+0x7a>
 800af82:	68ac      	ldr	r4, [r5, #8]
 800af84:	e7cf      	b.n	800af26 <__swbuf_r+0x1a>
 800af86:	4b09      	ldr	r3, [pc, #36]	; (800afac <__swbuf_r+0xa0>)
 800af88:	429c      	cmp	r4, r3
 800af8a:	bf08      	it	eq
 800af8c:	68ec      	ldreq	r4, [r5, #12]
 800af8e:	e7ca      	b.n	800af26 <__swbuf_r+0x1a>
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f81a 	bl	800afcc <__swsetup_r>
 800af98:	2800      	cmp	r0, #0
 800af9a:	d0cb      	beq.n	800af34 <__swbuf_r+0x28>
 800af9c:	f04f 37ff 	mov.w	r7, #4294967295
 800afa0:	e7ea      	b.n	800af78 <__swbuf_r+0x6c>
 800afa2:	bf00      	nop
 800afa4:	0800c30c 	.word	0x0800c30c
 800afa8:	0800c32c 	.word	0x0800c32c
 800afac:	0800c2ec 	.word	0x0800c2ec

0800afb0 <__ascii_wctomb>:
 800afb0:	4603      	mov	r3, r0
 800afb2:	4608      	mov	r0, r1
 800afb4:	b141      	cbz	r1, 800afc8 <__ascii_wctomb+0x18>
 800afb6:	2aff      	cmp	r2, #255	; 0xff
 800afb8:	d904      	bls.n	800afc4 <__ascii_wctomb+0x14>
 800afba:	228a      	movs	r2, #138	; 0x8a
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	601a      	str	r2, [r3, #0]
 800afc2:	4770      	bx	lr
 800afc4:	2001      	movs	r0, #1
 800afc6:	700a      	strb	r2, [r1, #0]
 800afc8:	4770      	bx	lr
	...

0800afcc <__swsetup_r>:
 800afcc:	4b32      	ldr	r3, [pc, #200]	; (800b098 <__swsetup_r+0xcc>)
 800afce:	b570      	push	{r4, r5, r6, lr}
 800afd0:	681d      	ldr	r5, [r3, #0]
 800afd2:	4606      	mov	r6, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	b125      	cbz	r5, 800afe2 <__swsetup_r+0x16>
 800afd8:	69ab      	ldr	r3, [r5, #24]
 800afda:	b913      	cbnz	r3, 800afe2 <__swsetup_r+0x16>
 800afdc:	4628      	mov	r0, r5
 800afde:	f000 f985 	bl	800b2ec <__sinit>
 800afe2:	4b2e      	ldr	r3, [pc, #184]	; (800b09c <__swsetup_r+0xd0>)
 800afe4:	429c      	cmp	r4, r3
 800afe6:	d10f      	bne.n	800b008 <__swsetup_r+0x3c>
 800afe8:	686c      	ldr	r4, [r5, #4]
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aff0:	0719      	lsls	r1, r3, #28
 800aff2:	d42c      	bmi.n	800b04e <__swsetup_r+0x82>
 800aff4:	06dd      	lsls	r5, r3, #27
 800aff6:	d411      	bmi.n	800b01c <__swsetup_r+0x50>
 800aff8:	2309      	movs	r3, #9
 800affa:	6033      	str	r3, [r6, #0]
 800affc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	81a3      	strh	r3, [r4, #12]
 800b006:	e03e      	b.n	800b086 <__swsetup_r+0xba>
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <__swsetup_r+0xd4>)
 800b00a:	429c      	cmp	r4, r3
 800b00c:	d101      	bne.n	800b012 <__swsetup_r+0x46>
 800b00e:	68ac      	ldr	r4, [r5, #8]
 800b010:	e7eb      	b.n	800afea <__swsetup_r+0x1e>
 800b012:	4b24      	ldr	r3, [pc, #144]	; (800b0a4 <__swsetup_r+0xd8>)
 800b014:	429c      	cmp	r4, r3
 800b016:	bf08      	it	eq
 800b018:	68ec      	ldreq	r4, [r5, #12]
 800b01a:	e7e6      	b.n	800afea <__swsetup_r+0x1e>
 800b01c:	0758      	lsls	r0, r3, #29
 800b01e:	d512      	bpl.n	800b046 <__swsetup_r+0x7a>
 800b020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b022:	b141      	cbz	r1, 800b036 <__swsetup_r+0x6a>
 800b024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b028:	4299      	cmp	r1, r3
 800b02a:	d002      	beq.n	800b032 <__swsetup_r+0x66>
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff fb75 	bl	800a71c <_free_r>
 800b032:	2300      	movs	r3, #0
 800b034:	6363      	str	r3, [r4, #52]	; 0x34
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b03c:	81a3      	strh	r3, [r4, #12]
 800b03e:	2300      	movs	r3, #0
 800b040:	6063      	str	r3, [r4, #4]
 800b042:	6923      	ldr	r3, [r4, #16]
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f043 0308 	orr.w	r3, r3, #8
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	6923      	ldr	r3, [r4, #16]
 800b050:	b94b      	cbnz	r3, 800b066 <__swsetup_r+0x9a>
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b05c:	d003      	beq.n	800b066 <__swsetup_r+0x9a>
 800b05e:	4621      	mov	r1, r4
 800b060:	4630      	mov	r0, r6
 800b062:	f000 fa07 	bl	800b474 <__smakebuf_r>
 800b066:	89a0      	ldrh	r0, [r4, #12]
 800b068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b06c:	f010 0301 	ands.w	r3, r0, #1
 800b070:	d00a      	beq.n	800b088 <__swsetup_r+0xbc>
 800b072:	2300      	movs	r3, #0
 800b074:	60a3      	str	r3, [r4, #8]
 800b076:	6963      	ldr	r3, [r4, #20]
 800b078:	425b      	negs	r3, r3
 800b07a:	61a3      	str	r3, [r4, #24]
 800b07c:	6923      	ldr	r3, [r4, #16]
 800b07e:	b943      	cbnz	r3, 800b092 <__swsetup_r+0xc6>
 800b080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b084:	d1ba      	bne.n	800affc <__swsetup_r+0x30>
 800b086:	bd70      	pop	{r4, r5, r6, pc}
 800b088:	0781      	lsls	r1, r0, #30
 800b08a:	bf58      	it	pl
 800b08c:	6963      	ldrpl	r3, [r4, #20]
 800b08e:	60a3      	str	r3, [r4, #8]
 800b090:	e7f4      	b.n	800b07c <__swsetup_r+0xb0>
 800b092:	2000      	movs	r0, #0
 800b094:	e7f7      	b.n	800b086 <__swsetup_r+0xba>
 800b096:	bf00      	nop
 800b098:	2000000c 	.word	0x2000000c
 800b09c:	0800c30c 	.word	0x0800c30c
 800b0a0:	0800c32c 	.word	0x0800c32c
 800b0a4:	0800c2ec 	.word	0x0800c2ec

0800b0a8 <abort>:
 800b0a8:	2006      	movs	r0, #6
 800b0aa:	b508      	push	{r3, lr}
 800b0ac:	f000 fa52 	bl	800b554 <raise>
 800b0b0:	2001      	movs	r0, #1
 800b0b2:	f7f9 faac 	bl	800460e <_exit>
	...

0800b0b8 <__sflush_r>:
 800b0b8:	898a      	ldrh	r2, [r1, #12]
 800b0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0be:	4605      	mov	r5, r0
 800b0c0:	0710      	lsls	r0, r2, #28
 800b0c2:	460c      	mov	r4, r1
 800b0c4:	d458      	bmi.n	800b178 <__sflush_r+0xc0>
 800b0c6:	684b      	ldr	r3, [r1, #4]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dc05      	bgt.n	800b0d8 <__sflush_r+0x20>
 800b0cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	dc02      	bgt.n	800b0d8 <__sflush_r+0x20>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d0f9      	beq.n	800b0d2 <__sflush_r+0x1a>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0e4:	682f      	ldr	r7, [r5, #0]
 800b0e6:	602b      	str	r3, [r5, #0]
 800b0e8:	d032      	beq.n	800b150 <__sflush_r+0x98>
 800b0ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	075a      	lsls	r2, r3, #29
 800b0f0:	d505      	bpl.n	800b0fe <__sflush_r+0x46>
 800b0f2:	6863      	ldr	r3, [r4, #4]
 800b0f4:	1ac0      	subs	r0, r0, r3
 800b0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0f8:	b10b      	cbz	r3, 800b0fe <__sflush_r+0x46>
 800b0fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0fc:	1ac0      	subs	r0, r0, r3
 800b0fe:	2300      	movs	r3, #0
 800b100:	4602      	mov	r2, r0
 800b102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b104:	4628      	mov	r0, r5
 800b106:	6a21      	ldr	r1, [r4, #32]
 800b108:	47b0      	blx	r6
 800b10a:	1c43      	adds	r3, r0, #1
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	d106      	bne.n	800b11e <__sflush_r+0x66>
 800b110:	6829      	ldr	r1, [r5, #0]
 800b112:	291d      	cmp	r1, #29
 800b114:	d82c      	bhi.n	800b170 <__sflush_r+0xb8>
 800b116:	4a2a      	ldr	r2, [pc, #168]	; (800b1c0 <__sflush_r+0x108>)
 800b118:	40ca      	lsrs	r2, r1
 800b11a:	07d6      	lsls	r6, r2, #31
 800b11c:	d528      	bpl.n	800b170 <__sflush_r+0xb8>
 800b11e:	2200      	movs	r2, #0
 800b120:	6062      	str	r2, [r4, #4]
 800b122:	6922      	ldr	r2, [r4, #16]
 800b124:	04d9      	lsls	r1, r3, #19
 800b126:	6022      	str	r2, [r4, #0]
 800b128:	d504      	bpl.n	800b134 <__sflush_r+0x7c>
 800b12a:	1c42      	adds	r2, r0, #1
 800b12c:	d101      	bne.n	800b132 <__sflush_r+0x7a>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	b903      	cbnz	r3, 800b134 <__sflush_r+0x7c>
 800b132:	6560      	str	r0, [r4, #84]	; 0x54
 800b134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b136:	602f      	str	r7, [r5, #0]
 800b138:	2900      	cmp	r1, #0
 800b13a:	d0ca      	beq.n	800b0d2 <__sflush_r+0x1a>
 800b13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b140:	4299      	cmp	r1, r3
 800b142:	d002      	beq.n	800b14a <__sflush_r+0x92>
 800b144:	4628      	mov	r0, r5
 800b146:	f7ff fae9 	bl	800a71c <_free_r>
 800b14a:	2000      	movs	r0, #0
 800b14c:	6360      	str	r0, [r4, #52]	; 0x34
 800b14e:	e7c1      	b.n	800b0d4 <__sflush_r+0x1c>
 800b150:	6a21      	ldr	r1, [r4, #32]
 800b152:	2301      	movs	r3, #1
 800b154:	4628      	mov	r0, r5
 800b156:	47b0      	blx	r6
 800b158:	1c41      	adds	r1, r0, #1
 800b15a:	d1c7      	bne.n	800b0ec <__sflush_r+0x34>
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0c4      	beq.n	800b0ec <__sflush_r+0x34>
 800b162:	2b1d      	cmp	r3, #29
 800b164:	d001      	beq.n	800b16a <__sflush_r+0xb2>
 800b166:	2b16      	cmp	r3, #22
 800b168:	d101      	bne.n	800b16e <__sflush_r+0xb6>
 800b16a:	602f      	str	r7, [r5, #0]
 800b16c:	e7b1      	b.n	800b0d2 <__sflush_r+0x1a>
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	e7ad      	b.n	800b0d4 <__sflush_r+0x1c>
 800b178:	690f      	ldr	r7, [r1, #16]
 800b17a:	2f00      	cmp	r7, #0
 800b17c:	d0a9      	beq.n	800b0d2 <__sflush_r+0x1a>
 800b17e:	0793      	lsls	r3, r2, #30
 800b180:	bf18      	it	ne
 800b182:	2300      	movne	r3, #0
 800b184:	680e      	ldr	r6, [r1, #0]
 800b186:	bf08      	it	eq
 800b188:	694b      	ldreq	r3, [r1, #20]
 800b18a:	eba6 0807 	sub.w	r8, r6, r7
 800b18e:	600f      	str	r7, [r1, #0]
 800b190:	608b      	str	r3, [r1, #8]
 800b192:	f1b8 0f00 	cmp.w	r8, #0
 800b196:	dd9c      	ble.n	800b0d2 <__sflush_r+0x1a>
 800b198:	4643      	mov	r3, r8
 800b19a:	463a      	mov	r2, r7
 800b19c:	4628      	mov	r0, r5
 800b19e:	6a21      	ldr	r1, [r4, #32]
 800b1a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b1a2:	47b0      	blx	r6
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	dc06      	bgt.n	800b1b6 <__sflush_r+0xfe>
 800b1a8:	89a3      	ldrh	r3, [r4, #12]
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b2:	81a3      	strh	r3, [r4, #12]
 800b1b4:	e78e      	b.n	800b0d4 <__sflush_r+0x1c>
 800b1b6:	4407      	add	r7, r0
 800b1b8:	eba8 0800 	sub.w	r8, r8, r0
 800b1bc:	e7e9      	b.n	800b192 <__sflush_r+0xda>
 800b1be:	bf00      	nop
 800b1c0:	20400001 	.word	0x20400001

0800b1c4 <_fflush_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	690b      	ldr	r3, [r1, #16]
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	b913      	cbnz	r3, 800b1d4 <_fflush_r+0x10>
 800b1ce:	2500      	movs	r5, #0
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	bd38      	pop	{r3, r4, r5, pc}
 800b1d4:	b118      	cbz	r0, 800b1de <_fflush_r+0x1a>
 800b1d6:	6983      	ldr	r3, [r0, #24]
 800b1d8:	b90b      	cbnz	r3, 800b1de <_fflush_r+0x1a>
 800b1da:	f000 f887 	bl	800b2ec <__sinit>
 800b1de:	4b14      	ldr	r3, [pc, #80]	; (800b230 <_fflush_r+0x6c>)
 800b1e0:	429c      	cmp	r4, r3
 800b1e2:	d11b      	bne.n	800b21c <_fflush_r+0x58>
 800b1e4:	686c      	ldr	r4, [r5, #4]
 800b1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0ef      	beq.n	800b1ce <_fflush_r+0xa>
 800b1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1f0:	07d0      	lsls	r0, r2, #31
 800b1f2:	d404      	bmi.n	800b1fe <_fflush_r+0x3a>
 800b1f4:	0599      	lsls	r1, r3, #22
 800b1f6:	d402      	bmi.n	800b1fe <_fflush_r+0x3a>
 800b1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1fa:	f000 f915 	bl	800b428 <__retarget_lock_acquire_recursive>
 800b1fe:	4628      	mov	r0, r5
 800b200:	4621      	mov	r1, r4
 800b202:	f7ff ff59 	bl	800b0b8 <__sflush_r>
 800b206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b208:	4605      	mov	r5, r0
 800b20a:	07da      	lsls	r2, r3, #31
 800b20c:	d4e0      	bmi.n	800b1d0 <_fflush_r+0xc>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	059b      	lsls	r3, r3, #22
 800b212:	d4dd      	bmi.n	800b1d0 <_fflush_r+0xc>
 800b214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b216:	f000 f908 	bl	800b42a <__retarget_lock_release_recursive>
 800b21a:	e7d9      	b.n	800b1d0 <_fflush_r+0xc>
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <_fflush_r+0x70>)
 800b21e:	429c      	cmp	r4, r3
 800b220:	d101      	bne.n	800b226 <_fflush_r+0x62>
 800b222:	68ac      	ldr	r4, [r5, #8]
 800b224:	e7df      	b.n	800b1e6 <_fflush_r+0x22>
 800b226:	4b04      	ldr	r3, [pc, #16]	; (800b238 <_fflush_r+0x74>)
 800b228:	429c      	cmp	r4, r3
 800b22a:	bf08      	it	eq
 800b22c:	68ec      	ldreq	r4, [r5, #12]
 800b22e:	e7da      	b.n	800b1e6 <_fflush_r+0x22>
 800b230:	0800c30c 	.word	0x0800c30c
 800b234:	0800c32c 	.word	0x0800c32c
 800b238:	0800c2ec 	.word	0x0800c2ec

0800b23c <std>:
 800b23c:	2300      	movs	r3, #0
 800b23e:	b510      	push	{r4, lr}
 800b240:	4604      	mov	r4, r0
 800b242:	e9c0 3300 	strd	r3, r3, [r0]
 800b246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b24a:	6083      	str	r3, [r0, #8]
 800b24c:	8181      	strh	r1, [r0, #12]
 800b24e:	6643      	str	r3, [r0, #100]	; 0x64
 800b250:	81c2      	strh	r2, [r0, #14]
 800b252:	6183      	str	r3, [r0, #24]
 800b254:	4619      	mov	r1, r3
 800b256:	2208      	movs	r2, #8
 800b258:	305c      	adds	r0, #92	; 0x5c
 800b25a:	f7fd facf 	bl	80087fc <memset>
 800b25e:	4b05      	ldr	r3, [pc, #20]	; (800b274 <std+0x38>)
 800b260:	6224      	str	r4, [r4, #32]
 800b262:	6263      	str	r3, [r4, #36]	; 0x24
 800b264:	4b04      	ldr	r3, [pc, #16]	; (800b278 <std+0x3c>)
 800b266:	62a3      	str	r3, [r4, #40]	; 0x28
 800b268:	4b04      	ldr	r3, [pc, #16]	; (800b27c <std+0x40>)
 800b26a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b26c:	4b04      	ldr	r3, [pc, #16]	; (800b280 <std+0x44>)
 800b26e:	6323      	str	r3, [r4, #48]	; 0x30
 800b270:	bd10      	pop	{r4, pc}
 800b272:	bf00      	nop
 800b274:	0800b58d 	.word	0x0800b58d
 800b278:	0800b5af 	.word	0x0800b5af
 800b27c:	0800b5e7 	.word	0x0800b5e7
 800b280:	0800b60b 	.word	0x0800b60b

0800b284 <_cleanup_r>:
 800b284:	4901      	ldr	r1, [pc, #4]	; (800b28c <_cleanup_r+0x8>)
 800b286:	f000 b8af 	b.w	800b3e8 <_fwalk_reent>
 800b28a:	bf00      	nop
 800b28c:	0800b1c5 	.word	0x0800b1c5

0800b290 <__sfmoreglue>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	2568      	movs	r5, #104	; 0x68
 800b294:	1e4a      	subs	r2, r1, #1
 800b296:	4355      	muls	r5, r2
 800b298:	460e      	mov	r6, r1
 800b29a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b29e:	f7ff fa89 	bl	800a7b4 <_malloc_r>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	b140      	cbz	r0, 800b2b8 <__sfmoreglue+0x28>
 800b2a6:	2100      	movs	r1, #0
 800b2a8:	e9c0 1600 	strd	r1, r6, [r0]
 800b2ac:	300c      	adds	r0, #12
 800b2ae:	60a0      	str	r0, [r4, #8]
 800b2b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2b4:	f7fd faa2 	bl	80087fc <memset>
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	bd70      	pop	{r4, r5, r6, pc}

0800b2bc <__sfp_lock_acquire>:
 800b2bc:	4801      	ldr	r0, [pc, #4]	; (800b2c4 <__sfp_lock_acquire+0x8>)
 800b2be:	f000 b8b3 	b.w	800b428 <__retarget_lock_acquire_recursive>
 800b2c2:	bf00      	nop
 800b2c4:	2000080c 	.word	0x2000080c

0800b2c8 <__sfp_lock_release>:
 800b2c8:	4801      	ldr	r0, [pc, #4]	; (800b2d0 <__sfp_lock_release+0x8>)
 800b2ca:	f000 b8ae 	b.w	800b42a <__retarget_lock_release_recursive>
 800b2ce:	bf00      	nop
 800b2d0:	2000080c 	.word	0x2000080c

0800b2d4 <__sinit_lock_acquire>:
 800b2d4:	4801      	ldr	r0, [pc, #4]	; (800b2dc <__sinit_lock_acquire+0x8>)
 800b2d6:	f000 b8a7 	b.w	800b428 <__retarget_lock_acquire_recursive>
 800b2da:	bf00      	nop
 800b2dc:	20000807 	.word	0x20000807

0800b2e0 <__sinit_lock_release>:
 800b2e0:	4801      	ldr	r0, [pc, #4]	; (800b2e8 <__sinit_lock_release+0x8>)
 800b2e2:	f000 b8a2 	b.w	800b42a <__retarget_lock_release_recursive>
 800b2e6:	bf00      	nop
 800b2e8:	20000807 	.word	0x20000807

0800b2ec <__sinit>:
 800b2ec:	b510      	push	{r4, lr}
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	f7ff fff0 	bl	800b2d4 <__sinit_lock_acquire>
 800b2f4:	69a3      	ldr	r3, [r4, #24]
 800b2f6:	b11b      	cbz	r3, 800b300 <__sinit+0x14>
 800b2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2fc:	f7ff bff0 	b.w	800b2e0 <__sinit_lock_release>
 800b300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b304:	6523      	str	r3, [r4, #80]	; 0x50
 800b306:	4b13      	ldr	r3, [pc, #76]	; (800b354 <__sinit+0x68>)
 800b308:	4a13      	ldr	r2, [pc, #76]	; (800b358 <__sinit+0x6c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b30e:	42a3      	cmp	r3, r4
 800b310:	bf08      	it	eq
 800b312:	2301      	moveq	r3, #1
 800b314:	4620      	mov	r0, r4
 800b316:	bf08      	it	eq
 800b318:	61a3      	streq	r3, [r4, #24]
 800b31a:	f000 f81f 	bl	800b35c <__sfp>
 800b31e:	6060      	str	r0, [r4, #4]
 800b320:	4620      	mov	r0, r4
 800b322:	f000 f81b 	bl	800b35c <__sfp>
 800b326:	60a0      	str	r0, [r4, #8]
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 f817 	bl	800b35c <__sfp>
 800b32e:	2200      	movs	r2, #0
 800b330:	2104      	movs	r1, #4
 800b332:	60e0      	str	r0, [r4, #12]
 800b334:	6860      	ldr	r0, [r4, #4]
 800b336:	f7ff ff81 	bl	800b23c <std>
 800b33a:	2201      	movs	r2, #1
 800b33c:	2109      	movs	r1, #9
 800b33e:	68a0      	ldr	r0, [r4, #8]
 800b340:	f7ff ff7c 	bl	800b23c <std>
 800b344:	2202      	movs	r2, #2
 800b346:	2112      	movs	r1, #18
 800b348:	68e0      	ldr	r0, [r4, #12]
 800b34a:	f7ff ff77 	bl	800b23c <std>
 800b34e:	2301      	movs	r3, #1
 800b350:	61a3      	str	r3, [r4, #24]
 800b352:	e7d1      	b.n	800b2f8 <__sinit+0xc>
 800b354:	0800bf40 	.word	0x0800bf40
 800b358:	0800b285 	.word	0x0800b285

0800b35c <__sfp>:
 800b35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b35e:	4607      	mov	r7, r0
 800b360:	f7ff ffac 	bl	800b2bc <__sfp_lock_acquire>
 800b364:	4b1e      	ldr	r3, [pc, #120]	; (800b3e0 <__sfp+0x84>)
 800b366:	681e      	ldr	r6, [r3, #0]
 800b368:	69b3      	ldr	r3, [r6, #24]
 800b36a:	b913      	cbnz	r3, 800b372 <__sfp+0x16>
 800b36c:	4630      	mov	r0, r6
 800b36e:	f7ff ffbd 	bl	800b2ec <__sinit>
 800b372:	3648      	adds	r6, #72	; 0x48
 800b374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b378:	3b01      	subs	r3, #1
 800b37a:	d503      	bpl.n	800b384 <__sfp+0x28>
 800b37c:	6833      	ldr	r3, [r6, #0]
 800b37e:	b30b      	cbz	r3, 800b3c4 <__sfp+0x68>
 800b380:	6836      	ldr	r6, [r6, #0]
 800b382:	e7f7      	b.n	800b374 <__sfp+0x18>
 800b384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b388:	b9d5      	cbnz	r5, 800b3c0 <__sfp+0x64>
 800b38a:	4b16      	ldr	r3, [pc, #88]	; (800b3e4 <__sfp+0x88>)
 800b38c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b390:	60e3      	str	r3, [r4, #12]
 800b392:	6665      	str	r5, [r4, #100]	; 0x64
 800b394:	f000 f847 	bl	800b426 <__retarget_lock_init_recursive>
 800b398:	f7ff ff96 	bl	800b2c8 <__sfp_lock_release>
 800b39c:	2208      	movs	r2, #8
 800b39e:	4629      	mov	r1, r5
 800b3a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b3a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b3a8:	6025      	str	r5, [r4, #0]
 800b3aa:	61a5      	str	r5, [r4, #24]
 800b3ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b3b0:	f7fd fa24 	bl	80087fc <memset>
 800b3b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b3b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b3bc:	4620      	mov	r0, r4
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	3468      	adds	r4, #104	; 0x68
 800b3c2:	e7d9      	b.n	800b378 <__sfp+0x1c>
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f7ff ff62 	bl	800b290 <__sfmoreglue>
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	6030      	str	r0, [r6, #0]
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	d1d5      	bne.n	800b380 <__sfp+0x24>
 800b3d4:	f7ff ff78 	bl	800b2c8 <__sfp_lock_release>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	e7ee      	b.n	800b3bc <__sfp+0x60>
 800b3de:	bf00      	nop
 800b3e0:	0800bf40 	.word	0x0800bf40
 800b3e4:	ffff0001 	.word	0xffff0001

0800b3e8 <_fwalk_reent>:
 800b3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	4688      	mov	r8, r1
 800b3f0:	2700      	movs	r7, #0
 800b3f2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b3f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b3fa:	f1b9 0901 	subs.w	r9, r9, #1
 800b3fe:	d505      	bpl.n	800b40c <_fwalk_reent+0x24>
 800b400:	6824      	ldr	r4, [r4, #0]
 800b402:	2c00      	cmp	r4, #0
 800b404:	d1f7      	bne.n	800b3f6 <_fwalk_reent+0xe>
 800b406:	4638      	mov	r0, r7
 800b408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b40c:	89ab      	ldrh	r3, [r5, #12]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d907      	bls.n	800b422 <_fwalk_reent+0x3a>
 800b412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b416:	3301      	adds	r3, #1
 800b418:	d003      	beq.n	800b422 <_fwalk_reent+0x3a>
 800b41a:	4629      	mov	r1, r5
 800b41c:	4630      	mov	r0, r6
 800b41e:	47c0      	blx	r8
 800b420:	4307      	orrs	r7, r0
 800b422:	3568      	adds	r5, #104	; 0x68
 800b424:	e7e9      	b.n	800b3fa <_fwalk_reent+0x12>

0800b426 <__retarget_lock_init_recursive>:
 800b426:	4770      	bx	lr

0800b428 <__retarget_lock_acquire_recursive>:
 800b428:	4770      	bx	lr

0800b42a <__retarget_lock_release_recursive>:
 800b42a:	4770      	bx	lr

0800b42c <__swhatbuf_r>:
 800b42c:	b570      	push	{r4, r5, r6, lr}
 800b42e:	460e      	mov	r6, r1
 800b430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b434:	4614      	mov	r4, r2
 800b436:	2900      	cmp	r1, #0
 800b438:	461d      	mov	r5, r3
 800b43a:	b096      	sub	sp, #88	; 0x58
 800b43c:	da07      	bge.n	800b44e <__swhatbuf_r+0x22>
 800b43e:	2300      	movs	r3, #0
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	89b3      	ldrh	r3, [r6, #12]
 800b444:	061a      	lsls	r2, r3, #24
 800b446:	d410      	bmi.n	800b46a <__swhatbuf_r+0x3e>
 800b448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b44c:	e00e      	b.n	800b46c <__swhatbuf_r+0x40>
 800b44e:	466a      	mov	r2, sp
 800b450:	f000 f902 	bl	800b658 <_fstat_r>
 800b454:	2800      	cmp	r0, #0
 800b456:	dbf2      	blt.n	800b43e <__swhatbuf_r+0x12>
 800b458:	9a01      	ldr	r2, [sp, #4]
 800b45a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b45e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b462:	425a      	negs	r2, r3
 800b464:	415a      	adcs	r2, r3
 800b466:	602a      	str	r2, [r5, #0]
 800b468:	e7ee      	b.n	800b448 <__swhatbuf_r+0x1c>
 800b46a:	2340      	movs	r3, #64	; 0x40
 800b46c:	2000      	movs	r0, #0
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	b016      	add	sp, #88	; 0x58
 800b472:	bd70      	pop	{r4, r5, r6, pc}

0800b474 <__smakebuf_r>:
 800b474:	898b      	ldrh	r3, [r1, #12]
 800b476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b478:	079d      	lsls	r5, r3, #30
 800b47a:	4606      	mov	r6, r0
 800b47c:	460c      	mov	r4, r1
 800b47e:	d507      	bpl.n	800b490 <__smakebuf_r+0x1c>
 800b480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b484:	6023      	str	r3, [r4, #0]
 800b486:	6123      	str	r3, [r4, #16]
 800b488:	2301      	movs	r3, #1
 800b48a:	6163      	str	r3, [r4, #20]
 800b48c:	b002      	add	sp, #8
 800b48e:	bd70      	pop	{r4, r5, r6, pc}
 800b490:	466a      	mov	r2, sp
 800b492:	ab01      	add	r3, sp, #4
 800b494:	f7ff ffca 	bl	800b42c <__swhatbuf_r>
 800b498:	9900      	ldr	r1, [sp, #0]
 800b49a:	4605      	mov	r5, r0
 800b49c:	4630      	mov	r0, r6
 800b49e:	f7ff f989 	bl	800a7b4 <_malloc_r>
 800b4a2:	b948      	cbnz	r0, 800b4b8 <__smakebuf_r+0x44>
 800b4a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4a8:	059a      	lsls	r2, r3, #22
 800b4aa:	d4ef      	bmi.n	800b48c <__smakebuf_r+0x18>
 800b4ac:	f023 0303 	bic.w	r3, r3, #3
 800b4b0:	f043 0302 	orr.w	r3, r3, #2
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	e7e3      	b.n	800b480 <__smakebuf_r+0xc>
 800b4b8:	4b0d      	ldr	r3, [pc, #52]	; (800b4f0 <__smakebuf_r+0x7c>)
 800b4ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	6020      	str	r0, [r4, #0]
 800b4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4c4:	81a3      	strh	r3, [r4, #12]
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	6120      	str	r0, [r4, #16]
 800b4ca:	6163      	str	r3, [r4, #20]
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	b15b      	cbz	r3, 800b4e8 <__smakebuf_r+0x74>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4d6:	f000 f8d1 	bl	800b67c <_isatty_r>
 800b4da:	b128      	cbz	r0, 800b4e8 <__smakebuf_r+0x74>
 800b4dc:	89a3      	ldrh	r3, [r4, #12]
 800b4de:	f023 0303 	bic.w	r3, r3, #3
 800b4e2:	f043 0301 	orr.w	r3, r3, #1
 800b4e6:	81a3      	strh	r3, [r4, #12]
 800b4e8:	89a0      	ldrh	r0, [r4, #12]
 800b4ea:	4305      	orrs	r5, r0
 800b4ec:	81a5      	strh	r5, [r4, #12]
 800b4ee:	e7cd      	b.n	800b48c <__smakebuf_r+0x18>
 800b4f0:	0800b285 	.word	0x0800b285

0800b4f4 <_malloc_usable_size_r>:
 800b4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4f8:	1f18      	subs	r0, r3, #4
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	bfbc      	itt	lt
 800b4fe:	580b      	ldrlt	r3, [r1, r0]
 800b500:	18c0      	addlt	r0, r0, r3
 800b502:	4770      	bx	lr

0800b504 <_raise_r>:
 800b504:	291f      	cmp	r1, #31
 800b506:	b538      	push	{r3, r4, r5, lr}
 800b508:	4604      	mov	r4, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	d904      	bls.n	800b518 <_raise_r+0x14>
 800b50e:	2316      	movs	r3, #22
 800b510:	6003      	str	r3, [r0, #0]
 800b512:	f04f 30ff 	mov.w	r0, #4294967295
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b51a:	b112      	cbz	r2, 800b522 <_raise_r+0x1e>
 800b51c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b520:	b94b      	cbnz	r3, 800b536 <_raise_r+0x32>
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f830 	bl	800b588 <_getpid_r>
 800b528:	462a      	mov	r2, r5
 800b52a:	4601      	mov	r1, r0
 800b52c:	4620      	mov	r0, r4
 800b52e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b532:	f000 b817 	b.w	800b564 <_kill_r>
 800b536:	2b01      	cmp	r3, #1
 800b538:	d00a      	beq.n	800b550 <_raise_r+0x4c>
 800b53a:	1c59      	adds	r1, r3, #1
 800b53c:	d103      	bne.n	800b546 <_raise_r+0x42>
 800b53e:	2316      	movs	r3, #22
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	2001      	movs	r0, #1
 800b544:	e7e7      	b.n	800b516 <_raise_r+0x12>
 800b546:	2400      	movs	r4, #0
 800b548:	4628      	mov	r0, r5
 800b54a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b54e:	4798      	blx	r3
 800b550:	2000      	movs	r0, #0
 800b552:	e7e0      	b.n	800b516 <_raise_r+0x12>

0800b554 <raise>:
 800b554:	4b02      	ldr	r3, [pc, #8]	; (800b560 <raise+0xc>)
 800b556:	4601      	mov	r1, r0
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	f7ff bfd3 	b.w	800b504 <_raise_r>
 800b55e:	bf00      	nop
 800b560:	2000000c 	.word	0x2000000c

0800b564 <_kill_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	2300      	movs	r3, #0
 800b568:	4d06      	ldr	r5, [pc, #24]	; (800b584 <_kill_r+0x20>)
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	602b      	str	r3, [r5, #0]
 800b572:	f7f9 f83c 	bl	80045ee <_kill>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	d102      	bne.n	800b580 <_kill_r+0x1c>
 800b57a:	682b      	ldr	r3, [r5, #0]
 800b57c:	b103      	cbz	r3, 800b580 <_kill_r+0x1c>
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	bd38      	pop	{r3, r4, r5, pc}
 800b582:	bf00      	nop
 800b584:	20000800 	.word	0x20000800

0800b588 <_getpid_r>:
 800b588:	f7f9 b82a 	b.w	80045e0 <_getpid>

0800b58c <__sread>:
 800b58c:	b510      	push	{r4, lr}
 800b58e:	460c      	mov	r4, r1
 800b590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b594:	f000 f894 	bl	800b6c0 <_read_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	bfab      	itete	ge
 800b59c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b59e:	89a3      	ldrhlt	r3, [r4, #12]
 800b5a0:	181b      	addge	r3, r3, r0
 800b5a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5a6:	bfac      	ite	ge
 800b5a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5aa:	81a3      	strhlt	r3, [r4, #12]
 800b5ac:	bd10      	pop	{r4, pc}

0800b5ae <__swrite>:
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	05db      	lsls	r3, r3, #23
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4616      	mov	r6, r2
 800b5be:	d505      	bpl.n	800b5cc <__swrite+0x1e>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c8:	f000 f868 	bl	800b69c <_lseek_r>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5d4:	81a3      	strh	r3, [r4, #12]
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	463b      	mov	r3, r7
 800b5da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	f000 b817 	b.w	800b614 <_write_r>

0800b5e6 <__sseek>:
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 f855 	bl	800b69c <_lseek_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	bf15      	itete	ne
 800b5f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b602:	81a3      	strheq	r3, [r4, #12]
 800b604:	bf18      	it	ne
 800b606:	81a3      	strhne	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__sclose>:
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 b813 	b.w	800b638 <_close_r>
	...

0800b614 <_write_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4604      	mov	r4, r0
 800b618:	4608      	mov	r0, r1
 800b61a:	4611      	mov	r1, r2
 800b61c:	2200      	movs	r2, #0
 800b61e:	4d05      	ldr	r5, [pc, #20]	; (800b634 <_write_r+0x20>)
 800b620:	602a      	str	r2, [r5, #0]
 800b622:	461a      	mov	r2, r3
 800b624:	f7f9 f81a 	bl	800465c <_write>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_write_r+0x1e>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_write_r+0x1e>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20000800 	.word	0x20000800

0800b638 <_close_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	2300      	movs	r3, #0
 800b63c:	4d05      	ldr	r5, [pc, #20]	; (800b654 <_close_r+0x1c>)
 800b63e:	4604      	mov	r4, r0
 800b640:	4608      	mov	r0, r1
 800b642:	602b      	str	r3, [r5, #0]
 800b644:	f7f9 f826 	bl	8004694 <_close>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_close_r+0x1a>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_close_r+0x1a>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	20000800 	.word	0x20000800

0800b658 <_fstat_r>:
 800b658:	b538      	push	{r3, r4, r5, lr}
 800b65a:	2300      	movs	r3, #0
 800b65c:	4d06      	ldr	r5, [pc, #24]	; (800b678 <_fstat_r+0x20>)
 800b65e:	4604      	mov	r4, r0
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	f7f9 f820 	bl	80046aa <_fstat>
 800b66a:	1c43      	adds	r3, r0, #1
 800b66c:	d102      	bne.n	800b674 <_fstat_r+0x1c>
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	b103      	cbz	r3, 800b674 <_fstat_r+0x1c>
 800b672:	6023      	str	r3, [r4, #0]
 800b674:	bd38      	pop	{r3, r4, r5, pc}
 800b676:	bf00      	nop
 800b678:	20000800 	.word	0x20000800

0800b67c <_isatty_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	2300      	movs	r3, #0
 800b680:	4d05      	ldr	r5, [pc, #20]	; (800b698 <_isatty_r+0x1c>)
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f9 f81e 	bl	80046c8 <_isatty>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_isatty_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_isatty_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20000800 	.word	0x20000800

0800b69c <_lseek_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4d05      	ldr	r5, [pc, #20]	; (800b6bc <_lseek_r+0x20>)
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f9 f816 	bl	80046dc <_lseek>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_lseek_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_lseek_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20000800 	.word	0x20000800

0800b6c0 <_read_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4d05      	ldr	r5, [pc, #20]	; (800b6e0 <_read_r+0x20>)
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f8 ffa7 	bl	8004622 <_read>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_read_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_read_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000800 	.word	0x20000800

0800b6e4 <atan2>:
 800b6e4:	f000 b82c 	b.w	800b740 <__ieee754_atan2>

0800b6e8 <sqrt>:
 800b6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ea:	4606      	mov	r6, r0
 800b6ec:	460f      	mov	r7, r1
 800b6ee:	f000 f8f9 	bl	800b8e4 <__ieee754_sqrt>
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <sqrt+0x54>)
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	f993 3000 	ldrsb.w	r3, [r3]
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	d019      	beq.n	800b734 <sqrt+0x4c>
 800b700:	4632      	mov	r2, r6
 800b702:	463b      	mov	r3, r7
 800b704:	4630      	mov	r0, r6
 800b706:	4639      	mov	r1, r7
 800b708:	f7f5 f98a 	bl	8000a20 <__aeabi_dcmpun>
 800b70c:	b990      	cbnz	r0, 800b734 <sqrt+0x4c>
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	4630      	mov	r0, r6
 800b714:	4639      	mov	r1, r7
 800b716:	f7f5 f95b 	bl	80009d0 <__aeabi_dcmplt>
 800b71a:	b158      	cbz	r0, 800b734 <sqrt+0x4c>
 800b71c:	f7fd f82a 	bl	8008774 <__errno>
 800b720:	2321      	movs	r3, #33	; 0x21
 800b722:	2200      	movs	r2, #0
 800b724:	6003      	str	r3, [r0, #0]
 800b726:	2300      	movs	r3, #0
 800b728:	4610      	mov	r0, r2
 800b72a:	4619      	mov	r1, r3
 800b72c:	f7f5 f808 	bl	8000740 <__aeabi_ddiv>
 800b730:	4604      	mov	r4, r0
 800b732:	460d      	mov	r5, r1
 800b734:	4620      	mov	r0, r4
 800b736:	4629      	mov	r1, r5
 800b738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200001dc 	.word	0x200001dc

0800b740 <__ieee754_atan2>:
 800b740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	4692      	mov	sl, r2
 800b746:	4699      	mov	r9, r3
 800b748:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b74c:	461f      	mov	r7, r3
 800b74e:	f1ca 0300 	rsb	r3, sl, #0
 800b752:	f8df e18c 	ldr.w	lr, [pc, #396]	; 800b8e0 <__ieee754_atan2+0x1a0>
 800b756:	ea43 030a 	orr.w	r3, r3, sl
 800b75a:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b75e:	4573      	cmp	r3, lr
 800b760:	4604      	mov	r4, r0
 800b762:	460d      	mov	r5, r1
 800b764:	d808      	bhi.n	800b778 <__ieee754_atan2+0x38>
 800b766:	4246      	negs	r6, r0
 800b768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b76c:	4306      	orrs	r6, r0
 800b76e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800b772:	4576      	cmp	r6, lr
 800b774:	468c      	mov	ip, r1
 800b776:	d908      	bls.n	800b78a <__ieee754_atan2+0x4a>
 800b778:	4652      	mov	r2, sl
 800b77a:	464b      	mov	r3, r9
 800b77c:	4620      	mov	r0, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	f7f4 fcfe 	bl	8000180 <__adddf3>
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	e019      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b78a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800b78e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b792:	ea56 060a 	orrs.w	r6, r6, sl
 800b796:	d103      	bne.n	800b7a0 <__ieee754_atan2+0x60>
 800b798:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	f000 b950 	b.w	800ba40 <atan>
 800b7a0:	17be      	asrs	r6, r7, #30
 800b7a2:	f006 0602 	and.w	r6, r6, #2
 800b7a6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b7aa:	ea53 0100 	orrs.w	r1, r3, r0
 800b7ae:	d10a      	bne.n	800b7c6 <__ieee754_atan2+0x86>
 800b7b0:	2e02      	cmp	r6, #2
 800b7b2:	d067      	beq.n	800b884 <__ieee754_atan2+0x144>
 800b7b4:	2e03      	cmp	r6, #3
 800b7b6:	d102      	bne.n	800b7be <__ieee754_atan2+0x7e>
 800b7b8:	a53b      	add	r5, pc, #236	; (adr r5, 800b8a8 <__ieee754_atan2+0x168>)
 800b7ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7c6:	ea52 010a 	orrs.w	r1, r2, sl
 800b7ca:	d106      	bne.n	800b7da <__ieee754_atan2+0x9a>
 800b7cc:	f1bc 0f00 	cmp.w	ip, #0
 800b7d0:	da63      	bge.n	800b89a <__ieee754_atan2+0x15a>
 800b7d2:	a537      	add	r5, pc, #220	; (adr r5, 800b8b0 <__ieee754_atan2+0x170>)
 800b7d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b7d8:	e7f1      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b7da:	4572      	cmp	r2, lr
 800b7dc:	d10f      	bne.n	800b7fe <__ieee754_atan2+0xbe>
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	f106 36ff 	add.w	r6, r6, #4294967295
 800b7e4:	d107      	bne.n	800b7f6 <__ieee754_atan2+0xb6>
 800b7e6:	2e02      	cmp	r6, #2
 800b7e8:	d850      	bhi.n	800b88c <__ieee754_atan2+0x14c>
 800b7ea:	4b3b      	ldr	r3, [pc, #236]	; (800b8d8 <__ieee754_atan2+0x198>)
 800b7ec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b7f0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800b7f4:	e7e3      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b7f6:	2e02      	cmp	r6, #2
 800b7f8:	d84c      	bhi.n	800b894 <__ieee754_atan2+0x154>
 800b7fa:	4b38      	ldr	r3, [pc, #224]	; (800b8dc <__ieee754_atan2+0x19c>)
 800b7fc:	e7f6      	b.n	800b7ec <__ieee754_atan2+0xac>
 800b7fe:	4573      	cmp	r3, lr
 800b800:	d0e4      	beq.n	800b7cc <__ieee754_atan2+0x8c>
 800b802:	1a9b      	subs	r3, r3, r2
 800b804:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b808:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b80c:	da20      	bge.n	800b850 <__ieee754_atan2+0x110>
 800b80e:	2f00      	cmp	r7, #0
 800b810:	da01      	bge.n	800b816 <__ieee754_atan2+0xd6>
 800b812:	323c      	adds	r2, #60	; 0x3c
 800b814:	db20      	blt.n	800b858 <__ieee754_atan2+0x118>
 800b816:	4652      	mov	r2, sl
 800b818:	464b      	mov	r3, r9
 800b81a:	4620      	mov	r0, r4
 800b81c:	4629      	mov	r1, r5
 800b81e:	f7f4 ff8f 	bl	8000740 <__aeabi_ddiv>
 800b822:	f000 fa97 	bl	800bd54 <fabs>
 800b826:	f000 f90b 	bl	800ba40 <atan>
 800b82a:	4604      	mov	r4, r0
 800b82c:	460d      	mov	r5, r1
 800b82e:	2e01      	cmp	r6, #1
 800b830:	d015      	beq.n	800b85e <__ieee754_atan2+0x11e>
 800b832:	2e02      	cmp	r6, #2
 800b834:	d017      	beq.n	800b866 <__ieee754_atan2+0x126>
 800b836:	2e00      	cmp	r6, #0
 800b838:	d0c1      	beq.n	800b7be <__ieee754_atan2+0x7e>
 800b83a:	a31f      	add	r3, pc, #124	; (adr r3, 800b8b8 <__ieee754_atan2+0x178>)
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	4620      	mov	r0, r4
 800b842:	4629      	mov	r1, r5
 800b844:	f7f4 fc9a 	bl	800017c <__aeabi_dsub>
 800b848:	a31d      	add	r3, pc, #116	; (adr r3, 800b8c0 <__ieee754_atan2+0x180>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	e016      	b.n	800b87e <__ieee754_atan2+0x13e>
 800b850:	a51d      	add	r5, pc, #116	; (adr r5, 800b8c8 <__ieee754_atan2+0x188>)
 800b852:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b856:	e7ea      	b.n	800b82e <__ieee754_atan2+0xee>
 800b858:	2400      	movs	r4, #0
 800b85a:	2500      	movs	r5, #0
 800b85c:	e7e7      	b.n	800b82e <__ieee754_atan2+0xee>
 800b85e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b862:	461d      	mov	r5, r3
 800b864:	e7ab      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b866:	a314      	add	r3, pc, #80	; (adr r3, 800b8b8 <__ieee754_atan2+0x178>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f4 fc84 	bl	800017c <__aeabi_dsub>
 800b874:	4602      	mov	r2, r0
 800b876:	460b      	mov	r3, r1
 800b878:	a111      	add	r1, pc, #68	; (adr r1, 800b8c0 <__ieee754_atan2+0x180>)
 800b87a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87e:	f7f4 fc7d 	bl	800017c <__aeabi_dsub>
 800b882:	e77f      	b.n	800b784 <__ieee754_atan2+0x44>
 800b884:	a50e      	add	r5, pc, #56	; (adr r5, 800b8c0 <__ieee754_atan2+0x180>)
 800b886:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b88a:	e798      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b88c:	a510      	add	r5, pc, #64	; (adr r5, 800b8d0 <__ieee754_atan2+0x190>)
 800b88e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b892:	e794      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b894:	2400      	movs	r4, #0
 800b896:	2500      	movs	r5, #0
 800b898:	e791      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b89a:	a50b      	add	r5, pc, #44	; (adr r5, 800b8c8 <__ieee754_atan2+0x188>)
 800b89c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b8a0:	e78d      	b.n	800b7be <__ieee754_atan2+0x7e>
 800b8a2:	bf00      	nop
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	54442d18 	.word	0x54442d18
 800b8ac:	c00921fb 	.word	0xc00921fb
 800b8b0:	54442d18 	.word	0x54442d18
 800b8b4:	bff921fb 	.word	0xbff921fb
 800b8b8:	33145c07 	.word	0x33145c07
 800b8bc:	3ca1a626 	.word	0x3ca1a626
 800b8c0:	54442d18 	.word	0x54442d18
 800b8c4:	400921fb 	.word	0x400921fb
 800b8c8:	54442d18 	.word	0x54442d18
 800b8cc:	3ff921fb 	.word	0x3ff921fb
 800b8d0:	54442d18 	.word	0x54442d18
 800b8d4:	3fe921fb 	.word	0x3fe921fb
 800b8d8:	0800c350 	.word	0x0800c350
 800b8dc:	0800c368 	.word	0x0800c368
 800b8e0:	7ff00000 	.word	0x7ff00000

0800b8e4 <__ieee754_sqrt>:
 800b8e4:	f8df c150 	ldr.w	ip, [pc, #336]	; 800ba38 <__ieee754_sqrt+0x154>
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	ea3c 0c01 	bics.w	ip, ip, r1
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	460a      	mov	r2, r1
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	d10e      	bne.n	800b91c <__ieee754_sqrt+0x38>
 800b8fe:	4602      	mov	r2, r0
 800b900:	f7f4 fdf4 	bl	80004ec <__aeabi_dmul>
 800b904:	4602      	mov	r2, r0
 800b906:	460b      	mov	r3, r1
 800b908:	4630      	mov	r0, r6
 800b90a:	4629      	mov	r1, r5
 800b90c:	f7f4 fc38 	bl	8000180 <__adddf3>
 800b910:	4606      	mov	r6, r0
 800b912:	460d      	mov	r5, r1
 800b914:	4630      	mov	r0, r6
 800b916:	4629      	mov	r1, r5
 800b918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91c:	2900      	cmp	r1, #0
 800b91e:	dc0d      	bgt.n	800b93c <__ieee754_sqrt+0x58>
 800b920:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b924:	ea5c 0707 	orrs.w	r7, ip, r7
 800b928:	d0f4      	beq.n	800b914 <__ieee754_sqrt+0x30>
 800b92a:	b139      	cbz	r1, 800b93c <__ieee754_sqrt+0x58>
 800b92c:	4602      	mov	r2, r0
 800b92e:	f7f4 fc25 	bl	800017c <__aeabi_dsub>
 800b932:	4602      	mov	r2, r0
 800b934:	460b      	mov	r3, r1
 800b936:	f7f4 ff03 	bl	8000740 <__aeabi_ddiv>
 800b93a:	e7e9      	b.n	800b910 <__ieee754_sqrt+0x2c>
 800b93c:	1512      	asrs	r2, r2, #20
 800b93e:	d074      	beq.n	800ba2a <__ieee754_sqrt+0x146>
 800b940:	2000      	movs	r0, #0
 800b942:	07d5      	lsls	r5, r2, #31
 800b944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b948:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 800b94c:	bf5e      	ittt	pl
 800b94e:	0fe3      	lsrpl	r3, r4, #31
 800b950:	0064      	lslpl	r4, r4, #1
 800b952:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800b956:	0fe3      	lsrs	r3, r4, #31
 800b958:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b95c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800b960:	2516      	movs	r5, #22
 800b962:	4601      	mov	r1, r0
 800b964:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b968:	1076      	asrs	r6, r6, #1
 800b96a:	0064      	lsls	r4, r4, #1
 800b96c:	188f      	adds	r7, r1, r2
 800b96e:	429f      	cmp	r7, r3
 800b970:	bfde      	ittt	le
 800b972:	1bdb      	suble	r3, r3, r7
 800b974:	18b9      	addle	r1, r7, r2
 800b976:	1880      	addle	r0, r0, r2
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	3d01      	subs	r5, #1
 800b97c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b980:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b984:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b988:	d1f0      	bne.n	800b96c <__ieee754_sqrt+0x88>
 800b98a:	462a      	mov	r2, r5
 800b98c:	f04f 0e20 	mov.w	lr, #32
 800b990:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800b994:	428b      	cmp	r3, r1
 800b996:	eb07 0c05 	add.w	ip, r7, r5
 800b99a:	dc02      	bgt.n	800b9a2 <__ieee754_sqrt+0xbe>
 800b99c:	d113      	bne.n	800b9c6 <__ieee754_sqrt+0xe2>
 800b99e:	45a4      	cmp	ip, r4
 800b9a0:	d811      	bhi.n	800b9c6 <__ieee754_sqrt+0xe2>
 800b9a2:	f1bc 0f00 	cmp.w	ip, #0
 800b9a6:	eb0c 0507 	add.w	r5, ip, r7
 800b9aa:	da43      	bge.n	800ba34 <__ieee754_sqrt+0x150>
 800b9ac:	2d00      	cmp	r5, #0
 800b9ae:	db41      	blt.n	800ba34 <__ieee754_sqrt+0x150>
 800b9b0:	f101 0801 	add.w	r8, r1, #1
 800b9b4:	1a5b      	subs	r3, r3, r1
 800b9b6:	4641      	mov	r1, r8
 800b9b8:	45a4      	cmp	ip, r4
 800b9ba:	bf88      	it	hi
 800b9bc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b9c0:	eba4 040c 	sub.w	r4, r4, ip
 800b9c4:	443a      	add	r2, r7
 800b9c6:	005b      	lsls	r3, r3, #1
 800b9c8:	f1be 0e01 	subs.w	lr, lr, #1
 800b9cc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b9d0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800b9d4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b9d8:	d1dc      	bne.n	800b994 <__ieee754_sqrt+0xb0>
 800b9da:	4323      	orrs	r3, r4
 800b9dc:	d006      	beq.n	800b9ec <__ieee754_sqrt+0x108>
 800b9de:	1c54      	adds	r4, r2, #1
 800b9e0:	bf0b      	itete	eq
 800b9e2:	4672      	moveq	r2, lr
 800b9e4:	3201      	addne	r2, #1
 800b9e6:	3001      	addeq	r0, #1
 800b9e8:	f022 0201 	bicne.w	r2, r2, #1
 800b9ec:	1043      	asrs	r3, r0, #1
 800b9ee:	07c1      	lsls	r1, r0, #31
 800b9f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b9f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b9f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b9fc:	bf48      	it	mi
 800b9fe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ba02:	4610      	mov	r0, r2
 800ba04:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 800ba08:	e782      	b.n	800b910 <__ieee754_sqrt+0x2c>
 800ba0a:	0ae3      	lsrs	r3, r4, #11
 800ba0c:	3915      	subs	r1, #21
 800ba0e:	0564      	lsls	r4, r4, #21
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d0fa      	beq.n	800ba0a <__ieee754_sqrt+0x126>
 800ba14:	02de      	lsls	r6, r3, #11
 800ba16:	d50a      	bpl.n	800ba2e <__ieee754_sqrt+0x14a>
 800ba18:	f1c2 0020 	rsb	r0, r2, #32
 800ba1c:	fa24 f000 	lsr.w	r0, r4, r0
 800ba20:	1e55      	subs	r5, r2, #1
 800ba22:	4094      	lsls	r4, r2
 800ba24:	4303      	orrs	r3, r0
 800ba26:	1b4a      	subs	r2, r1, r5
 800ba28:	e78a      	b.n	800b940 <__ieee754_sqrt+0x5c>
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	e7f0      	b.n	800ba10 <__ieee754_sqrt+0x12c>
 800ba2e:	005b      	lsls	r3, r3, #1
 800ba30:	3201      	adds	r2, #1
 800ba32:	e7ef      	b.n	800ba14 <__ieee754_sqrt+0x130>
 800ba34:	4688      	mov	r8, r1
 800ba36:	e7bd      	b.n	800b9b4 <__ieee754_sqrt+0xd0>
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	00000000 	.word	0x00000000

0800ba40 <atan>:
 800ba40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	4bb6      	ldr	r3, [pc, #728]	; (800bd20 <atan+0x2e0>)
 800ba46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ba4a:	429e      	cmp	r6, r3
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	468b      	mov	fp, r1
 800ba52:	dd17      	ble.n	800ba84 <atan+0x44>
 800ba54:	4bb3      	ldr	r3, [pc, #716]	; (800bd24 <atan+0x2e4>)
 800ba56:	429e      	cmp	r6, r3
 800ba58:	dc01      	bgt.n	800ba5e <atan+0x1e>
 800ba5a:	d109      	bne.n	800ba70 <atan+0x30>
 800ba5c:	b140      	cbz	r0, 800ba70 <atan+0x30>
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7f4 fb8b 	bl	8000180 <__adddf3>
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	460d      	mov	r5, r1
 800ba6e:	e005      	b.n	800ba7c <atan+0x3c>
 800ba70:	f1bb 0f00 	cmp.w	fp, #0
 800ba74:	4cac      	ldr	r4, [pc, #688]	; (800bd28 <atan+0x2e8>)
 800ba76:	f300 8121 	bgt.w	800bcbc <atan+0x27c>
 800ba7a:	4dac      	ldr	r5, [pc, #688]	; (800bd2c <atan+0x2ec>)
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba84:	4baa      	ldr	r3, [pc, #680]	; (800bd30 <atan+0x2f0>)
 800ba86:	429e      	cmp	r6, r3
 800ba88:	dc11      	bgt.n	800baae <atan+0x6e>
 800ba8a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ba8e:	429e      	cmp	r6, r3
 800ba90:	dc0a      	bgt.n	800baa8 <atan+0x68>
 800ba92:	a38b      	add	r3, pc, #556	; (adr r3, 800bcc0 <atan+0x280>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fb72 	bl	8000180 <__adddf3>
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	4ba5      	ldr	r3, [pc, #660]	; (800bd34 <atan+0x2f4>)
 800baa0:	f7f4 ffb4 	bl	8000a0c <__aeabi_dcmpgt>
 800baa4:	2800      	cmp	r0, #0
 800baa6:	d1e9      	bne.n	800ba7c <atan+0x3c>
 800baa8:	f04f 3aff 	mov.w	sl, #4294967295
 800baac:	e027      	b.n	800bafe <atan+0xbe>
 800baae:	f000 f951 	bl	800bd54 <fabs>
 800bab2:	4ba1      	ldr	r3, [pc, #644]	; (800bd38 <atan+0x2f8>)
 800bab4:	4604      	mov	r4, r0
 800bab6:	429e      	cmp	r6, r3
 800bab8:	460d      	mov	r5, r1
 800baba:	f300 80b8 	bgt.w	800bc2e <atan+0x1ee>
 800babe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bac2:	429e      	cmp	r6, r3
 800bac4:	f300 809c 	bgt.w	800bc00 <atan+0x1c0>
 800bac8:	4602      	mov	r2, r0
 800baca:	460b      	mov	r3, r1
 800bacc:	f7f4 fb58 	bl	8000180 <__adddf3>
 800bad0:	2200      	movs	r2, #0
 800bad2:	4b98      	ldr	r3, [pc, #608]	; (800bd34 <atan+0x2f4>)
 800bad4:	f7f4 fb52 	bl	800017c <__aeabi_dsub>
 800bad8:	2200      	movs	r2, #0
 800bada:	4606      	mov	r6, r0
 800badc:	460f      	mov	r7, r1
 800bade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bae2:	4620      	mov	r0, r4
 800bae4:	4629      	mov	r1, r5
 800bae6:	f7f4 fb4b 	bl	8000180 <__adddf3>
 800baea:	4602      	mov	r2, r0
 800baec:	460b      	mov	r3, r1
 800baee:	4630      	mov	r0, r6
 800baf0:	4639      	mov	r1, r7
 800baf2:	f7f4 fe25 	bl	8000740 <__aeabi_ddiv>
 800baf6:	f04f 0a00 	mov.w	sl, #0
 800bafa:	4604      	mov	r4, r0
 800bafc:	460d      	mov	r5, r1
 800bafe:	4622      	mov	r2, r4
 800bb00:	462b      	mov	r3, r5
 800bb02:	4620      	mov	r0, r4
 800bb04:	4629      	mov	r1, r5
 800bb06:	f7f4 fcf1 	bl	80004ec <__aeabi_dmul>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4680      	mov	r8, r0
 800bb10:	4689      	mov	r9, r1
 800bb12:	f7f4 fceb 	bl	80004ec <__aeabi_dmul>
 800bb16:	a36c      	add	r3, pc, #432	; (adr r3, 800bcc8 <atan+0x288>)
 800bb18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1c:	4606      	mov	r6, r0
 800bb1e:	460f      	mov	r7, r1
 800bb20:	f7f4 fce4 	bl	80004ec <__aeabi_dmul>
 800bb24:	a36a      	add	r3, pc, #424	; (adr r3, 800bcd0 <atan+0x290>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	f7f4 fb29 	bl	8000180 <__adddf3>
 800bb2e:	4632      	mov	r2, r6
 800bb30:	463b      	mov	r3, r7
 800bb32:	f7f4 fcdb 	bl	80004ec <__aeabi_dmul>
 800bb36:	a368      	add	r3, pc, #416	; (adr r3, 800bcd8 <atan+0x298>)
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fb20 	bl	8000180 <__adddf3>
 800bb40:	4632      	mov	r2, r6
 800bb42:	463b      	mov	r3, r7
 800bb44:	f7f4 fcd2 	bl	80004ec <__aeabi_dmul>
 800bb48:	a365      	add	r3, pc, #404	; (adr r3, 800bce0 <atan+0x2a0>)
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fb17 	bl	8000180 <__adddf3>
 800bb52:	4632      	mov	r2, r6
 800bb54:	463b      	mov	r3, r7
 800bb56:	f7f4 fcc9 	bl	80004ec <__aeabi_dmul>
 800bb5a:	a363      	add	r3, pc, #396	; (adr r3, 800bce8 <atan+0x2a8>)
 800bb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb60:	f7f4 fb0e 	bl	8000180 <__adddf3>
 800bb64:	4632      	mov	r2, r6
 800bb66:	463b      	mov	r3, r7
 800bb68:	f7f4 fcc0 	bl	80004ec <__aeabi_dmul>
 800bb6c:	a360      	add	r3, pc, #384	; (adr r3, 800bcf0 <atan+0x2b0>)
 800bb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb72:	f7f4 fb05 	bl	8000180 <__adddf3>
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	f7f4 fcb7 	bl	80004ec <__aeabi_dmul>
 800bb7e:	a35e      	add	r3, pc, #376	; (adr r3, 800bcf8 <atan+0x2b8>)
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	4680      	mov	r8, r0
 800bb86:	4689      	mov	r9, r1
 800bb88:	4630      	mov	r0, r6
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fcae 	bl	80004ec <__aeabi_dmul>
 800bb90:	a35b      	add	r3, pc, #364	; (adr r3, 800bd00 <atan+0x2c0>)
 800bb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb96:	f7f4 faf1 	bl	800017c <__aeabi_dsub>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fca5 	bl	80004ec <__aeabi_dmul>
 800bba2:	a359      	add	r3, pc, #356	; (adr r3, 800bd08 <atan+0x2c8>)
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	f7f4 fae8 	bl	800017c <__aeabi_dsub>
 800bbac:	4632      	mov	r2, r6
 800bbae:	463b      	mov	r3, r7
 800bbb0:	f7f4 fc9c 	bl	80004ec <__aeabi_dmul>
 800bbb4:	a356      	add	r3, pc, #344	; (adr r3, 800bd10 <atan+0x2d0>)
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f7f4 fadf 	bl	800017c <__aeabi_dsub>
 800bbbe:	4632      	mov	r2, r6
 800bbc0:	463b      	mov	r3, r7
 800bbc2:	f7f4 fc93 	bl	80004ec <__aeabi_dmul>
 800bbc6:	a354      	add	r3, pc, #336	; (adr r3, 800bd18 <atan+0x2d8>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fad6 	bl	800017c <__aeabi_dsub>
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	463b      	mov	r3, r7
 800bbd4:	f7f4 fc8a 	bl	80004ec <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 face 	bl	8000180 <__adddf3>
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	f7f4 fc80 	bl	80004ec <__aeabi_dmul>
 800bbec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	d144      	bne.n	800bc80 <atan+0x240>
 800bbf6:	4620      	mov	r0, r4
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	f7f4 fabf 	bl	800017c <__aeabi_dsub>
 800bbfe:	e734      	b.n	800ba6a <atan+0x2a>
 800bc00:	2200      	movs	r2, #0
 800bc02:	4b4c      	ldr	r3, [pc, #304]	; (800bd34 <atan+0x2f4>)
 800bc04:	f7f4 faba 	bl	800017c <__aeabi_dsub>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	4b48      	ldr	r3, [pc, #288]	; (800bd34 <atan+0x2f4>)
 800bc14:	f7f4 fab4 	bl	8000180 <__adddf3>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	4639      	mov	r1, r7
 800bc20:	f7f4 fd8e 	bl	8000740 <__aeabi_ddiv>
 800bc24:	f04f 0a01 	mov.w	sl, #1
 800bc28:	4604      	mov	r4, r0
 800bc2a:	460d      	mov	r5, r1
 800bc2c:	e767      	b.n	800bafe <atan+0xbe>
 800bc2e:	4b43      	ldr	r3, [pc, #268]	; (800bd3c <atan+0x2fc>)
 800bc30:	429e      	cmp	r6, r3
 800bc32:	da1a      	bge.n	800bc6a <atan+0x22a>
 800bc34:	2200      	movs	r2, #0
 800bc36:	4b42      	ldr	r3, [pc, #264]	; (800bd40 <atan+0x300>)
 800bc38:	f7f4 faa0 	bl	800017c <__aeabi_dsub>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	4620      	mov	r0, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	4b3e      	ldr	r3, [pc, #248]	; (800bd40 <atan+0x300>)
 800bc48:	f7f4 fc50 	bl	80004ec <__aeabi_dmul>
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	4b39      	ldr	r3, [pc, #228]	; (800bd34 <atan+0x2f4>)
 800bc50:	f7f4 fa96 	bl	8000180 <__adddf3>
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4630      	mov	r0, r6
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	f7f4 fd70 	bl	8000740 <__aeabi_ddiv>
 800bc60:	f04f 0a02 	mov.w	sl, #2
 800bc64:	4604      	mov	r4, r0
 800bc66:	460d      	mov	r5, r1
 800bc68:	e749      	b.n	800bafe <atan+0xbe>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	2000      	movs	r0, #0
 800bc70:	4934      	ldr	r1, [pc, #208]	; (800bd44 <atan+0x304>)
 800bc72:	f7f4 fd65 	bl	8000740 <__aeabi_ddiv>
 800bc76:	f04f 0a03 	mov.w	sl, #3
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	460d      	mov	r5, r1
 800bc7e:	e73e      	b.n	800bafe <atan+0xbe>
 800bc80:	4b31      	ldr	r3, [pc, #196]	; (800bd48 <atan+0x308>)
 800bc82:	4e32      	ldr	r6, [pc, #200]	; (800bd4c <atan+0x30c>)
 800bc84:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800bc88:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800bc8c:	e9da 2300 	ldrd	r2, r3, [sl]
 800bc90:	f7f4 fa74 	bl	800017c <__aeabi_dsub>
 800bc94:	4622      	mov	r2, r4
 800bc96:	462b      	mov	r3, r5
 800bc98:	f7f4 fa70 	bl	800017c <__aeabi_dsub>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bca4:	f7f4 fa6a 	bl	800017c <__aeabi_dsub>
 800bca8:	f1bb 0f00 	cmp.w	fp, #0
 800bcac:	4604      	mov	r4, r0
 800bcae:	460d      	mov	r5, r1
 800bcb0:	f6bf aee4 	bge.w	800ba7c <atan+0x3c>
 800bcb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcb8:	461d      	mov	r5, r3
 800bcba:	e6df      	b.n	800ba7c <atan+0x3c>
 800bcbc:	4d24      	ldr	r5, [pc, #144]	; (800bd50 <atan+0x310>)
 800bcbe:	e6dd      	b.n	800ba7c <atan+0x3c>
 800bcc0:	8800759c 	.word	0x8800759c
 800bcc4:	7e37e43c 	.word	0x7e37e43c
 800bcc8:	e322da11 	.word	0xe322da11
 800bccc:	3f90ad3a 	.word	0x3f90ad3a
 800bcd0:	24760deb 	.word	0x24760deb
 800bcd4:	3fa97b4b 	.word	0x3fa97b4b
 800bcd8:	a0d03d51 	.word	0xa0d03d51
 800bcdc:	3fb10d66 	.word	0x3fb10d66
 800bce0:	c54c206e 	.word	0xc54c206e
 800bce4:	3fb745cd 	.word	0x3fb745cd
 800bce8:	920083ff 	.word	0x920083ff
 800bcec:	3fc24924 	.word	0x3fc24924
 800bcf0:	5555550d 	.word	0x5555550d
 800bcf4:	3fd55555 	.word	0x3fd55555
 800bcf8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bcfc:	bfa2b444 	.word	0xbfa2b444
 800bd00:	52defd9a 	.word	0x52defd9a
 800bd04:	3fadde2d 	.word	0x3fadde2d
 800bd08:	af749a6d 	.word	0xaf749a6d
 800bd0c:	3fb3b0f2 	.word	0x3fb3b0f2
 800bd10:	fe231671 	.word	0xfe231671
 800bd14:	3fbc71c6 	.word	0x3fbc71c6
 800bd18:	9998ebc4 	.word	0x9998ebc4
 800bd1c:	3fc99999 	.word	0x3fc99999
 800bd20:	440fffff 	.word	0x440fffff
 800bd24:	7ff00000 	.word	0x7ff00000
 800bd28:	54442d18 	.word	0x54442d18
 800bd2c:	bff921fb 	.word	0xbff921fb
 800bd30:	3fdbffff 	.word	0x3fdbffff
 800bd34:	3ff00000 	.word	0x3ff00000
 800bd38:	3ff2ffff 	.word	0x3ff2ffff
 800bd3c:	40038000 	.word	0x40038000
 800bd40:	3ff80000 	.word	0x3ff80000
 800bd44:	bff00000 	.word	0xbff00000
 800bd48:	0800c3a0 	.word	0x0800c3a0
 800bd4c:	0800c380 	.word	0x0800c380
 800bd50:	3ff921fb 	.word	0x3ff921fb

0800bd54 <fabs>:
 800bd54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bd58:	4770      	bx	lr
	...

0800bd5c <_init>:
 800bd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd5e:	bf00      	nop
 800bd60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd62:	bc08      	pop	{r3}
 800bd64:	469e      	mov	lr, r3
 800bd66:	4770      	bx	lr

0800bd68 <_fini>:
 800bd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd6a:	bf00      	nop
 800bd6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6e:	bc08      	pop	{r3}
 800bd70:	469e      	mov	lr, r3
 800bd72:	4770      	bx	lr
